
main-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009864  08009864  0000a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098c4  080098c4  0000b0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080098c4  080098c4  0000a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098cc  080098cc  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098cc  080098cc  0000a8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098d0  080098d0  0000a8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080098d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001638  200000fc  080099d0  0000b0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001734  080099d0  0000b734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab9e  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041cc  00000000  00000000  00025cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00029e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001141  00000000  00000000  0002b508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a78f  00000000  00000000  0002c649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbef  00000000  00000000  00046dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f081  00000000  00000000  000629c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d90  00000000  00000000  00101a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010781c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800984c 	.word	0x0800984c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	0800984c 	.word	0x0800984c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000512:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000514:	4a21      	ldr	r2, [pc, #132]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_ADC1_Init+0x98>)
 800051a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000526:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1a      	ldr	r3, [pc, #104]	@ (8000598 <MX_ADC1_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <MX_ADC1_Init+0xa0>)
 8000544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <MX_ADC1_Init+0x98>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_ADC1_Init+0x98>)
 800055c:	2201      	movs	r2, #1
 800055e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000562:	f000 febd 	bl	80012e0 <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800056c:	f000 f9da 	bl	8000924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000570:	2308      	movs	r3, #8
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000582:	f000 fef1 	bl	8001368 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800058c:	f000 f9ca 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000118 	.word	0x20000118
 800059c:	40012000 	.word	0x40012000
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a24      	ldr	r2, [pc, #144]	@ (8000654 <HAL_ADC_MspInit+0xb0>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d141      	bne.n	800064a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	4a22      	ldr	r2, [pc, #136]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 80005d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d6:	4b20      	ldr	r3, [pc, #128]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a14      	ldr	r2, [pc, #80]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <HAL_ADC_MspInit+0xb4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800061a:	2380      	movs	r3, #128	@ 0x80
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	480b      	ldr	r0, [pc, #44]	@ (800065c <HAL_ADC_MspInit+0xb8>)
 800062e:	f001 f9cb 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000632:	2301      	movs	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000636:	2303      	movs	r3, #3
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4806      	ldr	r0, [pc, #24]	@ (8000660 <HAL_ADC_MspInit+0xbc>)
 8000646:	f001 f9bf 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3728      	adds	r7, #40	@ 0x28
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40012000 	.word	0x40012000
 8000658:	40023800 	.word	0x40023800
 800065c:	40020000 	.word	0x40020000
 8000660:	40020400 	.word	0x40020400

08000664 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <MX_GPIO_Init+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <MX_GPIO_Init+0xb4>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <MX_GPIO_Init+0xb4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_GPIO_Init+0xb4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a1e      	ldr	r2, [pc, #120]	@ (8000718 <MX_GPIO_Init+0xb4>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <MX_GPIO_Init+0xb4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_GPIO_Init+0xb4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <MX_GPIO_Init+0xb4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_GPIO_Init+0xb4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_GPIO_Init+0xb4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a10      	ldr	r2, [pc, #64]	@ (8000718 <MX_GPIO_Init+0xb4>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_GPIO_Init+0xb4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_GPIO_Init+0xb8>)
 80006f0:	f001 faee 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_GPIO_Init+0xb8>)
 800070c:	f001 f95c 	bl	80019c8 <HAL_GPIO_Init>

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020800 	.word	0x40020800

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 fd45 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f879 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f7ff ff99 	bl	8000664 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000732:	f7ff fee5 	bl	8000500 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000736:	f000 f8fb 	bl	8000930 <MX_SPI1_Init>
  MX_SPI2_Init();
 800073a:	f000 f92f 	bl	800099c <MX_SPI2_Init>
  MX_TIM2_Init();
 800073e:	f000 fa9d 	bl	8000c7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000742:	f000 fb15 	bl	8000d70 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000746:	f000 fc99 	bl	800107c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800074a:	f000 fb8b 	bl	8000e64 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 800074e:	f008 fb67 	bl	8008e20 <MX_USB_DEVICE_Init>
//  uint8_t cmd[3] = { 0x20 | 0x04, 0x02, 0x00};
//  uint8_t rx[3];
//
//  volatile uint8_t reg04;
   {
          uint8_t hdr[2] = { CMD_WREG | REG_MODE, 0x00 }; // write 1 reg
 8000752:	2344      	movs	r3, #68	@ 0x44
 8000754:	82bb      	strh	r3, [r7, #20]
          uint8_t val    = 0x39;
 8000756:	2339      	movs	r3, #57	@ 0x39
 8000758:	74fb      	strb	r3, [r7, #19]
//          ADC_CS_LOW();
          HAL_SPI_Transmit(&hspi2, hdr, 2, HAL_MAX_DELAY);
 800075a:	f107 0114 	add.w	r1, r7, #20
 800075e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000762:	2202      	movs	r2, #2
 8000764:	482c      	ldr	r0, [pc, #176]	@ (8000818 <main+0xf8>)
 8000766:	f003 fa00 	bl	8003b6a <HAL_SPI_Transmit>
          HAL_SPI_Transmit(&hspi2, &val, 1, HAL_MAX_DELAY);
 800076a:	f107 0113 	add.w	r1, r7, #19
 800076e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000772:	2201      	movs	r2, #1
 8000774:	4828      	ldr	r0, [pc, #160]	@ (8000818 <main+0xf8>)
 8000776:	f003 f9f8 	bl	8003b6a <HAL_SPI_Transmit>
//
//		  // stop any further conversions until next START
//		  ADS124_SendCommand(&adc, ADS124_CMD_STOP);
//	  }

	  for (uint8_t ch = 0; ch < 6; ch++)
 800077a:	2300      	movs	r3, #0
 800077c:	77fb      	strb	r3, [r7, #31]
 800077e:	e045      	b.n	800080c <main+0xec>
	  {
		  // a) select channel: INPMUX = P = AINch, N = AINCOM (0x09)
		  {
			  uint8_t hdr[2] = { CMD_WREG | REG_INPMUX, 0x00 };
 8000780:	2342      	movs	r3, #66	@ 0x42
 8000782:	813b      	strh	r3, [r7, #8]
			  uint8_t mux    = (ch << 4) | 0x0c;
 8000784:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	b25b      	sxtb	r3, r3
 800078c:	f043 030c 	orr.w	r3, r3, #12
 8000790:	b25b      	sxtb	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	71fb      	strb	r3, [r7, #7]
//			  ADC_CS_LOW();
			  HAL_SPI_Transmit(&hspi2, hdr, 2, HAL_MAX_DELAY);
 8000796:	f107 0108 	add.w	r1, r7, #8
 800079a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800079e:	2202      	movs	r2, #2
 80007a0:	481d      	ldr	r0, [pc, #116]	@ (8000818 <main+0xf8>)
 80007a2:	f003 f9e2 	bl	8003b6a <HAL_SPI_Transmit>
			  HAL_SPI_Transmit(&hspi2, &mux, 1, HAL_MAX_DELAY);
 80007a6:	1df9      	adds	r1, r7, #7
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ac:	2201      	movs	r2, #1
 80007ae:	481a      	ldr	r0, [pc, #104]	@ (8000818 <main+0xf8>)
 80007b0:	f003 f9db 	bl	8003b6a <HAL_SPI_Transmit>
//			  ADC_CS_HIGH();
		  }

		  // b) start one conversion
		  {
			  uint8_t cmd = CMD_START;
 80007b4:	2308      	movs	r3, #8
 80007b6:	71bb      	strb	r3, [r7, #6]
//			  ADC_CS_LOW();
			  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80007b8:	1db9      	adds	r1, r7, #6
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007be:	2201      	movs	r2, #1
 80007c0:	4815      	ldr	r0, [pc, #84]	@ (8000818 <main+0xf8>)
 80007c2:	f003 f9d2 	bl	8003b6a <HAL_SPI_Transmit>
//			  ADC_CS_HIGH();
		  }

		  // c) wait conversion time (e.g. ~3 ms @ 400 SPS)
		  HAL_Delay(3);
 80007c6:	2003      	movs	r0, #3
 80007c8:	f000 fd66 	bl	8001298 <HAL_Delay>

		  // d) read the 24-bit result via RDATA
		  {
			  uint8_t cmd = CMD_RDATA;
 80007cc:	2312      	movs	r3, #18
 80007ce:	717b      	strb	r3, [r7, #5]
			  uint8_t buf[3];
//			  ADC_CS_LOW();
			  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80007d0:	1d79      	adds	r1, r7, #5
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d6:	2201      	movs	r2, #1
 80007d8:	480f      	ldr	r0, [pc, #60]	@ (8000818 <main+0xf8>)
 80007da:	f003 f9c6 	bl	8003b6a <HAL_SPI_Transmit>
			  HAL_SPI_Receive (&hspi2, buf, 3, HAL_MAX_DELAY);
 80007de:	4639      	mov	r1, r7
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007e4:	2203      	movs	r2, #3
 80007e6:	480c      	ldr	r0, [pc, #48]	@ (8000818 <main+0xf8>)
 80007e8:	f003 fb03 	bl	8003df2 <HAL_SPI_Receive>
//			  ADC_CS_HIGH();

			  uint32_t v = (buf[0] << 16)
 80007ec:	783b      	ldrb	r3, [r7, #0]
 80007ee:	041a      	lsls	r2, r3, #16
						| (buf[1] <<  8)
 80007f0:	787b      	ldrb	r3, [r7, #1]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	4313      	orrs	r3, r2
						|  buf[2];
 80007f6:	78ba      	ldrb	r2, [r7, #2]
 80007f8:	4313      	orrs	r3, r2
			  uint32_t v = (buf[0] << 16)
 80007fa:	61bb      	str	r3, [r7, #24]
			  results[ch] = v;
 80007fc:	7ffb      	ldrb	r3, [r7, #31]
 80007fe:	4907      	ldr	r1, [pc, #28]	@ (800081c <main+0xfc>)
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (uint8_t ch = 0; ch < 6; ch++)
 8000806:	7ffb      	ldrb	r3, [r7, #31]
 8000808:	3301      	adds	r3, #1
 800080a:	77fb      	strb	r3, [r7, #31]
 800080c:	7ffb      	ldrb	r3, [r7, #31]
 800080e:	2b05      	cmp	r3, #5
 8000810:	d9b6      	bls.n	8000780 <main+0x60>
////			  ADC_CS_LOW();
//			  HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
////			  ADC_CS_HIGH();
//		  }
	  }
	  volatile int bkpt = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  {
 8000816:	e7b0      	b.n	800077a <main+0x5a>
 8000818:	200001d4 	.word	0x200001d4
 800081c:	20000164 	.word	0x20000164

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	@ 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	@ 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f008 ffe0 	bl	80097f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b29      	ldr	r3, [pc, #164]	@ (80008f0 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	4a28      	ldr	r2, [pc, #160]	@ (80008f0 <SystemClock_Config+0xd0>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	@ 0x40
 8000854:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <SystemClock_Config+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <SystemClock_Config+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800086c:	4a21      	ldr	r2, [pc, #132]	@ (80008f4 <SystemClock_Config+0xd4>)
 800086e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <SystemClock_Config+0xd4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000894:	2319      	movs	r3, #25
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000898:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800089c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800089e:	2304      	movs	r3, #4
 80008a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a2:	2307      	movs	r3, #7
 80008a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fc7c 	bl	80031a8 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b6:	f000 f835 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fede 	bl	8003698 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008e2:	f000 f81f 	bl	8000924 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	@ 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a05      	ldr	r2, [pc, #20]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d102      	bne.n	8000910 <HAL_TIM_PeriodElapsedCallback+0x18>
        // read sensors & compute SOC

        // send over USB
//        USB_SendTelemetry(totalCurrent, voltage, soc, temp1, temp2);
//        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
        sendTelemetryFlag = 1;
 800090a:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
    }
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	40000800 	.word	0x40000800
 8000920:	20000160 	.word	0x20000160

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_SPI1_Init+0x64>)
 8000936:	4a18      	ldr	r2, [pc, #96]	@ (8000998 <MX_SPI1_Init+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_SPI1_Init+0x64>)
 800093c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_SPI1_Init+0x64>)
 800095c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_SPI1_Init+0x64>)
 800097c:	220a      	movs	r2, #10
 800097e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_SPI1_Init+0x64>)
 8000982:	f003 f869 	bl	8003a58 <HAL_SPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800098c:	f7ff ffca 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000017c 	.word	0x2000017c
 8000998:	40013000 	.word	0x40013000

0800099c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009a2:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <MX_SPI2_Init+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009d0:	2218      	movs	r2, #24
 80009d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e0:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009e8:	220a      	movs	r2, #10
 80009ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <MX_SPI2_Init+0x64>)
 80009ee:	f003 f833 	bl	8003a58 <HAL_SPI_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009f8:	f7ff ff94 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200001d4 	.word	0x200001d4
 8000a04:	40003800 	.word	0x40003800

08000a08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	@ 0x38
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a50      	ldr	r2, [pc, #320]	@ (8000b68 <HAL_SPI_MspInit+0x160>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d14a      	bne.n	8000ac0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
 8000a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a4e      	ldr	r2, [pc, #312]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a42:	623b      	str	r3, [r7, #32]
 8000a44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	4b48      	ldr	r3, [pc, #288]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a47      	ldr	r2, [pc, #284]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b45      	ldr	r3, [pc, #276]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b41      	ldr	r3, [pc, #260]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a40      	ldr	r2, [pc, #256]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b3e      	ldr	r3, [pc, #248]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a7e:	2360      	movs	r3, #96	@ 0x60
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a8e:	2305      	movs	r3, #5
 8000a90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4835      	ldr	r0, [pc, #212]	@ (8000b70 <HAL_SPI_MspInit+0x168>)
 8000a9a:	f000 ff95 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482e      	ldr	r0, [pc, #184]	@ (8000b74 <HAL_SPI_MspInit+0x16c>)
 8000aba:	f000 ff85 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000abe:	e04f      	b.n	8000b60 <HAL_SPI_MspInit+0x158>
  else if(spiHandle->Instance==SPI2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b78 <HAL_SPI_MspInit+0x170>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d14a      	bne.n	8000b60 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a26      	ldr	r2, [pc, #152]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a1f      	ldr	r2, [pc, #124]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a18      	ldr	r2, [pc, #96]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <HAL_SPI_MspInit+0x164>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4810      	ldr	r0, [pc, #64]	@ (8000b7c <HAL_SPI_MspInit+0x174>)
 8000b3a:	f000 ff45 	bl	80019c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b50:	2305      	movs	r3, #5
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <HAL_SPI_MspInit+0x16c>)
 8000b5c:	f000 ff34 	bl	80019c8 <HAL_GPIO_Init>
}
 8000b60:	bf00      	nop
 8000b62:	3738      	adds	r7, #56	@ 0x38
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40013000 	.word	0x40013000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40003800 	.word	0x40003800
 8000b7c:	40020800 	.word	0x40020800

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <MemManage_Handler+0x4>

08000be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c26:	f000 fb17 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <TIM4_IRQHandler+0x10>)
 8000c36:	f003 fd7f 	bl	8004738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200002bc 	.word	0x200002bc

08000c44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <OTG_FS_IRQHandler+0x10>)
 8000c4a:	f001 f99e 	bl	8001f8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20001030 	.word	0x20001030

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
 8000c9a:	615a      	str	r2, [r3, #20]
 8000c9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c9e:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000ca0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cba:	4b2c      	ldr	r3, [pc, #176]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cc6:	4829      	ldr	r0, [pc, #164]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000cc8:	f003 fce7 	bl	800469a <HAL_TIM_PWM_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cd2:	f7ff fe27 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4821      	ldr	r0, [pc, #132]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000ce6:	f004 fa7b 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000cf0:	f7ff fe18 	bl	8000924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf4:	2360      	movs	r3, #96	@ 0x60
 8000cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4818      	ldr	r0, [pc, #96]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000d0c:	f003 fe04 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d16:	f7ff fe05 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4812      	ldr	r0, [pc, #72]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000d22:	f003 fdf9 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d2c:	f7ff fdfa 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2208      	movs	r2, #8
 8000d34:	4619      	mov	r1, r3
 8000d36:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000d38:	f003 fdee 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000d42:	f7ff fdef 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	220c      	movs	r2, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000d4e:	f003 fde3 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000d58:	f7ff fde4 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <MX_TIM2_Init+0xf0>)
 8000d5e:	f000 f92d 	bl	8000fbc <HAL_TIM_MspPostInit>

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	@ 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000022c 	.word	0x2000022c

08000d70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d92:	4b32      	ldr	r3, [pc, #200]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000d94:	4a32      	ldr	r2, [pc, #200]	@ (8000e60 <MX_TIM3_Init+0xf0>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d98:	4b30      	ldr	r3, [pc, #192]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000da4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000daa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000db8:	4828      	ldr	r0, [pc, #160]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000dba:	f003 fc6e 	bl	800469a <HAL_TIM_PWM_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000dc4:	f7ff fdae 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000dd8:	f004 fa02 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000de2:	f7ff fd9f 	bl	8000924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de6:	2360      	movs	r3, #96	@ 0x60
 8000de8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000dfe:	f003 fd8b 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e08:	f7ff fd8c 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2204      	movs	r2, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	4812      	ldr	r0, [pc, #72]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000e14:	f003 fd80 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e1e:	f7ff fd81 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2208      	movs	r2, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000e2a:	f003 fd75 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000e34:	f7ff fd76 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000e40:	f003 fd6a 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000e4a:	f7ff fd6b 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e4e:	4803      	ldr	r0, [pc, #12]	@ (8000e5c <MX_TIM3_Init+0xec>)
 8000e50:	f000 f8b4 	bl	8000fbc <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000274 	.word	0x20000274
 8000e60:	40000400 	.word	0x40000400

08000e64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000e82:	4a1e      	ldr	r2, [pc, #120]	@ (8000efc <MX_TIM4_Init+0x98>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000e88:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000e96:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ea8:	4813      	ldr	r0, [pc, #76]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000eaa:	f003 fba7 	bl	80045fc <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000eb4:	f7ff fd36 	bl	8000924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000ec6:	f003 fde9 	bl	8004a9c <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f7ff fd28 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_TIM4_Init+0x94>)
 8000ee2:	f004 f97d 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f7ff fd1a 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200002bc 	.word	0x200002bc
 8000efc:	40000800 	.word	0x40000800

08000f00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f10:	d10e      	bne.n	8000f30 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <HAL_TIM_PWM_MspInit+0x64>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <HAL_TIM_PWM_MspInit+0x64>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <HAL_TIM_PWM_MspInit+0x64>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f2e:	e012      	b.n	8000f56 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <HAL_TIM_PWM_MspInit+0x68>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d10d      	bne.n	8000f56 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_TIM_PWM_MspInit+0x64>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <HAL_TIM_PWM_MspInit+0x64>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_TIM_PWM_MspInit+0x64>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40000400 	.word	0x40000400

08000f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d115      	bne.n	8000faa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	201e      	movs	r0, #30
 8000fa0:	f000 fcdb 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fa4:	201e      	movs	r0, #30
 8000fa6:	f000 fcf4 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40000800 	.word	0x40000800
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fdc:	d11e      	bne.n	800101c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b22      	ldr	r3, [pc, #136]	@ (800106c <HAL_TIM_MspPostInit+0xb0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a21      	ldr	r2, [pc, #132]	@ (800106c <HAL_TIM_MspPostInit+0xb0>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <HAL_TIM_MspPostInit+0xb0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100a:	2301      	movs	r3, #1
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4816      	ldr	r0, [pc, #88]	@ (8001070 <HAL_TIM_MspPostInit+0xb4>)
 8001016:	f000 fcd7 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800101a:	e023      	b.n	8001064 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <HAL_TIM_MspPostInit+0xb8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d11e      	bne.n	8001064 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <HAL_TIM_MspPostInit+0xb0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a0f      	ldr	r2, [pc, #60]	@ (800106c <HAL_TIM_MspPostInit+0xb0>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <HAL_TIM_MspPostInit+0xb0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001042:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001054:	2302      	movs	r3, #2
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <HAL_TIM_MspPostInit+0xbc>)
 8001060:	f000 fcb2 	bl	80019c8 <HAL_GPIO_Init>
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	40000400 	.word	0x40000400
 8001078:	40020800 	.word	0x40020800

0800107c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <MX_USART1_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010b4:	f004 f916 	bl	80052e4 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f7ff fc31 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000304 	.word	0x20000304
 80010cc:	40011000 	.word	0x40011000

080010d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	@ (8001154 <HAL_UART_MspInit+0x84>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12c      	bne.n	800114c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <HAL_UART_MspInit+0x88>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a17      	ldr	r2, [pc, #92]	@ (8001158 <HAL_UART_MspInit+0x88>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <HAL_UART_MspInit+0x88>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_UART_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <HAL_UART_MspInit+0x88>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <HAL_UART_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800112a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113c:	2307      	movs	r3, #7
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <HAL_UART_MspInit+0x8c>)
 8001148:	f000 fc3e 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	@ 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40011000 	.word	0x40011000
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001164:	f7ff fd78 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f008 fb39 	bl	8009804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fac5 	bl	8000720 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80011a4:	080098d4 	.word	0x080098d4
  ldr r2, =_sbss
 80011a8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80011ac:	20001734 	.word	0x20001734

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <HAL_Init+0x40>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <HAL_Init+0x40>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	@ (80011f4 <HAL_Init+0x40>)
 80011d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 fbb1 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fcca 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fbc9 	bl	80019ae <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001234:	f000 fb91 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000000 	.word	0x20000000
 8001250:	20000008 	.word	0x20000008
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008
 800127c:	2000034c 	.word	0x2000034c

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000034c 	.word	0x2000034c

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e033      	b.n	800135e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff f950 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	d118      	bne.n	8001350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001326:	f023 0302 	bic.w	r3, r3, #2
 800132a:	f043 0202 	orr.w	r2, r3, #2
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f93a 	bl	80015ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f023 0303 	bic.w	r3, r3, #3
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40
 800134e:	e001      	b.n	8001354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1c>
 8001380:	2302      	movs	r3, #2
 8001382:	e105      	b.n	8001590 <HAL_ADC_ConfigChannel+0x228>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d925      	bls.n	80013e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68d9      	ldr	r1, [r3, #12]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	3b1e      	subs	r3, #30
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68d9      	ldr	r1, [r3, #12]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	4603      	mov	r3, r0
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4403      	add	r3, r0
 80013d2:	3b1e      	subs	r3, #30
 80013d4:	409a      	lsls	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	e022      	b.n	8001426 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6919      	ldr	r1, [r3, #16]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	2207      	movs	r2, #7
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	4603      	mov	r3, r0
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4403      	add	r3, r0
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b06      	cmp	r3, #6
 800142c:	d824      	bhi.n	8001478 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	3b05      	subs	r3, #5
 8001440:	221f      	movs	r2, #31
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	400a      	ands	r2, r1
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3b05      	subs	r3, #5
 800146a:	fa00 f203 	lsl.w	r2, r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	635a      	str	r2, [r3, #52]	@ 0x34
 8001476:	e04c      	b.n	8001512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d824      	bhi.n	80014ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	3b23      	subs	r3, #35	@ 0x23
 8001492:	221f      	movs	r2, #31
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43da      	mvns	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	400a      	ands	r2, r1
 80014a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b23      	subs	r3, #35	@ 0x23
 80014bc:	fa00 f203 	lsl.w	r2, r0, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80014c8:	e023      	b.n	8001512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b41      	subs	r3, #65	@ 0x41
 80014dc:	221f      	movs	r2, #31
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	400a      	ands	r2, r1
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	3b41      	subs	r3, #65	@ 0x41
 8001506:	fa00 f203 	lsl.w	r2, r0, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <HAL_ADC_ConfigChannel+0x234>)
 8001514:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <HAL_ADC_ConfigChannel+0x238>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d109      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1cc>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d105      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	@ (80015a0 <HAL_ADC_ConfigChannel+0x238>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d123      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b10      	cmp	r3, #16
 8001544:	d003      	beq.n	800154e <HAL_ADC_ConfigChannel+0x1e6>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b11      	cmp	r3, #17
 800154c:	d11b      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d111      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_ADC_ConfigChannel+0x23c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a10      	ldr	r2, [pc, #64]	@ (80015a8 <HAL_ADC_ConfigChannel+0x240>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	0c9a      	lsrs	r2, r3, #18
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40012300 	.word	0x40012300
 80015a0:	40012000 	.word	0x40012000
 80015a4:	20000000 	.word	0x20000000
 80015a8:	431bde83 	.word	0x431bde83

080015ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b4:	4b79      	ldr	r3, [pc, #484]	@ (800179c <ADC_Init+0x1f0>)
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	021a      	lsls	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163e:	4a58      	ldr	r2, [pc, #352]	@ (80017a0 <ADC_Init+0x1f4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d022      	beq.n	800168a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6899      	ldr	r1, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e00f      	b.n	80016aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0202 	bic.w	r2, r2, #2
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	005a      	lsls	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01b      	beq.n	8001710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	3b01      	subs	r3, #1
 8001704:	035a      	lsls	r2, r3, #13
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e007      	b.n	8001720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	3b01      	subs	r3, #1
 800173c:	051a      	lsls	r2, r3, #20
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001762:	025a      	lsls	r2, r3, #9
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800177a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	029a      	lsls	r2, r3, #10
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40012300 	.word	0x40012300
 80017a0:	0f000001 	.word	0x0f000001

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	@ (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	@ (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	@ (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	@ 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e159      	b.n	8001c98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8148 	bne.w	8001c92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d017      	beq.n	8001ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80a2 	beq.w	8001c92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b57      	ldr	r3, [pc, #348]	@ (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a56      	ldr	r2, [pc, #344]	@ (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b54      	ldr	r3, [pc, #336]	@ (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a52      	ldr	r2, [pc, #328]	@ (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x202>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a48      	ldr	r2, [pc, #288]	@ (8001cbc <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x1fe>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a47      	ldr	r2, [pc, #284]	@ (8001cc0 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x1fa>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a46      	ldr	r2, [pc, #280]	@ (8001cc4 <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x1f6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a45      	ldr	r2, [pc, #276]	@ (8001cc8 <HAL_GPIO_Init+0x300>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x1f2>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	@ (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bea:	4b38      	ldr	r3, [pc, #224]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c38:	4a24      	ldr	r2, [pc, #144]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c62:	4a1a      	ldr	r2, [pc, #104]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f aea2 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	@ 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cec:	e003      	b.n	8001cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cee:	887b      	ldrh	r3, [r7, #2]
 8001cf0:	041a      	lsls	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	619a      	str	r2, [r3, #24]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af02      	add	r7, sp, #8
 8001d08:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e101      	b.n	8001f18 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f007 fa56 	bl	80091e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2203      	movs	r2, #3
 8001d38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d42:	d102      	bne.n	8001d4a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fea3 	bl	8005a9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7c1a      	ldrb	r2, [r3, #16]
 8001d5c:	f88d 2000 	strb.w	r2, [sp]
 8001d60:	3304      	adds	r3, #4
 8001d62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d64:	f003 fd82 	bl	800586c <USB_CoreInit>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0ce      	b.n	8001f18 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fe9b 	bl	8005abc <USB_SetCurrentMode>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0bf      	b.n	8001f18 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e04a      	b.n	8001e34 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3315      	adds	r3, #21
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3314      	adds	r3, #20
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	b298      	uxth	r0, r3
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	332e      	adds	r3, #46	@ 0x2e
 8001dda:	4602      	mov	r2, r0
 8001ddc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3318      	adds	r3, #24
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	331c      	adds	r3, #28
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3320      	adds	r3, #32
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	3324      	adds	r3, #36	@ 0x24
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3301      	adds	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3af      	bcc.n	8001d9e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e044      	b.n	8001ece <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	791b      	ldrb	r3, [r3, #4]
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3b5      	bcc.n	8001e44 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7c1a      	ldrb	r2, [r3, #16]
 8001ee0:	f88d 2000 	strb.w	r2, [sp]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee8:	f003 fe34 	bl	8005b54 <USB_DevInit>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00c      	b.n	8001f18 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fe7e 	bl	8006c12 <USB_DevDisconnect>

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_PCD_Start+0x1c>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e022      	b.n	8001f82 <HAL_PCD_Start+0x62>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fd85 	bl	8005a78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fe2c 	bl	8006bd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f8a:	b590      	push	{r4, r7, lr}
 8001f8c:	b08d      	sub	sp, #52	@ 0x34
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 feea 	bl	8006d7a <USB_GetMode>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f040 848c 	bne.w	80028c6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fe4e 	bl	8006c54 <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8482 	beq.w	80028c4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 fe3b 	bl	8006c54 <USB_ReadInterrupts>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d107      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f002 0202 	and.w	r2, r2, #2
 8001ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 fe29 	bl	8006c54 <USB_ReadInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b10      	cmp	r3, #16
 800200a:	d161      	bne.n	80020d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0210 	bic.w	r2, r2, #16
 800201a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	3304      	adds	r3, #4
 800203a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002042:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002046:	d124      	bne.n	8002092 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d035      	beq.n	80020c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800205e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	6a38      	ldr	r0, [r7, #32]
 8002068:	f004 fc60 	bl	800692c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002078:	441a      	add	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208a:	441a      	add	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	615a      	str	r2, [r3, #20]
 8002090:	e016      	b.n	80020c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002098:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800209c:	d110      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020a4:	2208      	movs	r2, #8
 80020a6:	4619      	mov	r1, r3
 80020a8:	6a38      	ldr	r0, [r7, #32]
 80020aa:	f004 fc3f 	bl	800692c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ba:	441a      	add	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0210 	orr.w	r2, r2, #16
 80020ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 fdbd 	bl	8006c54 <USB_ReadInterrupts>
 80020da:	4603      	mov	r3, r0
 80020dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80020e4:	f040 80a7 	bne.w	8002236 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fdc2 	bl	8006c7a <USB_ReadDevAllOutEpInterrupt>
 80020f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80020f8:	e099      	b.n	800222e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 808e 	beq.w	8002222 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fde6 	bl	8006ce2 <USB_ReadDevOutEPInterrupt>
 8002116:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800212e:	461a      	mov	r2, r3
 8002130:	2301      	movs	r3, #1
 8002132:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fea4 	bl	8002e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002152:	461a      	mov	r2, r3
 8002154:	2308      	movs	r3, #8
 8002156:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002158:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 ff7a 	bl	8003054 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	2310      	movs	r3, #16
 800217a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d030      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	2b80      	cmp	r3, #128	@ 0x80
 8002190:	d109      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	78db      	ldrb	r3, [r3, #3]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2200      	movs	r2, #0
 80021c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4619      	mov	r1, r3
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f007 f901 	bl	80093d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e2:	461a      	mov	r2, r3
 80021e4:	2302      	movs	r3, #2
 80021e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021fe:	461a      	mov	r2, r3
 8002200:	2320      	movs	r3, #32
 8002202:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800221a:	461a      	mov	r2, r3
 800221c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002220:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	3301      	adds	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f af62 	bne.w	80020fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f004 fd0a 	bl	8006c54 <USB_ReadInterrupts>
 8002240:	4603      	mov	r3, r0
 8002242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800224a:	f040 80db 	bne.w	8002404 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f004 fd2b 	bl	8006cae <USB_ReadDevAllInEpInterrupt>
 8002258:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800225e:	e0cd      	b.n	80023fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80c2 	beq.w	80023f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fd51 	bl	8006d1e <USB_ReadDevInEPInterrupt>
 800227c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d057      	beq.n	8002338 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	2201      	movs	r2, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800229c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69f9      	ldr	r1, [r7, #28]
 80022a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80022a8:	4013      	ands	r3, r2
 80022aa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022b8:	461a      	mov	r2, r3
 80022ba:	2301      	movs	r3, #1
 80022bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	799b      	ldrb	r3, [r3, #6]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d132      	bne.n	800232c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3320      	adds	r3, #32
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4403      	add	r3, r0
 80022e6:	331c      	adds	r3, #28
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4419      	add	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4403      	add	r3, r0
 80022fa:	3320      	adds	r3, #32
 80022fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d113      	bne.n	800232c <HAL_PCD_IRQHandler+0x3a2>
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3324      	adds	r3, #36	@ 0x24
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002324:	461a      	mov	r2, r3
 8002326:	2101      	movs	r1, #1
 8002328:	f004 fd58 	bl	8006ddc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	b2db      	uxtb	r3, r3
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f006 ffd5 	bl	80092e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800234e:	461a      	mov	r2, r3
 8002350:	2308      	movs	r3, #8
 8002352:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800236a:	461a      	mov	r2, r3
 800236c:	2310      	movs	r3, #16
 800236e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002386:	461a      	mov	r2, r3
 8002388:	2340      	movs	r3, #64	@ 0x40
 800238a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d023      	beq.n	80023de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002396:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002398:	6a38      	ldr	r0, [r7, #32]
 800239a:	f003 fd3f 	bl	8005e1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800239e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	3310      	adds	r3, #16
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	3304      	adds	r3, #4
 80023b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	78db      	ldrb	r3, [r3, #3]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f007 f818 	bl	80093fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023d8:	461a      	mov	r2, r3
 80023da:	2302      	movs	r3, #2
 80023dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fcbd 	bl	8002d6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	3301      	adds	r3, #1
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80023f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80023fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f47f af2e 	bne.w	8002260 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f004 fc23 	bl	8006c54 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002418:	d122      	bne.n	8002460 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002434:	2b01      	cmp	r3, #1
 8002436:	d108      	bne.n	800244a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002440:	2100      	movs	r1, #0
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fea4 	bl	8003190 <HAL_PCDEx_LPM_Callback>
 8002448:	e002      	b.n	8002450 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f006 ffb6 	bl	80093bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800245e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f004 fbf5 	bl	8006c54 <USB_ReadInterrupts>
 800246a:	4603      	mov	r3, r0
 800246c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002474:	d112      	bne.n	800249c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f006 ff72 	bl	8009370 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800249a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 fbd7 	bl	8006c54 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b0:	f040 80b7 	bne.w	8002622 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2110      	movs	r1, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fca4 	bl	8005e1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024d8:	e046      	b.n	8002568 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024e6:	461a      	mov	r2, r3
 80024e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024fe:	0151      	lsls	r1, r2, #5
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	440a      	add	r2, r1
 8002504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002508:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800250c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800250e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800251a:	461a      	mov	r2, r3
 800251c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002520:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002532:	0151      	lsls	r1, r2, #5
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	440a      	add	r2, r1
 8002538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800253c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002540:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002552:	0151      	lsls	r1, r2, #5
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	440a      	add	r2, r1
 8002558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800255c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002560:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002564:	3301      	adds	r3, #1
 8002566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	791b      	ldrb	r3, [r3, #4]
 800256c:	461a      	mov	r2, r3
 800256e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002570:	4293      	cmp	r3, r2
 8002572:	d3b2      	bcc.n	80024da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002582:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002586:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7bdb      	ldrb	r3, [r3, #15]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d016      	beq.n	80025be <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025a0:	f043 030b 	orr.w	r3, r3, #11
 80025a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025b6:	f043 030b 	orr.w	r3, r3, #11
 80025ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80025bc:	e015      	b.n	80025ea <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025d0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80025d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025e4:	f043 030b 	orr.w	r3, r3, #11
 80025e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025f8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80025fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800260c:	461a      	mov	r2, r3
 800260e:	f004 fbe5 	bl	8006ddc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f004 fb14 	bl	8006c54 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002636:	d123      	bne.n	8002680 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f004 fbaa 	bl	8006d96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fc61 	bl	8005f0e <USB_GetDevSpeed>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681c      	ldr	r4, [r3, #0]
 8002658:	f001 f9ca 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 800265c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002662:	461a      	mov	r2, r3
 8002664:	4620      	mov	r0, r4
 8002666:	f003 f965 	bl	8005934 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f006 fe61 	bl	8009332 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800267e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fae5 	bl	8006c54 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d10a      	bne.n	80026aa <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f006 fe3e 	bl	8009316 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f002 0208 	and.w	r2, r2, #8
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f004 fad0 	bl	8006c54 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ba:	2b80      	cmp	r3, #128	@ 0x80
 80026bc:	d123      	bne.n	8002706 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ce:	e014      	b.n	80026fa <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fb0a 	bl	8002d08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	3301      	adds	r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	791b      	ldrb	r3, [r3, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	4293      	cmp	r3, r2
 8002704:	d3e4      	bcc.n	80026d0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 faa2 	bl	8006c54 <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800271a:	d13c      	bne.n	8002796 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800271c:	2301      	movs	r3, #1
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002720:	e02b      	b.n	800277a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3318      	adds	r3, #24
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d115      	bne.n	8002774 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002748:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	da12      	bge.n	8002774 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3317      	adds	r3, #23
 800275e:	2201      	movs	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 faca 	bl	8002d08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	3301      	adds	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	791b      	ldrb	r3, [r3, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	4293      	cmp	r3, r2
 8002784:	d3cd      	bcc.n	8002722 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f004 fa5a 	bl	8006c54 <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027aa:	d156      	bne.n	800285a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ac:	2301      	movs	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80027b0:	e045      	b.n	800283e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d12e      	bne.n	8002838 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027dc:	2b00      	cmp	r3, #0
 80027de:	da2b      	bge.n	8002838 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80027ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d121      	bne.n	8002838 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10a      	bne.n	8002838 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002830:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002834:	6053      	str	r3, [r2, #4]
            break;
 8002836:	e008      	b.n	800284a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	3301      	adds	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	4293      	cmp	r3, r2
 8002848:	d3b3      	bcc.n	80027b2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f004 f9f8 	bl	8006c54 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800286a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286e:	d10a      	bne.n	8002886 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f006 fdd5 	bl	8009420 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f9e2 	bl	8006c54 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d115      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f006 fdc5 	bl	800943c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	e000      	b.n	80028c6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80028c4:	bf00      	nop
    }
  }
}
 80028c6:	3734      	adds	r7, #52	@ 0x34
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd90      	pop	{r4, r7, pc}

080028cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_PCD_SetAddress+0x1a>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e012      	b.n	800290c <HAL_PCD_SetAddress+0x40>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f004 f941 	bl	8006b84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	4608      	mov	r0, r1
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4603      	mov	r3, r0
 8002924:	70fb      	strb	r3, [r7, #3]
 8002926:	460b      	mov	r3, r1
 8002928:	803b      	strh	r3, [r7, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002936:	2b00      	cmp	r3, #0
 8002938:	da0f      	bge.n	800295a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	3310      	adds	r3, #16
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	3304      	adds	r3, #4
 8002950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	705a      	strb	r2, [r3, #1]
 8002958:	e00f      	b.n	800297a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	3304      	adds	r3, #4
 8002972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002986:	883b      	ldrh	r3, [r7, #0]
 8002988:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	78ba      	ldrb	r2, [r7, #2]
 8002994:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029a8:	78bb      	ldrb	r3, [r7, #2]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d102      	bne.n	80029b4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_PCD_EP_Open+0xae>
 80029be:	2302      	movs	r3, #2
 80029c0:	e00e      	b.n	80029e0 <HAL_PCD_EP_Open+0xcc>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fac1 	bl	8005f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80029de:	7afb      	ldrb	r3, [r7, #11]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da0f      	bge.n	8002a1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 020f 	and.w	r2, r3, #15
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	3304      	adds	r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	705a      	strb	r2, [r3, #1]
 8002a1a:	e00f      	b.n	8002a3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	3304      	adds	r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_PCD_EP_Close+0x6e>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e00e      	b.n	8002a74 <HAL_PCD_EP_Close+0x8c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68f9      	ldr	r1, [r7, #12]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 faff 	bl	8006068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a8c:	7afb      	ldrb	r3, [r7, #11]
 8002a8e:	f003 020f 	and.w	r2, r3, #15
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	7afb      	ldrb	r3, [r7, #11]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	799b      	ldrb	r3, [r3, #6]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d102      	bne.n	8002ad8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	799b      	ldrb	r3, [r3, #6]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6979      	ldr	r1, [r7, #20]
 8002ae4:	f003 fb9c 	bl	8006220 <USB_EPStartXfer>

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002b14:	681b      	ldr	r3, [r3, #0]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b32:	7afb      	ldrb	r3, [r7, #11]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	3310      	adds	r3, #16
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	799b      	ldrb	r3, [r3, #6]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	799b      	ldrb	r3, [r3, #6]
 8002b84:	461a      	mov	r2, r3
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	f003 fb4a 	bl	8006220 <USB_EPStartXfer>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	7912      	ldrb	r2, [r2, #4]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e04f      	b.n	8002c54 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da0f      	bge.n	8002bdc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	3310      	adds	r3, #16
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	705a      	strb	r2, [r3, #1]
 8002bda:	e00d      	b.n	8002bf8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_EP_SetStall+0x82>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e01d      	b.n	8002c54 <HAL_PCD_EP_SetStall+0xbe>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fed8 	bl	80069dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7999      	ldrb	r1, [r3, #6]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c44:	461a      	mov	r2, r3
 8002c46:	f004 f8c9 	bl	8006ddc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	7912      	ldrb	r2, [r2, #4]
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e042      	b.n	8002d00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	da0f      	bge.n	8002ca2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 020f 	and.w	r2, r3, #15
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	3310      	adds	r3, #16
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	705a      	strb	r2, [r3, #1]
 8002ca0:	e00f      	b.n	8002cc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_PCD_EP_ClrStall+0x86>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e00e      	b.n	8002d00 <HAL_PCD_EP_ClrStall+0xa4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 fee1 	bl	8006ab8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da0c      	bge.n	8002d36 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 020f 	and.w	r2, r3, #15
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	3310      	adds	r3, #16
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e00c      	b.n	8002d50 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fd00 	bl	800675c <USB_EPStopXfer>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d60:	7afb      	ldrb	r3, [r7, #11]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08a      	sub	sp, #40	@ 0x28
 8002d6e:	af02      	add	r7, sp, #8
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3310      	adds	r3, #16
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d901      	bls.n	8002da2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06b      	b.n	8002e7a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d902      	bls.n	8002dbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3303      	adds	r3, #3
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc6:	e02a      	b.n	8002e1e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d902      	bls.n	8002de4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3303      	adds	r3, #3
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68d9      	ldr	r1, [r3, #12]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6978      	ldr	r0, [r7, #20]
 8002e02:	f003 fd55 	bl	80068b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	441a      	add	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d809      	bhi.n	8002e48 <PCD_WriteEmptyTxFifo+0xde>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d203      	bcs.n	8002e48 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1bf      	bne.n	8002dc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d811      	bhi.n	8002e78 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	6939      	ldr	r1, [r7, #16]
 8002e70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e74:	4013      	ands	r3, r2
 8002e76:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	333c      	adds	r3, #60	@ 0x3c
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	799b      	ldrb	r3, [r3, #6]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d17b      	bne.n	8002fb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d015      	beq.n	8002ef0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	4a61      	ldr	r2, [pc, #388]	@ (800304c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	f240 80b9 	bls.w	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80b3 	beq.w	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eec:	6093      	str	r3, [r2, #8]
 8002eee:	e0a7      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f06:	461a      	mov	r2, r3
 8002f08:	2320      	movs	r3, #32
 8002f0a:	6093      	str	r3, [r2, #8]
 8002f0c:	e098      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 8093 	bne.w	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800304c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d90f      	bls.n	8002f42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f3e:	6093      	str	r3, [r2, #8]
 8002f40:	e07e      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	3304      	adds	r3, #4
 8002f56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	0159      	lsls	r1, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	440b      	add	r3, r1
 8002f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6e:	1ad2      	subs	r2, r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d114      	bne.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2101      	movs	r1, #1
 8002f90:	f003 ff24 	bl	8006ddc <USB_EP0_OutStart>
 8002f94:	e006      	b.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f006 f97e 	bl	80092ac <HAL_PCD_DataOutStageCallback>
 8002fb0:	e046      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	4a26      	ldr	r2, [pc, #152]	@ (8003050 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d124      	bne.n	8003004 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fd6:	6093      	str	r3, [r2, #8]
 8002fd8:	e032      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f006 f955 	bl	80092ac <HAL_PCD_DataOutStageCallback>
 8003002:	e01d      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d114      	bne.n	8003034 <PCD_EP_OutXfrComplete_int+0x1b0>
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800302c:	461a      	mov	r2, r3
 800302e:	2100      	movs	r1, #0
 8003030:	f003 fed4 	bl	8006ddc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f006 f936 	bl	80092ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	4f54300a 	.word	0x4f54300a
 8003050:	4f54310a 	.word	0x4f54310a

08003054 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	333c      	adds	r3, #60	@ 0x3c
 800306c:	3304      	adds	r3, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a15      	ldr	r2, [pc, #84]	@ (80030dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d90e      	bls.n	80030a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f006 f8ed 	bl	8009288 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <PCD_EP_OutSetupPacket_int+0x88>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d90c      	bls.n	80030d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	799b      	ldrb	r3, [r3, #6]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d108      	bne.n	80030d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030c8:	461a      	mov	r2, r3
 80030ca:	2101      	movs	r1, #1
 80030cc:	f003 fe86 	bl	8006ddc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	4f54300a 	.word	0x4f54300a

080030e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
 80030ec:	4613      	mov	r3, r2
 80030ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030fe:	883b      	ldrh	r3, [r7, #0]
 8003100:	0419      	lsls	r1, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	430a      	orrs	r2, r1
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
 800310c:	e028      	b.n	8003160 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4413      	add	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e00d      	b.n	800313e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	3340      	adds	r3, #64	@ 0x40
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	4413      	add	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	3301      	adds	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	3b01      	subs	r3, #1
 8003144:	429a      	cmp	r2, r3
 8003146:	d3ec      	bcc.n	8003122 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003148:	883b      	ldrh	r3, [r7, #0]
 800314a:	0418      	lsls	r0, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	3b01      	subs	r3, #1
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	4302      	orrs	r2, r0
 8003158:	3340      	adds	r3, #64	@ 0x40
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e267      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d075      	beq.n	80032b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031c6:	4b88      	ldr	r3, [pc, #544]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4b85      	ldr	r3, [pc, #532]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d112      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b82      	ldr	r3, [pc, #520]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b7e      	ldr	r3, [pc, #504]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x108>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d157      	bne.n	80032b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e242      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x74>
 800320e:	4b76      	ldr	r3, [pc, #472]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a75      	ldr	r2, [pc, #468]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b70      	ldr	r3, [pc, #448]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6f      	ldr	r2, [pc, #444]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b6d      	ldr	r3, [pc, #436]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6c      	ldr	r2, [pc, #432]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 8003240:	4b69      	ldr	r3, [pc, #420]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a68      	ldr	r2, [pc, #416]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b66      	ldr	r3, [pc, #408]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a65      	ldr	r2, [pc, #404]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe f80e 	bl	8001280 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe f80a 	bl	8001280 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e207      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b5b      	ldr	r3, [pc, #364]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xc0>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fffa 	bl	8001280 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd fff6 	bl	8001280 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	@ 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1f3      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b51      	ldr	r3, [pc, #324]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0xe8>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032be:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d11c      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b44      	ldr	r3, [pc, #272]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	4b41      	ldr	r3, [pc, #260]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1c7      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b3b      	ldr	r3, [pc, #236]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4937      	ldr	r1, [pc, #220]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	e03a      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <HAL_RCC_OscConfig+0x244>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fd ffaf 	bl	8001280 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003326:	f7fd ffab 	bl	8001280 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1a8      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	4b2b      	ldr	r3, [pc, #172]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b28      	ldr	r3, [pc, #160]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4925      	ldr	r1, [pc, #148]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	4b24      	ldr	r3, [pc, #144]	@ (80033ec <HAL_RCC_OscConfig+0x244>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd ff8e 	bl	8001280 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003368:	f7fd ff8a 	bl	8001280 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e187      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d036      	beq.n	8003400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b15      	ldr	r3, [pc, #84]	@ (80033f0 <HAL_RCC_OscConfig+0x248>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fd ff6e 	bl	8001280 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fd ff6a 	bl	8001280 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e167      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x200>
 80033c6:	e01b      	b.n	8003400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c8:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_RCC_OscConfig+0x248>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fd ff57 	bl	8001280 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	e00e      	b.n	80033f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d6:	f7fd ff53 	bl	8001280 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d907      	bls.n	80033f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e150      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
 80033e8:	40023800 	.word	0x40023800
 80033ec:	42470000 	.word	0x42470000
 80033f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b88      	ldr	r3, [pc, #544]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80033f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ea      	bne.n	80033d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8097 	beq.w	800353c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b81      	ldr	r3, [pc, #516]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	4b7d      	ldr	r3, [pc, #500]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	4a7c      	ldr	r2, [pc, #496]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	@ 0x40
 800342e:	4b7a      	ldr	r3, [pc, #488]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b77      	ldr	r3, [pc, #476]	@ (800361c <HAL_RCC_OscConfig+0x474>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d118      	bne.n	800347c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344a:	4b74      	ldr	r3, [pc, #464]	@ (800361c <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a73      	ldr	r2, [pc, #460]	@ (800361c <HAL_RCC_OscConfig+0x474>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7fd ff13 	bl	8001280 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345e:	f7fd ff0f 	bl	8001280 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e10c      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	4b6a      	ldr	r3, [pc, #424]	@ (800361c <HAL_RCC_OscConfig+0x474>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x2ea>
 8003484:	4b64      	ldr	r3, [pc, #400]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	4a63      	ldr	r2, [pc, #396]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003490:	e01c      	b.n	80034cc <HAL_RCC_OscConfig+0x324>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x30c>
 800349a:	4b5f      	ldr	r3, [pc, #380]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349e:	4a5e      	ldr	r2, [pc, #376]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0x324>
 80034b4:	4b58      	ldr	r3, [pc, #352]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b8:	4a57      	ldr	r2, [pc, #348]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c0:	4b55      	ldr	r3, [pc, #340]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c4:	4a54      	ldr	r2, [pc, #336]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0304 	bic.w	r3, r3, #4
 80034ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fd fed4 	bl	8001280 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fd fed0 	bl	8001280 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0cb      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	4b49      	ldr	r3, [pc, #292]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ee      	beq.n	80034dc <HAL_RCC_OscConfig+0x334>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fd febe 	bl	8001280 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fd feba 	bl	8001280 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0b5      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351e:	4b3e      	ldr	r3, [pc, #248]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ee      	bne.n	8003508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b39      	ldr	r3, [pc, #228]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	4a38      	ldr	r2, [pc, #224]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a1 	beq.w	8003688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003546:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b08      	cmp	r3, #8
 8003550:	d05c      	beq.n	800360c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d141      	bne.n	80035de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355a:	4b31      	ldr	r3, [pc, #196]	@ (8003620 <HAL_RCC_OscConfig+0x478>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fd fe8e 	bl	8001280 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fd fe8a 	bl	8001280 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e087      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	4b27      	ldr	r3, [pc, #156]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	491b      	ldr	r1, [pc, #108]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x478>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7fd fe63 	bl	8001280 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035be:	f7fd fe5f 	bl	8001280 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e05c      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d0:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x416>
 80035dc:	e054      	b.n	8003688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <HAL_RCC_OscConfig+0x478>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd fe4c 	bl	8001280 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fd fe48 	bl	8001280 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e045      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x444>
 800360a:	e03d      	b.n	8003688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e038      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
 8003618:	40023800 	.word	0x40023800
 800361c:	40007000 	.word	0x40007000
 8003620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003624:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <HAL_RCC_OscConfig+0x4ec>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d028      	beq.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d121      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d11a      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800365a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365c:	4293      	cmp	r3, r2
 800365e:	d111      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0cc      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b68      	ldr	r3, [pc, #416]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90c      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b65      	ldr	r3, [pc, #404]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a58      	ldr	r2, [pc, #352]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a52      	ldr	r2, [pc, #328]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800370e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d044      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d119      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d003      	beq.n	8003756 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	4b3f      	ldr	r3, [pc, #252]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003766:	4b3b      	ldr	r3, [pc, #236]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e067      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003776:	4b37      	ldr	r3, [pc, #220]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4934      	ldr	r1, [pc, #208]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003788:	f7fd fd7a 	bl	8001280 <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003790:	f7fd fd76 	bl	8001280 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e04f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 020c 	and.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1eb      	bne.n	8003790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b8:	4b25      	ldr	r3, [pc, #148]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d20c      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b22      	ldr	r3, [pc, #136]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380a:	4b12      	ldr	r3, [pc, #72]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	@ (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	@ (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fcda 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023c00 	.word	0x40023c00
 8003854:	40023800 	.word	0x40023800
 8003858:	080098ac 	.word	0x080098ac
 800385c:	20000000 	.word	0x20000000
 8003860:	20000004 	.word	0x20000004

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003868:	b090      	sub	sp, #64	@ 0x40
 800386a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387c:	4b59      	ldr	r3, [pc, #356]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d00d      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003888:	2b08      	cmp	r3, #8
 800388a:	f200 80a1 	bhi.w	80039d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x34>
 8003892:	2b04      	cmp	r3, #4
 8003894:	d003      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x3a>
 8003896:	e09b      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b53      	ldr	r3, [pc, #332]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800389a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800389c:	e09b      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389e:	4b53      	ldr	r3, [pc, #332]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x188>)
 80038a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038a2:	e098      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b4f      	ldr	r3, [pc, #316]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ae:	4b4d      	ldr	r3, [pc, #308]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d028      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b4a      	ldr	r3, [pc, #296]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	2200      	movs	r2, #0
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038cc:	2100      	movs	r1, #0
 80038ce:	4b47      	ldr	r3, [pc, #284]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x188>)
 80038d0:	fb03 f201 	mul.w	r2, r3, r1
 80038d4:	2300      	movs	r3, #0
 80038d6:	fb00 f303 	mul.w	r3, r0, r3
 80038da:	4413      	add	r3, r2
 80038dc:	4a43      	ldr	r2, [pc, #268]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x188>)
 80038de:	fba0 1202 	umull	r1, r2, r0, r2
 80038e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038e4:	460a      	mov	r2, r1
 80038e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ea:	4413      	add	r3, r2
 80038ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f0:	2200      	movs	r2, #0
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	61fa      	str	r2, [r7, #28]
 80038f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038fe:	f7fc fc69 	bl	80001d4 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4613      	mov	r3, r2
 8003908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800390a:	e053      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390c:	4b35      	ldr	r3, [pc, #212]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	2200      	movs	r2, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	617a      	str	r2, [r7, #20]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800391e:	f04f 0b00 	mov.w	fp, #0
 8003922:	4652      	mov	r2, sl
 8003924:	465b      	mov	r3, fp
 8003926:	f04f 0000 	mov.w	r0, #0
 800392a:	f04f 0100 	mov.w	r1, #0
 800392e:	0159      	lsls	r1, r3, #5
 8003930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003934:	0150      	lsls	r0, r2, #5
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	ebb2 080a 	subs.w	r8, r2, sl
 800393e:	eb63 090b 	sbc.w	r9, r3, fp
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800394e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003952:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003956:	ebb2 0408 	subs.w	r4, r2, r8
 800395a:	eb63 0509 	sbc.w	r5, r3, r9
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	00eb      	lsls	r3, r5, #3
 8003968:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800396c:	00e2      	lsls	r2, r4, #3
 800396e:	4614      	mov	r4, r2
 8003970:	461d      	mov	r5, r3
 8003972:	eb14 030a 	adds.w	r3, r4, sl
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	eb45 030b 	adc.w	r3, r5, fp
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800398a:	4629      	mov	r1, r5
 800398c:	028b      	lsls	r3, r1, #10
 800398e:	4621      	mov	r1, r4
 8003990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003994:	4621      	mov	r1, r4
 8003996:	028a      	lsls	r2, r1, #10
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
 800399c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399e:	2200      	movs	r2, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a8:	f7fc fc14 	bl	80001d4 <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4613      	mov	r3, r2
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	3301      	adds	r3, #1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80039c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039ce:	e002      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80039d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3740      	adds	r7, #64	@ 0x40
 80039dc:	46bd      	mov	sp, r7
 80039de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	017d7840 	.word	0x017d7840

080039f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000000 	.word	0x20000000

08003a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a0c:	f7ff fff0 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0a9b      	lsrs	r3, r3, #10
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	@ (8003a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	080098bc 	.word	0x080098bc

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a34:	f7ff ffdc 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0b5b      	lsrs	r3, r3, #13
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4903      	ldr	r1, [pc, #12]	@ (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	080098bc 	.word	0x080098bc

08003a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07b      	b.n	8003b62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a7a:	d009      	beq.n	8003a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61da      	str	r2, [r3, #28]
 8003a82:	e005      	b.n	8003a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fc ffac 	bl	8000a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b14:	ea42 0103 	orr.w	r1, r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0104 	and.w	r1, r3, #4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	f003 0210 	and.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b088      	sub	sp, #32
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b7a:	f7fd fb81 	bl	8001280 <HAL_GetTick>
 8003b7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d001      	beq.n	8003b94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
 8003b92:	e12a      	b.n	8003dea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Transmit+0x36>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e122      	b.n	8003dea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_SPI_Transmit+0x48>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e11b      	b.n	8003dea <HAL_SPI_Transmit+0x280>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c00:	d10f      	bne.n	8003c22 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2c:	2b40      	cmp	r3, #64	@ 0x40
 8003c2e:	d007      	beq.n	8003c40 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c48:	d152      	bne.n	8003cf0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_Transmit+0xee>
 8003c52:	8b7b      	ldrh	r3, [r7, #26]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d145      	bne.n	8003ce4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	881a      	ldrh	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c7c:	e032      	b.n	8003ce4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d112      	bne.n	8003cb2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cb0:	e018      	b.n	8003ce4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb2:	f7fd fae5 	bl	8001280 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d803      	bhi.n	8003cca <HAL_SPI_Transmit+0x160>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc8:	d102      	bne.n	8003cd0 <HAL_SPI_Transmit+0x166>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e082      	b.n	8003dea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1c7      	bne.n	8003c7e <HAL_SPI_Transmit+0x114>
 8003cee:	e053      	b.n	8003d98 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_SPI_Transmit+0x194>
 8003cf8:	8b7b      	ldrh	r3, [r7, #26]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d147      	bne.n	8003d8e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d24:	e033      	b.n	8003d8e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d113      	bne.n	8003d5c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	7812      	ldrb	r2, [r2, #0]
 8003d40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d5a:	e018      	b.n	8003d8e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d5c:	f7fd fa90 	bl	8001280 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d803      	bhi.n	8003d74 <HAL_SPI_Transmit+0x20a>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d72:	d102      	bne.n	8003d7a <HAL_SPI_Transmit+0x210>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e02d      	b.n	8003dea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1c6      	bne.n	8003d26 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fbd9 	bl	8004554 <SPI_EndRxTxTransaction>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b088      	sub	sp, #32
 8003df6:	af02      	add	r7, sp, #8
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d001      	beq.n	8003e12 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e104      	b.n	800401c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e1a:	d112      	bne.n	8003e42 <HAL_SPI_Receive+0x50>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10e      	bne.n	8003e42 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2204      	movs	r2, #4
 8003e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e2c:	88fa      	ldrh	r2, [r7, #6]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f8f3 	bl	8004024 <HAL_SPI_TransmitReceive>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	e0ec      	b.n	800401c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e42:	f7fd fa1d 	bl	8001280 <HAL_GetTick>
 8003e46:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Receive+0x62>
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0e1      	b.n	800401c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_SPI_Receive+0x74>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e0da      	b.n	800401c <HAL_SPI_Receive+0x22a>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2204      	movs	r2, #4
 8003e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	d007      	beq.n	8003ef4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d170      	bne.n	8003fde <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003efc:	e035      	b.n	8003f6a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d115      	bne.n	8003f38 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f103 020c 	add.w	r2, r3, #12
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	7812      	ldrb	r2, [r2, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f36:	e018      	b.n	8003f6a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f38:	f7fd f9a2 	bl	8001280 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d803      	bhi.n	8003f50 <HAL_SPI_Receive+0x15e>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f4e:	d102      	bne.n	8003f56 <HAL_SPI_Receive+0x164>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e058      	b.n	800401c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1c4      	bne.n	8003efe <HAL_SPI_Receive+0x10c>
 8003f74:	e038      	b.n	8003fe8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d113      	bne.n	8003fac <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	b292      	uxth	r2, r2
 8003f90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f96:	1c9a      	adds	r2, r3, #2
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003faa:	e018      	b.n	8003fde <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fac:	f7fd f968 	bl	8001280 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d803      	bhi.n	8003fc4 <HAL_SPI_Receive+0x1d2>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fc2:	d102      	bne.n	8003fca <HAL_SPI_Receive+0x1d8>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e01e      	b.n	800401c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1c6      	bne.n	8003f76 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	6839      	ldr	r1, [r7, #0]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fa4b 	bl	8004488 <SPI_EndRxTransaction>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800401a:	2300      	movs	r3, #0
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	@ 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004032:	2301      	movs	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004036:	f7fd f923 	bl	8001280 <HAL_GetTick>
 800403a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004042:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800404e:	7ffb      	ldrb	r3, [r7, #31]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d00c      	beq.n	800406e <HAL_SPI_TransmitReceive+0x4a>
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800405a:	d106      	bne.n	800406a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <HAL_SPI_TransmitReceive+0x46>
 8004064:	7ffb      	ldrb	r3, [r7, #31]
 8004066:	2b04      	cmp	r3, #4
 8004068:	d001      	beq.n	800406e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
 800406c:	e17f      	b.n	800436e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x5c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x5c>
 800407a:	887b      	ldrh	r3, [r7, #2]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e174      	b.n	800436e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x6e>
 800408e:	2302      	movs	r3, #2
 8004090:	e16d      	b.n	800436e <HAL_SPI_TransmitReceive+0x34a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d003      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2205      	movs	r2, #5
 80040aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	887a      	ldrh	r2, [r7, #2]
 80040be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	887a      	ldrh	r2, [r7, #2]
 80040d6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ee:	2b40      	cmp	r3, #64	@ 0x40
 80040f0:	d007      	beq.n	8004102 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800410a:	d17e      	bne.n	800420a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_SPI_TransmitReceive+0xf6>
 8004114:	8afb      	ldrh	r3, [r7, #22]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d16c      	bne.n	80041f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	881a      	ldrh	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	1c9a      	adds	r2, r3, #2
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800413e:	e059      	b.n	80041f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d11b      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x162>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d016      	beq.n	8004186 <HAL_SPI_TransmitReceive+0x162>
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	2b01      	cmp	r3, #1
 800415c:	d113      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	881a      	ldrh	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	1c9a      	adds	r2, r3, #2
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d119      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x1a4>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d014      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	b292      	uxth	r2, r2
 80041aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	1c9a      	adds	r2, r3, #2
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041c4:	2301      	movs	r3, #1
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041c8:	f7fd f85a 	bl	8001280 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d80d      	bhi.n	80041f4 <HAL_SPI_TransmitReceive+0x1d0>
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041de:	d009      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0bc      	b.n	800436e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1a0      	bne.n	8004140 <HAL_SPI_TransmitReceive+0x11c>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d19b      	bne.n	8004140 <HAL_SPI_TransmitReceive+0x11c>
 8004208:	e082      	b.n	8004310 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x1f4>
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d171      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	7812      	ldrb	r2, [r2, #0]
 8004224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800423e:	e05d      	b.n	80042fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	d11c      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x264>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x264>
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	2b01      	cmp	r3, #1
 800425c:	d114      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d119      	bne.n	80042ca <HAL_SPI_TransmitReceive+0x2a6>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d014      	beq.n	80042ca <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042c6:	2301      	movs	r3, #1
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042ca:	f7fc ffd9 	bl	8001280 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d803      	bhi.n	80042e2 <HAL_SPI_TransmitReceive+0x2be>
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042e0:	d102      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x2c4>
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e038      	b.n	800436e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d19c      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x21c>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d197      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f91d 	bl	8004554 <SPI_EndRxTxTransaction>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e01d      	b.n	800436e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800436c:	2300      	movs	r3, #0
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3728      	adds	r7, #40	@ 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004388:	f7fc ff7a 	bl	8001280 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	4413      	add	r3, r2
 8004396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004398:	f7fc ff72 	bl	8001280 <HAL_GetTick>
 800439c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800439e:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	015b      	lsls	r3, r3, #5
 80043a4:	0d1b      	lsrs	r3, r3, #20
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ae:	e054      	b.n	800445a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043b6:	d050      	beq.n	800445a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043b8:	f7fc ff62 	bl	8001280 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d902      	bls.n	80043ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d13d      	bne.n	800444a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043e6:	d111      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x94>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f0:	d004      	beq.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fa:	d107      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800440a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004414:	d10f      	bne.n	8004436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e017      	b.n	800447a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3b01      	subs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d19b      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800449c:	d111      	bne.n	80044c2 <SPI_EndRxTransaction+0x3a>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a6:	d004      	beq.n	80044b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b0:	d107      	bne.n	80044c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ca:	d12a      	bne.n	8004522 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d4:	d012      	beq.n	80044fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2200      	movs	r2, #0
 80044de:	2180      	movs	r1, #128	@ 0x80
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff ff49 	bl	8004378 <SPI_WaitFlagStateUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02d      	beq.n	8004548 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e026      	b.n	800454a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2200      	movs	r2, #0
 8004504:	2101      	movs	r1, #1
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff ff36 	bl	8004378 <SPI_WaitFlagStateUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01a      	beq.n	8004548 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e013      	b.n	800454a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	2101      	movs	r1, #1
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff ff23 	bl	8004378 <SPI_WaitFlagStateUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e000      	b.n	800454a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2201      	movs	r2, #1
 8004568:	2102      	movs	r1, #2
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff04 	bl	8004378 <SPI_WaitFlagStateUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e032      	b.n	80045ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004586:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <SPI_EndRxTxTransaction+0xa0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	@ (80045f8 <SPI_EndRxTxTransaction+0xa4>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	0d5b      	lsrs	r3, r3, #21
 8004592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a4:	d112      	bne.n	80045cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2200      	movs	r2, #0
 80045ae:	2180      	movs	r1, #128	@ 0x80
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff fee1 	bl	8004378 <SPI_WaitFlagStateUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d016      	beq.n	80045ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e00f      	b.n	80045ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b80      	cmp	r3, #128	@ 0x80
 80045e4:	d0f2      	beq.n	80045cc <SPI_EndRxTxTransaction+0x78>
 80045e6:	e000      	b.n	80045ea <SPI_EndRxTxTransaction+0x96>
        break;
 80045e8:	bf00      	nop
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000000 	.word	0x20000000
 80045f8:	165e9f81 	.word	0x165e9f81

080045fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e041      	b.n	8004692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc fca2 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 fb1e 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e041      	b.n	8004730 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fc fc1d 	bl	8000f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 facf 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d020      	beq.n	800479c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01b      	beq.n	800479c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0202 	mvn.w	r2, #2
 800476c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa5b 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa4d 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fa5e 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d020      	beq.n	80047e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01b      	beq.n	80047e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0204 	mvn.w	r2, #4
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa35 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa27 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fa38 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d020      	beq.n	8004834 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01b      	beq.n	8004834 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0208 	mvn.w	r2, #8
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa0f 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa01 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fa12 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	d020      	beq.n	8004880 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0210 	mvn.w	r2, #16
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2208      	movs	r2, #8
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f9e9 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f9db 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f9ec 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0201 	mvn.w	r2, #1
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc f82a 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fd04 	bl	80052d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9bd 	bl	8004c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0220 	mvn.w	r2, #32
 8004908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fcd6 	bl	80052bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004932:	2302      	movs	r3, #2
 8004934:	e0ae      	b.n	8004a94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	f200 809f 	bhi.w	8004a84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004946:	a201      	add	r2, pc, #4	@ (adr r2, 800494c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	08004981 	.word	0x08004981
 8004950:	08004a85 	.word	0x08004a85
 8004954:	08004a85 	.word	0x08004a85
 8004958:	08004a85 	.word	0x08004a85
 800495c:	080049c1 	.word	0x080049c1
 8004960:	08004a85 	.word	0x08004a85
 8004964:	08004a85 	.word	0x08004a85
 8004968:	08004a85 	.word	0x08004a85
 800496c:	08004a03 	.word	0x08004a03
 8004970:	08004a85 	.word	0x08004a85
 8004974:	08004a85 	.word	0x08004a85
 8004978:	08004a85 	.word	0x08004a85
 800497c:	08004a43 	.word	0x08004a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fa04 	bl	8004d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0204 	bic.w	r2, r2, #4
 80049aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	619a      	str	r2, [r3, #24]
      break;
 80049be:	e064      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fa4a 	bl	8004e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	619a      	str	r2, [r3, #24]
      break;
 8004a00:	e043      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fa95 	bl	8004f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0208 	orr.w	r2, r2, #8
 8004a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0204 	bic.w	r2, r2, #4
 8004a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69d9      	ldr	r1, [r3, #28]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	61da      	str	r2, [r3, #28]
      break;
 8004a40:	e023      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fadf 	bl	800500c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	021a      	lsls	r2, r3, #8
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	61da      	str	r2, [r3, #28]
      break;
 8004a82:	e002      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e0b4      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x186>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af0:	d03e      	beq.n	8004b70 <HAL_TIM_ConfigClockSource+0xd4>
 8004af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af6:	f200 8087 	bhi.w	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004afe:	f000 8086 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x172>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b06:	d87f      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b70      	cmp	r3, #112	@ 0x70
 8004b0a:	d01a      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0xa6>
 8004b0c:	2b70      	cmp	r3, #112	@ 0x70
 8004b0e:	d87b      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b60      	cmp	r3, #96	@ 0x60
 8004b12:	d050      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b14:	2b60      	cmp	r3, #96	@ 0x60
 8004b16:	d877      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b50      	cmp	r3, #80	@ 0x50
 8004b1a:	d03c      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0xfa>
 8004b1c:	2b50      	cmp	r3, #80	@ 0x50
 8004b1e:	d873      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b40      	cmp	r3, #64	@ 0x40
 8004b22:	d058      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b24:	2b40      	cmp	r3, #64	@ 0x40
 8004b26:	d86f      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b30      	cmp	r3, #48	@ 0x30
 8004b2a:	d064      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b2c:	2b30      	cmp	r3, #48	@ 0x30
 8004b2e:	d86b      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d060      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d867      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d05c      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d05a      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b40:	e062      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b52:	f000 fb25 	bl	80051a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	609a      	str	r2, [r3, #8]
      break;
 8004b6e:	e04f      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b80:	f000 fb0e 	bl	80051a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b92:	609a      	str	r2, [r3, #8]
      break;
 8004b94:	e03c      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 fa82 	bl	80050ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2150      	movs	r1, #80	@ 0x50
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fadb 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e02c      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f000 faa1 	bl	800510a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2160      	movs	r1, #96	@ 0x60
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 facb 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004bd4:	e01c      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	461a      	mov	r2, r3
 8004be4:	f000 fa62 	bl	80050ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2140      	movs	r1, #64	@ 0x40
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fabb 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004bf4:	e00c      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f000 fab2 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004c06:	e003      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0c:	e000      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3a      	ldr	r2, [pc, #232]	@ (8004d78 <TIM_Base_SetConfig+0xfc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00f      	beq.n	8004cb4 <TIM_Base_SetConfig+0x38>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c9a:	d00b      	beq.n	8004cb4 <TIM_Base_SetConfig+0x38>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a37      	ldr	r2, [pc, #220]	@ (8004d7c <TIM_Base_SetConfig+0x100>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d007      	beq.n	8004cb4 <TIM_Base_SetConfig+0x38>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a36      	ldr	r2, [pc, #216]	@ (8004d80 <TIM_Base_SetConfig+0x104>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_Base_SetConfig+0x38>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a35      	ldr	r2, [pc, #212]	@ (8004d84 <TIM_Base_SetConfig+0x108>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d108      	bne.n	8004cc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d78 <TIM_Base_SetConfig+0xfc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01b      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd4:	d017      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a28      	ldr	r2, [pc, #160]	@ (8004d7c <TIM_Base_SetConfig+0x100>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a27      	ldr	r2, [pc, #156]	@ (8004d80 <TIM_Base_SetConfig+0x104>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00f      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a26      	ldr	r2, [pc, #152]	@ (8004d84 <TIM_Base_SetConfig+0x108>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a25      	ldr	r2, [pc, #148]	@ (8004d88 <TIM_Base_SetConfig+0x10c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a24      	ldr	r2, [pc, #144]	@ (8004d8c <TIM_Base_SetConfig+0x110>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a23      	ldr	r2, [pc, #140]	@ (8004d90 <TIM_Base_SetConfig+0x114>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d108      	bne.n	8004d18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <TIM_Base_SetConfig+0xfc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d105      	bne.n	8004d6a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	611a      	str	r2, [r3, #16]
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800

08004d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f023 0201 	bic.w	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0302 	bic.w	r3, r3, #2
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a1c      	ldr	r2, [pc, #112]	@ (8004e5c <TIM_OC1_SetConfig+0xc8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10c      	bne.n	8004e0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0308 	bic.w	r3, r3, #8
 8004df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f023 0304 	bic.w	r3, r3, #4
 8004e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	@ (8004e5c <TIM_OC1_SetConfig+0xc8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d111      	bne.n	8004e36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40010000 	.word	0x40010000

08004e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f023 0210 	bic.w	r2, r3, #16
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0320 	bic.w	r3, r3, #32
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	@ (8004f34 <TIM_OC2_SetConfig+0xd4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d10d      	bne.n	8004edc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a15      	ldr	r2, [pc, #84]	@ (8004f34 <TIM_OC2_SetConfig+0xd4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d113      	bne.n	8004f0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000

08004f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1d      	ldr	r2, [pc, #116]	@ (8005008 <TIM_OC3_SetConfig+0xd0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10d      	bne.n	8004fb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	@ (8005008 <TIM_OC3_SetConfig+0xd0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d113      	bne.n	8004fe2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	621a      	str	r2, [r3, #32]
}
 8004ffc:	bf00      	nop
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40010000 	.word	0x40010000

0800500c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a10      	ldr	r2, [pc, #64]	@ (80050a8 <TIM_OC4_SetConfig+0x9c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d109      	bne.n	8005080 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000

080050ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 030a 	bic.w	r3, r3, #10
 80050e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f023 0210 	bic.w	r2, r3, #16
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	031b      	lsls	r3, r3, #12
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005146:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	f043 0307 	orr.w	r3, r3, #7
 800518c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	609a      	str	r2, [r3, #8]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e050      	b.n	800529a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1c      	ldr	r2, [pc, #112]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005244:	d013      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a18      	ldr	r2, [pc, #96]	@ (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a16      	ldr	r2, [pc, #88]	@ (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a15      	ldr	r2, [pc, #84]	@ (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d10c      	bne.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4313      	orrs	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40014000 	.word	0x40014000

080052bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e042      	b.n	800537c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fb fee0 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	@ 0x24
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f82b 	bl	8005384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800533c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800534c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800535c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005388:	b0c0      	sub	sp, #256	@ 0x100
 800538a:	af00      	add	r7, sp, #0
 800538c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	68d9      	ldr	r1, [r3, #12]
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	ea40 0301 	orr.w	r3, r0, r1
 80053ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053dc:	f021 010c 	bic.w	r1, r1, #12
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053ea:	430b      	orrs	r3, r1
 80053ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fe:	6999      	ldr	r1, [r3, #24]
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	ea40 0301 	orr.w	r3, r0, r1
 800540a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b8f      	ldr	r3, [pc, #572]	@ (8005650 <UART_SetConfig+0x2cc>)
 8005414:	429a      	cmp	r2, r3
 8005416:	d005      	beq.n	8005424 <UART_SetConfig+0xa0>
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b8d      	ldr	r3, [pc, #564]	@ (8005654 <UART_SetConfig+0x2d0>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d104      	bne.n	800542e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005424:	f7fe fb04 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8005428:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800542c:	e003      	b.n	8005436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800542e:	f7fe faeb 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8005432:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005440:	f040 810c 	bne.w	800565c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800544e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	1891      	adds	r1, r2, r2
 800545c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800545e:	415b      	adcs	r3, r3
 8005460:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005466:	4621      	mov	r1, r4
 8005468:	eb12 0801 	adds.w	r8, r2, r1
 800546c:	4629      	mov	r1, r5
 800546e:	eb43 0901 	adc.w	r9, r3, r1
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800547e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005486:	4690      	mov	r8, r2
 8005488:	4699      	mov	r9, r3
 800548a:	4623      	mov	r3, r4
 800548c:	eb18 0303 	adds.w	r3, r8, r3
 8005490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005494:	462b      	mov	r3, r5
 8005496:	eb49 0303 	adc.w	r3, r9, r3
 800549a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054b2:	460b      	mov	r3, r1
 80054b4:	18db      	adds	r3, r3, r3
 80054b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054b8:	4613      	mov	r3, r2
 80054ba:	eb42 0303 	adc.w	r3, r2, r3
 80054be:	657b      	str	r3, [r7, #84]	@ 0x54
 80054c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054c8:	f7fa fe84 	bl	80001d4 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4b61      	ldr	r3, [pc, #388]	@ (8005658 <UART_SetConfig+0x2d4>)
 80054d2:	fba3 2302 	umull	r2, r3, r3, r2
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	011c      	lsls	r4, r3, #4
 80054da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	1891      	adds	r1, r2, r2
 80054f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054f4:	415b      	adcs	r3, r3
 80054f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054fc:	4641      	mov	r1, r8
 80054fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005502:	4649      	mov	r1, r9
 8005504:	eb43 0b01 	adc.w	fp, r3, r1
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800551c:	4692      	mov	sl, r2
 800551e:	469b      	mov	fp, r3
 8005520:	4643      	mov	r3, r8
 8005522:	eb1a 0303 	adds.w	r3, sl, r3
 8005526:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800552a:	464b      	mov	r3, r9
 800552c:	eb4b 0303 	adc.w	r3, fp, r3
 8005530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005540:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005548:	460b      	mov	r3, r1
 800554a:	18db      	adds	r3, r3, r3
 800554c:	643b      	str	r3, [r7, #64]	@ 0x40
 800554e:	4613      	mov	r3, r2
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	647b      	str	r3, [r7, #68]	@ 0x44
 8005556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800555a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800555e:	f7fa fe39 	bl	80001d4 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4611      	mov	r1, r2
 8005568:	4b3b      	ldr	r3, [pc, #236]	@ (8005658 <UART_SetConfig+0x2d4>)
 800556a:	fba3 2301 	umull	r2, r3, r3, r1
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2264      	movs	r2, #100	@ 0x64
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	1acb      	subs	r3, r1, r3
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800557e:	4b36      	ldr	r3, [pc, #216]	@ (8005658 <UART_SetConfig+0x2d4>)
 8005580:	fba3 2302 	umull	r2, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800558c:	441c      	add	r4, r3
 800558e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005592:	2200      	movs	r2, #0
 8005594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005598:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800559c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	1891      	adds	r1, r2, r2
 80055a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055a8:	415b      	adcs	r3, r3
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055b0:	4641      	mov	r1, r8
 80055b2:	1851      	adds	r1, r2, r1
 80055b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80055b6:	4649      	mov	r1, r9
 80055b8:	414b      	adcs	r3, r1
 80055ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055c8:	4659      	mov	r1, fp
 80055ca:	00cb      	lsls	r3, r1, #3
 80055cc:	4651      	mov	r1, sl
 80055ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d2:	4651      	mov	r1, sl
 80055d4:	00ca      	lsls	r2, r1, #3
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	4642      	mov	r2, r8
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055e4:	464b      	mov	r3, r9
 80055e6:	460a      	mov	r2, r1
 80055e8:	eb42 0303 	adc.w	r3, r2, r3
 80055ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005604:	460b      	mov	r3, r1
 8005606:	18db      	adds	r3, r3, r3
 8005608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800560a:	4613      	mov	r3, r2
 800560c:	eb42 0303 	adc.w	r3, r2, r3
 8005610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800561a:	f7fa fddb 	bl	80001d4 <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <UART_SetConfig+0x2d4>)
 8005624:	fba3 1302 	umull	r1, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	2164      	movs	r1, #100	@ 0x64
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	3332      	adds	r3, #50	@ 0x32
 8005636:	4a08      	ldr	r2, [pc, #32]	@ (8005658 <UART_SetConfig+0x2d4>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 0207 	and.w	r2, r3, #7
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4422      	add	r2, r4
 800564a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800564c:	e106      	b.n	800585c <UART_SetConfig+0x4d8>
 800564e:	bf00      	nop
 8005650:	40011000 	.word	0x40011000
 8005654:	40011400 	.word	0x40011400
 8005658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005660:	2200      	movs	r2, #0
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005666:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800566a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800566e:	4642      	mov	r2, r8
 8005670:	464b      	mov	r3, r9
 8005672:	1891      	adds	r1, r2, r2
 8005674:	6239      	str	r1, [r7, #32]
 8005676:	415b      	adcs	r3, r3
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
 800567a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800567e:	4641      	mov	r1, r8
 8005680:	1854      	adds	r4, r2, r1
 8005682:	4649      	mov	r1, r9
 8005684:	eb43 0501 	adc.w	r5, r3, r1
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	00eb      	lsls	r3, r5, #3
 8005692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005696:	00e2      	lsls	r2, r4, #3
 8005698:	4614      	mov	r4, r2
 800569a:	461d      	mov	r5, r3
 800569c:	4643      	mov	r3, r8
 800569e:	18e3      	adds	r3, r4, r3
 80056a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056a4:	464b      	mov	r3, r9
 80056a6:	eb45 0303 	adc.w	r3, r5, r3
 80056aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056ca:	4629      	mov	r1, r5
 80056cc:	008b      	lsls	r3, r1, #2
 80056ce:	4621      	mov	r1, r4
 80056d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d4:	4621      	mov	r1, r4
 80056d6:	008a      	lsls	r2, r1, #2
 80056d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056dc:	f7fa fd7a 	bl	80001d4 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4b60      	ldr	r3, [pc, #384]	@ (8005868 <UART_SetConfig+0x4e4>)
 80056e6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	011c      	lsls	r4, r3, #4
 80056ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005700:	4642      	mov	r2, r8
 8005702:	464b      	mov	r3, r9
 8005704:	1891      	adds	r1, r2, r2
 8005706:	61b9      	str	r1, [r7, #24]
 8005708:	415b      	adcs	r3, r3
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	4641      	mov	r1, r8
 8005712:	1851      	adds	r1, r2, r1
 8005714:	6139      	str	r1, [r7, #16]
 8005716:	4649      	mov	r1, r9
 8005718:	414b      	adcs	r3, r1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005728:	4659      	mov	r1, fp
 800572a:	00cb      	lsls	r3, r1, #3
 800572c:	4651      	mov	r1, sl
 800572e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005732:	4651      	mov	r1, sl
 8005734:	00ca      	lsls	r2, r1, #3
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	4603      	mov	r3, r0
 800573c:	4642      	mov	r2, r8
 800573e:	189b      	adds	r3, r3, r2
 8005740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005744:	464b      	mov	r3, r9
 8005746:	460a      	mov	r2, r1
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	67bb      	str	r3, [r7, #120]	@ 0x78
 800575a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005768:	4649      	mov	r1, r9
 800576a:	008b      	lsls	r3, r1, #2
 800576c:	4641      	mov	r1, r8
 800576e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005772:	4641      	mov	r1, r8
 8005774:	008a      	lsls	r2, r1, #2
 8005776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800577a:	f7fa fd2b 	bl	80001d4 <__aeabi_uldivmod>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4611      	mov	r1, r2
 8005784:	4b38      	ldr	r3, [pc, #224]	@ (8005868 <UART_SetConfig+0x4e4>)
 8005786:	fba3 2301 	umull	r2, r3, r3, r1
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	2264      	movs	r2, #100	@ 0x64
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	1acb      	subs	r3, r1, r3
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	3332      	adds	r3, #50	@ 0x32
 8005798:	4a33      	ldr	r2, [pc, #204]	@ (8005868 <UART_SetConfig+0x4e4>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057a4:	441c      	add	r4, r3
 80057a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057aa:	2200      	movs	r2, #0
 80057ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80057ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80057b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057b4:	4642      	mov	r2, r8
 80057b6:	464b      	mov	r3, r9
 80057b8:	1891      	adds	r1, r2, r2
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	415b      	adcs	r3, r3
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c4:	4641      	mov	r1, r8
 80057c6:	1851      	adds	r1, r2, r1
 80057c8:	6039      	str	r1, [r7, #0]
 80057ca:	4649      	mov	r1, r9
 80057cc:	414b      	adcs	r3, r1
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057dc:	4659      	mov	r1, fp
 80057de:	00cb      	lsls	r3, r1, #3
 80057e0:	4651      	mov	r1, sl
 80057e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e6:	4651      	mov	r1, sl
 80057e8:	00ca      	lsls	r2, r1, #3
 80057ea:	4610      	mov	r0, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	4603      	mov	r3, r0
 80057f0:	4642      	mov	r2, r8
 80057f2:	189b      	adds	r3, r3, r2
 80057f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057f6:	464b      	mov	r3, r9
 80057f8:	460a      	mov	r2, r1
 80057fa:	eb42 0303 	adc.w	r3, r2, r3
 80057fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	663b      	str	r3, [r7, #96]	@ 0x60
 800580a:	667a      	str	r2, [r7, #100]	@ 0x64
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005818:	4649      	mov	r1, r9
 800581a:	008b      	lsls	r3, r1, #2
 800581c:	4641      	mov	r1, r8
 800581e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005822:	4641      	mov	r1, r8
 8005824:	008a      	lsls	r2, r1, #2
 8005826:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800582a:	f7fa fcd3 	bl	80001d4 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <UART_SetConfig+0x4e4>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	@ 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	3332      	adds	r3, #50	@ 0x32
 8005846:	4a08      	ldr	r2, [pc, #32]	@ (8005868 <UART_SetConfig+0x4e4>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 020f 	and.w	r2, r3, #15
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4422      	add	r2, r4
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005862:	46bd      	mov	sp, r7
 8005864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005868:	51eb851f 	.word	0x51eb851f

0800586c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800586c:	b084      	sub	sp, #16
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	f107 001c 	add.w	r0, r7, #28
 800587a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800587e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005882:	2b01      	cmp	r3, #1
 8005884:	d123      	bne.n	80058ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800589a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d105      	bne.n	80058c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fae8 	bl	8006e98 <USB_CoreReset>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
 80058cc:	e01b      	b.n	8005906 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 fadc 	bl	8006e98 <USB_CoreReset>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80058f8:	e005      	b.n	8005906 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005906:	7fbb      	ldrb	r3, [r7, #30]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10b      	bne.n	8005924 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f043 0206 	orr.w	r2, r3, #6
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005930:	b004      	add	sp, #16
 8005932:	4770      	bx	lr

08005934 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4613      	mov	r3, r2
 8005940:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d165      	bne.n	8005a14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a41      	ldr	r2, [pc, #260]	@ (8005a50 <USB_SetTurnaroundTime+0x11c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d906      	bls.n	800595e <USB_SetTurnaroundTime+0x2a>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4a40      	ldr	r2, [pc, #256]	@ (8005a54 <USB_SetTurnaroundTime+0x120>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d202      	bcs.n	800595e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005958:	230f      	movs	r3, #15
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e062      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4a3c      	ldr	r2, [pc, #240]	@ (8005a54 <USB_SetTurnaroundTime+0x120>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d306      	bcc.n	8005974 <USB_SetTurnaroundTime+0x40>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4a3b      	ldr	r2, [pc, #236]	@ (8005a58 <USB_SetTurnaroundTime+0x124>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d202      	bcs.n	8005974 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800596e:	230e      	movs	r3, #14
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e057      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4a38      	ldr	r2, [pc, #224]	@ (8005a58 <USB_SetTurnaroundTime+0x124>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d306      	bcc.n	800598a <USB_SetTurnaroundTime+0x56>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4a37      	ldr	r2, [pc, #220]	@ (8005a5c <USB_SetTurnaroundTime+0x128>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d202      	bcs.n	800598a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005984:	230d      	movs	r3, #13
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	e04c      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a33      	ldr	r2, [pc, #204]	@ (8005a5c <USB_SetTurnaroundTime+0x128>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d306      	bcc.n	80059a0 <USB_SetTurnaroundTime+0x6c>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4a32      	ldr	r2, [pc, #200]	@ (8005a60 <USB_SetTurnaroundTime+0x12c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d802      	bhi.n	80059a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800599a:	230c      	movs	r3, #12
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e041      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005a60 <USB_SetTurnaroundTime+0x12c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d906      	bls.n	80059b6 <USB_SetTurnaroundTime+0x82>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005a64 <USB_SetTurnaroundTime+0x130>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d802      	bhi.n	80059b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059b0:	230b      	movs	r3, #11
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e036      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a64 <USB_SetTurnaroundTime+0x130>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d906      	bls.n	80059cc <USB_SetTurnaroundTime+0x98>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4a29      	ldr	r2, [pc, #164]	@ (8005a68 <USB_SetTurnaroundTime+0x134>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d802      	bhi.n	80059cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059c6:	230a      	movs	r3, #10
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e02b      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4a26      	ldr	r2, [pc, #152]	@ (8005a68 <USB_SetTurnaroundTime+0x134>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d906      	bls.n	80059e2 <USB_SetTurnaroundTime+0xae>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4a25      	ldr	r2, [pc, #148]	@ (8005a6c <USB_SetTurnaroundTime+0x138>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d202      	bcs.n	80059e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059dc:	2309      	movs	r3, #9
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e020      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4a21      	ldr	r2, [pc, #132]	@ (8005a6c <USB_SetTurnaroundTime+0x138>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d306      	bcc.n	80059f8 <USB_SetTurnaroundTime+0xc4>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4a20      	ldr	r2, [pc, #128]	@ (8005a70 <USB_SetTurnaroundTime+0x13c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d802      	bhi.n	80059f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059f2:	2308      	movs	r3, #8
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e015      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005a70 <USB_SetTurnaroundTime+0x13c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d906      	bls.n	8005a0e <USB_SetTurnaroundTime+0xda>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4a1c      	ldr	r2, [pc, #112]	@ (8005a74 <USB_SetTurnaroundTime+0x140>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d202      	bcs.n	8005a0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a08:	2307      	movs	r3, #7
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e00a      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a0e:	2306      	movs	r3, #6
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e007      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a1a:	2309      	movs	r3, #9
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e001      	b.n	8005a24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a20:	2309      	movs	r3, #9
 8005a22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	029b      	lsls	r3, r3, #10
 8005a38:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	00d8acbf 	.word	0x00d8acbf
 8005a54:	00e4e1c0 	.word	0x00e4e1c0
 8005a58:	00f42400 	.word	0x00f42400
 8005a5c:	01067380 	.word	0x01067380
 8005a60:	011a499f 	.word	0x011a499f
 8005a64:	01312cff 	.word	0x01312cff
 8005a68:	014ca43f 	.word	0x014ca43f
 8005a6c:	016e3600 	.word	0x016e3600
 8005a70:	01a6ab1f 	.word	0x01a6ab1f
 8005a74:	01e84800 	.word	0x01e84800

08005a78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f043 0201 	orr.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d115      	bne.n	8005b0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005aea:	200a      	movs	r0, #10
 8005aec:	f7fb fbd4 	bl	8001298 <HAL_Delay>
      ms += 10U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	330a      	adds	r3, #10
 8005af4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f001 f93f 	bl	8006d7a <USB_GetMode>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d01e      	beq.n	8005b40 <USB_SetCurrentMode+0x84>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b06:	d9f0      	bls.n	8005aea <USB_SetCurrentMode+0x2e>
 8005b08:	e01a      	b.n	8005b40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d115      	bne.n	8005b3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b1c:	200a      	movs	r0, #10
 8005b1e:	f7fb fbbb 	bl	8001298 <HAL_Delay>
      ms += 10U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	330a      	adds	r3, #10
 8005b26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 f926 	bl	8006d7a <USB_GetMode>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <USB_SetCurrentMode+0x84>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b38:	d9f0      	bls.n	8005b1c <USB_SetCurrentMode+0x60>
 8005b3a:	e001      	b.n	8005b40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e005      	b.n	8005b4c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b44:	d101      	bne.n	8005b4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b54:	b084      	sub	sp, #16
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	e009      	b.n	8005b88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	3340      	adds	r3, #64	@ 0x40
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	3301      	adds	r3, #1
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b0e      	cmp	r3, #14
 8005b8c:	d9f2      	bls.n	8005b74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11c      	bne.n	8005bd0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	639a      	str	r2, [r3, #56]	@ 0x38
 8005bce:	e00b      	b.n	8005be8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bf4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10d      	bne.n	8005c18 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c04:	2100      	movs	r1, #0
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f968 	bl	8005edc <USB_SetDevSpeed>
 8005c0c:	e008      	b.n	8005c20 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c0e:	2101      	movs	r1, #1
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f963 	bl	8005edc <USB_SetDevSpeed>
 8005c16:	e003      	b.n	8005c20 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c18:	2103      	movs	r1, #3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f95e 	bl	8005edc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c20:	2110      	movs	r1, #16
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f8fa 	bl	8005e1c <USB_FlushTxFifo>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f924 	bl	8005e80 <USB_FlushRxFifo>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c54:	461a      	mov	r2, r3
 8005c56:	2300      	movs	r3, #0
 8005c58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c60:	461a      	mov	r2, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	e043      	b.n	8005cf4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c82:	d118      	bne.n	8005cb6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c96:	461a      	mov	r2, r3
 8005c98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e013      	b.n	8005cc8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cac:	461a      	mov	r2, r3
 8005cae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	e008      	b.n	8005cc8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d3b5      	bcc.n	8005c6c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	e043      	b.n	8005d8e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d1c:	d118      	bne.n	8005d50 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e013      	b.n	8005d62 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d46:	461a      	mov	r2, r3
 8005d48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e008      	b.n	8005d62 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2300      	movs	r3, #0
 8005d72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d80:	461a      	mov	r2, r3
 8005d82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d92:	461a      	mov	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d3b5      	bcc.n	8005d06 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005dba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f043 0210 	orr.w	r2, r3, #16
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	4b10      	ldr	r3, [pc, #64]	@ (8005e18 <USB_DevInit+0x2c4>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ddc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f043 0208 	orr.w	r2, r3, #8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005df0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d107      	bne.n	8005e08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e00:	f043 0304 	orr.w	r3, r3, #4
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e14:	b004      	add	sp, #16
 8005e16:	4770      	bx	lr
 8005e18:	803c3800 	.word	0x803c3800

08005e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e36:	d901      	bls.n	8005e3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e01b      	b.n	8005e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	daf2      	bge.n	8005e2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	019b      	lsls	r3, r3, #6
 8005e4c:	f043 0220 	orr.w	r2, r3, #32
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e60:	d901      	bls.n	8005e66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e006      	b.n	8005e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d0f0      	beq.n	8005e54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e98:	d901      	bls.n	8005e9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e018      	b.n	8005ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	daf2      	bge.n	8005e8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2210      	movs	r2, #16
 8005eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ebc:	d901      	bls.n	8005ec2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e006      	b.n	8005ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b10      	cmp	r3, #16
 8005ecc:	d0f0      	beq.n	8005eb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005efc:	4313      	orrs	r3, r2
 8005efe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b087      	sub	sp, #28
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0306 	and.w	r3, r3, #6
 8005f26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]
 8005f32:	e00a      	b.n	8005f4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d002      	beq.n	8005f40 <USB_GetDevSpeed+0x32>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d102      	bne.n	8005f46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f40:	2302      	movs	r3, #2
 8005f42:	75fb      	strb	r3, [r7, #23]
 8005f44:	e001      	b.n	8005f4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f46:	230f      	movs	r3, #15
 8005f48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d13a      	bne.n	8005fea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	2101      	movs	r1, #1
 8005f86:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	68f9      	ldr	r1, [r7, #12]
 8005f8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d155      	bne.n	8006058 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	059b      	lsls	r3, r3, #22
 8005fce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e036      	b.n	8006058 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006008:	4313      	orrs	r3, r2
 800600a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d11a      	bne.n	8006058 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	791b      	ldrb	r3, [r3, #4]
 800603c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800603e:	430b      	orrs	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	440a      	add	r2, r1
 800604a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800604e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006056:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d161      	bne.n	8006148 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800609a:	d11f      	bne.n	80060dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	2101      	movs	r1, #1
 80060ee:	fa01 f303 	lsl.w	r3, r1, r3
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	43db      	mvns	r3, r3
 80060f6:	68f9      	ldr	r1, [r7, #12]
 80060f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060fc:	4013      	ands	r3, r2
 80060fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	2101      	movs	r1, #1
 8006112:	fa01 f303 	lsl.w	r3, r1, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006120:	4013      	ands	r3, r2
 8006122:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	0159      	lsls	r1, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	440b      	add	r3, r1
 800613a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613e:	4619      	mov	r1, r3
 8006140:	4b35      	ldr	r3, [pc, #212]	@ (8006218 <USB_DeactivateEndpoint+0x1b0>)
 8006142:	4013      	ands	r3, r2
 8006144:	600b      	str	r3, [r1, #0]
 8006146:	e060      	b.n	800620a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800615a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800615e:	d11f      	bne.n	80061a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800617a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800617e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800619e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	2101      	movs	r1, #1
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	43db      	mvns	r3, r3
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061c0:	4013      	ands	r3, r2
 80061c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	2101      	movs	r1, #1
 80061d6:	fa01 f303 	lsl.w	r3, r1, r3
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	43db      	mvns	r3, r3
 80061de:	68f9      	ldr	r1, [r7, #12]
 80061e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061e4:	4013      	ands	r3, r2
 80061e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	0159      	lsls	r1, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006202:	4619      	mov	r1, r3
 8006204:	4b05      	ldr	r3, [pc, #20]	@ (800621c <USB_DeactivateEndpoint+0x1b4>)
 8006206:	4013      	ands	r3, r2
 8006208:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	ec337800 	.word	0xec337800
 800621c:	eff37800 	.word	0xeff37800

08006220 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	@ 0x28
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	4613      	mov	r3, r2
 800622c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	2b01      	cmp	r3, #1
 800623e:	f040 817f 	bne.w	8006540 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d132      	bne.n	80062b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006264:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006268:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800626c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006288:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800628c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a8:	0cdb      	lsrs	r3, r3, #19
 80062aa:	04db      	lsls	r3, r3, #19
 80062ac:	6113      	str	r3, [r2, #16]
 80062ae:	e097      	b.n	80063e0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ca:	0cdb      	lsrs	r3, r3, #19
 80062cc:	04db      	lsls	r3, r3, #19
 80062ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d11a      	bne.n	8006330 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	429a      	cmp	r2, r3
 8006304:	d903      	bls.n	800630e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006328:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800632c:	6113      	str	r3, [r2, #16]
 800632e:	e044      	b.n	80063ba <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4413      	add	r3, r2
 800633a:	1e5a      	subs	r2, r3, #1
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	fbb2 f3f3 	udiv	r3, r2, r3
 8006344:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	8afb      	ldrh	r3, [r7, #22]
 8006356:	04d9      	lsls	r1, r3, #19
 8006358:	4ba4      	ldr	r3, [pc, #656]	@ (80065ec <USB_EPStartXfer+0x3cc>)
 800635a:	400b      	ands	r3, r1
 800635c:	69b9      	ldr	r1, [r7, #24]
 800635e:	0148      	lsls	r0, r1, #5
 8006360:	69f9      	ldr	r1, [r7, #28]
 8006362:	4401      	add	r1, r0
 8006364:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006368:	4313      	orrs	r3, r2
 800636a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	791b      	ldrb	r3, [r3, #4]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d122      	bne.n	80063ba <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800638e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006392:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a0:	691a      	ldr	r2, [r3, #16]
 80063a2:	8afb      	ldrh	r3, [r7, #22]
 80063a4:	075b      	lsls	r3, r3, #29
 80063a6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80063aa:	69b9      	ldr	r1, [r7, #24]
 80063ac:	0148      	lsls	r0, r1, #5
 80063ae:	69f9      	ldr	r1, [r7, #28]
 80063b0:	4401      	add	r1, r0
 80063b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063b6:	4313      	orrs	r3, r2
 80063b8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d0:	69b9      	ldr	r1, [r7, #24]
 80063d2:	0148      	lsls	r0, r1, #5
 80063d4:	69f9      	ldr	r1, [r7, #28]
 80063d6:	4401      	add	r1, r0
 80063d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063dc:	4313      	orrs	r3, r2
 80063de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d14b      	bne.n	800647e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d009      	beq.n	8006402 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fa:	461a      	mov	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	791b      	ldrb	r3, [r3, #4]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d128      	bne.n	800645c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006416:	2b00      	cmp	r3, #0
 8006418:	d110      	bne.n	800643c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006434:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e00f      	b.n	800645c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800645a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006476:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	e166      	b.n	800674c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006498:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800649c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	791b      	ldrb	r3, [r3, #4]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d015      	beq.n	80064d2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 814e 	beq.w	800674c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	2101      	movs	r1, #1
 80064c2:	fa01 f303 	lsl.w	r3, r1, r3
 80064c6:	69f9      	ldr	r1, [r7, #28]
 80064c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064cc:	4313      	orrs	r3, r2
 80064ce:	634b      	str	r3, [r1, #52]	@ 0x34
 80064d0:	e13c      	b.n	800674c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d110      	bne.n	8006504 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	e00f      	b.n	8006524 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	440a      	add	r2, r1
 800651a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800651e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006522:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	68d9      	ldr	r1, [r3, #12]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	781a      	ldrb	r2, [r3, #0]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	b298      	uxth	r0, r3
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4603      	mov	r3, r0
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f9b9 	bl	80068b0 <USB_WritePacket>
 800653e:	e105      	b.n	800674c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800655a:	0cdb      	lsrs	r3, r3, #19
 800655c:	04db      	lsls	r3, r3, #19
 800655e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800657a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800657e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006582:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d132      	bne.n	80065f0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b8:	69b9      	ldr	r1, [r7, #24]
 80065ba:	0148      	lsls	r0, r1, #5
 80065bc:	69f9      	ldr	r1, [r7, #28]
 80065be:	4401      	add	r1, r0
 80065c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065c4:	4313      	orrs	r3, r2
 80065c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065e6:	6113      	str	r3, [r2, #16]
 80065e8:	e062      	b.n	80066b0 <USB_EPStartXfer+0x490>
 80065ea:	bf00      	nop
 80065ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d123      	bne.n	8006640 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800660e:	69b9      	ldr	r1, [r7, #24]
 8006610:	0148      	lsls	r0, r1, #5
 8006612:	69f9      	ldr	r1, [r7, #28]
 8006614:	4401      	add	r1, r0
 8006616:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800661a:	4313      	orrs	r3, r2
 800661c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800663c:	6113      	str	r3, [r2, #16]
 800663e:	e037      	b.n	80066b0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	4413      	add	r3, r2
 800664a:	1e5a      	subs	r2, r3, #1
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	8afa      	ldrh	r2, [r7, #22]
 800665c:	fb03 f202 	mul.w	r2, r3, r2
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006670:	691a      	ldr	r2, [r3, #16]
 8006672:	8afb      	ldrh	r3, [r7, #22]
 8006674:	04d9      	lsls	r1, r3, #19
 8006676:	4b38      	ldr	r3, [pc, #224]	@ (8006758 <USB_EPStartXfer+0x538>)
 8006678:	400b      	ands	r3, r1
 800667a:	69b9      	ldr	r1, [r7, #24]
 800667c:	0148      	lsls	r0, r1, #5
 800667e:	69f9      	ldr	r1, [r7, #28]
 8006680:	4401      	add	r1, r0
 8006682:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006686:	4313      	orrs	r3, r2
 8006688:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a0:	69b9      	ldr	r1, [r7, #24]
 80066a2:	0148      	lsls	r0, r1, #5
 80066a4:	69f9      	ldr	r1, [r7, #28]
 80066a6:	4401      	add	r1, r0
 80066a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066ac:	4313      	orrs	r3, r2
 80066ae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d10d      	bne.n	80066d2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	68d9      	ldr	r1, [r3, #12]
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ce:	460a      	mov	r2, r1
 80066d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	791b      	ldrb	r3, [r3, #4]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d128      	bne.n	800672c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d110      	bne.n	800670c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006704:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e00f      	b.n	800672c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	440a      	add	r2, r1
 8006722:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800672a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006746:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800674a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	1ff80000 	.word	0x1ff80000

0800675c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d14a      	bne.n	8006810 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800678e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006792:	f040 8086 	bne.w	80068a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d902      	bls.n	80067f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	75fb      	strb	r3, [r7, #23]
          break;
 80067f2:	e056      	b.n	80068a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800680c:	d0e7      	beq.n	80067de <USB_EPStopXfer+0x82>
 800680e:	e048      	b.n	80068a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006828:	d13b      	bne.n	80068a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006848:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800684c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800686c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006870:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800687e:	4293      	cmp	r3, r2
 8006880:	d902      	bls.n	8006888 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	75fb      	strb	r3, [r7, #23]
          break;
 8006886:	e00c      	b.n	80068a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800689c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a0:	d0e7      	beq.n	8006872 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b089      	sub	sp, #36	@ 0x24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4611      	mov	r1, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	460b      	mov	r3, r1
 80068c0:	71fb      	strb	r3, [r7, #7]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d123      	bne.n	800691e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068d6:	88bb      	ldrh	r3, [r7, #4]
 80068d8:	3303      	adds	r3, #3
 80068da:	089b      	lsrs	r3, r3, #2
 80068dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068de:	2300      	movs	r3, #0
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	e018      	b.n	8006916 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	031a      	lsls	r2, r3, #12
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f0:	461a      	mov	r2, r3
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	3301      	adds	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	3301      	adds	r3, #1
 8006902:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	3301      	adds	r3, #1
 8006908:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	3301      	adds	r3, #1
 800690e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	3301      	adds	r3, #1
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	429a      	cmp	r2, r3
 800691c:	d3e2      	bcc.n	80068e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3724      	adds	r7, #36	@ 0x24
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800692c:	b480      	push	{r7}
 800692e:	b08b      	sub	sp, #44	@ 0x2c
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	089b      	lsrs	r3, r3, #2
 8006946:	b29b      	uxth	r3, r3
 8006948:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006952:	2300      	movs	r3, #0
 8006954:	623b      	str	r3, [r7, #32]
 8006956:	e014      	b.n	8006982 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	601a      	str	r2, [r3, #0]
    pDest++;
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	3301      	adds	r3, #1
 8006968:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	3301      	adds	r3, #1
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	3301      	adds	r3, #1
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	3301      	adds	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	3301      	adds	r3, #1
 8006980:	623b      	str	r3, [r7, #32]
 8006982:	6a3a      	ldr	r2, [r7, #32]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	429a      	cmp	r2, r3
 8006988:	d3e6      	bcc.n	8006958 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800698a:	8bfb      	ldrh	r3, [r7, #30]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01e      	beq.n	80069ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800699a:	461a      	mov	r2, r3
 800699c:	f107 0310 	add.w	r3, r7, #16
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	701a      	strb	r2, [r3, #0]
      i++;
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	3301      	adds	r3, #1
 80069ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	3301      	adds	r3, #1
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80069c2:	8bfb      	ldrh	r3, [r7, #30]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069c8:	8bfb      	ldrh	r3, [r7, #30]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1ea      	bne.n	80069a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	372c      	adds	r7, #44	@ 0x2c
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d12c      	bne.n	8006a52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	db12      	blt.n	8006a30 <USB_EPSetStall+0x54>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00f      	beq.n	8006a30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	e02b      	b.n	8006aaa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	db12      	blt.n	8006a8a <USB_EPSetStall+0xae>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00f      	beq.n	8006a8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	0151      	lsls	r1, r2, #5
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	440a      	add	r2, r1
 8006a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006aa8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d128      	bne.n	8006b26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006af2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	791b      	ldrb	r3, [r3, #4]
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d003      	beq.n	8006b04 <USB_EPClearStall+0x4c>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d138      	bne.n	8006b76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	e027      	b.n	8006b76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	791b      	ldrb	r3, [r3, #4]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d003      	beq.n	8006b56 <USB_EPClearStall+0x9e>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	791b      	ldrb	r3, [r3, #4]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d10f      	bne.n	8006b76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	0151      	lsls	r1, r2, #5
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ba2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006ba6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006bb8:	68f9      	ldr	r1, [r7, #12]
 8006bba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bea:	f023 0303 	bic.w	r3, r3, #3
 8006bee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bfe:	f023 0302 	bic.w	r3, r3, #2
 8006c02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c2c:	f023 0303 	bic.w	r3, r3, #3
 8006c30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c40:	f043 0302 	orr.w	r3, r3, #2
 8006c44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	0c1b      	lsrs	r3, r3, #16
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	b29b      	uxth	r3, r3
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d10:	68bb      	ldr	r3, [r7, #8]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b087      	sub	sp, #28
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4e:	01db      	lsls	r3, r3, #7
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0301 	and.w	r3, r3, #1
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006db4:	f023 0307 	bic.w	r3, r3, #7
 8006db8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	460b      	mov	r3, r1
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	333c      	adds	r3, #60	@ 0x3c
 8006df2:	3304      	adds	r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4a26      	ldr	r2, [pc, #152]	@ (8006e94 <USB_EP0_OutStart+0xb8>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d90a      	bls.n	8006e16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e10:	d101      	bne.n	8006e16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	e037      	b.n	8006e86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e44:	f043 0318 	orr.w	r3, r3, #24
 8006e48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e58:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006e5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d10f      	bne.n	8006e84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e7e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	4f54300a 	.word	0x4f54300a

08006e98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eb0:	d901      	bls.n	8006eb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e01b      	b.n	8006eee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	daf2      	bge.n	8006ea4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f043 0201 	orr.w	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eda:	d901      	bls.n	8006ee0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e006      	b.n	8006eee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d0f0      	beq.n	8006ece <USB_CoreReset+0x36>

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f08:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f0c:	f002 fc2e 	bl	800976c <USBD_static_malloc>
 8006f10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	32b0      	adds	r2, #176	@ 0xb0
 8006f22:	2100      	movs	r1, #0
 8006f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e0d4      	b.n	80070d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f2c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006f30:	2100      	movs	r1, #0
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f002 fc5e 	bl	80097f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	32b0      	adds	r2, #176	@ 0xb0
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	32b0      	adds	r2, #176	@ 0xb0
 8006f52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	7c1b      	ldrb	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d138      	bne.n	8006fd6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f64:	4b5e      	ldr	r3, [pc, #376]	@ (80070e0 <USBD_CDC_Init+0x1e4>)
 8006f66:	7819      	ldrb	r1, [r3, #0]
 8006f68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f002 fad9 	bl	8009526 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f74:	4b5a      	ldr	r3, [pc, #360]	@ (80070e0 <USBD_CDC_Init+0x1e4>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	3324      	adds	r3, #36	@ 0x24
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f8e:	4b55      	ldr	r3, [pc, #340]	@ (80070e4 <USBD_CDC_Init+0x1e8>)
 8006f90:	7819      	ldrb	r1, [r3, #0]
 8006f92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f96:	2202      	movs	r2, #2
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f002 fac4 	bl	8009526 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f9e:	4b51      	ldr	r3, [pc, #324]	@ (80070e4 <USBD_CDC_Init+0x1e8>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f003 020f 	and.w	r2, r3, #15
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006fba:	4b4b      	ldr	r3, [pc, #300]	@ (80070e8 <USBD_CDC_Init+0x1ec>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	f003 020f 	and.w	r2, r3, #15
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	3326      	adds	r3, #38	@ 0x26
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	e035      	b.n	8007042 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fd6:	4b42      	ldr	r3, [pc, #264]	@ (80070e0 <USBD_CDC_Init+0x1e4>)
 8006fd8:	7819      	ldrb	r1, [r3, #0]
 8006fda:	2340      	movs	r3, #64	@ 0x40
 8006fdc:	2202      	movs	r2, #2
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f002 faa1 	bl	8009526 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80070e0 <USBD_CDC_Init+0x1e4>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	f003 020f 	and.w	r2, r3, #15
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	3324      	adds	r3, #36	@ 0x24
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ffe:	4b39      	ldr	r3, [pc, #228]	@ (80070e4 <USBD_CDC_Init+0x1e8>)
 8007000:	7819      	ldrb	r1, [r3, #0]
 8007002:	2340      	movs	r3, #64	@ 0x40
 8007004:	2202      	movs	r2, #2
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f002 fa8d 	bl	8009526 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800700c:	4b35      	ldr	r3, [pc, #212]	@ (80070e4 <USBD_CDC_Init+0x1e8>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 020f 	and.w	r2, r3, #15
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007024:	2201      	movs	r2, #1
 8007026:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007028:	4b2f      	ldr	r3, [pc, #188]	@ (80070e8 <USBD_CDC_Init+0x1ec>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	f003 020f 	and.w	r2, r3, #15
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	3326      	adds	r3, #38	@ 0x26
 800703e:	2210      	movs	r2, #16
 8007040:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007042:	4b29      	ldr	r3, [pc, #164]	@ (80070e8 <USBD_CDC_Init+0x1ec>)
 8007044:	7819      	ldrb	r1, [r3, #0]
 8007046:	2308      	movs	r3, #8
 8007048:	2203      	movs	r2, #3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f002 fa6b 	bl	8009526 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007050:	4b25      	ldr	r3, [pc, #148]	@ (80070e8 <USBD_CDC_Init+0x1ec>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 020f 	and.w	r2, r3, #15
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	3324      	adds	r3, #36	@ 0x24
 8007066:	2201      	movs	r2, #1
 8007068:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	33b0      	adds	r3, #176	@ 0xb0
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80070a0:	2302      	movs	r3, #2
 80070a2:	e018      	b.n	80070d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7c1b      	ldrb	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070ac:	4b0d      	ldr	r3, [pc, #52]	@ (80070e4 <USBD_CDC_Init+0x1e8>)
 80070ae:	7819      	ldrb	r1, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f002 fb22 	bl	8009704 <USBD_LL_PrepareReceive>
 80070c0:	e008      	b.n	80070d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070c2:	4b08      	ldr	r3, [pc, #32]	@ (80070e4 <USBD_CDC_Init+0x1e8>)
 80070c4:	7819      	ldrb	r1, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070cc:	2340      	movs	r3, #64	@ 0x40
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f002 fb18 	bl	8009704 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000093 	.word	0x20000093
 80070e4:	20000094 	.word	0x20000094
 80070e8:	20000095 	.word	0x20000095

080070ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80070f8:	4b3a      	ldr	r3, [pc, #232]	@ (80071e4 <USBD_CDC_DeInit+0xf8>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f002 fa37 	bl	8009572 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007104:	4b37      	ldr	r3, [pc, #220]	@ (80071e4 <USBD_CDC_DeInit+0xf8>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	f003 020f 	and.w	r2, r3, #15
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	3324      	adds	r3, #36	@ 0x24
 800711a:	2200      	movs	r2, #0
 800711c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800711e:	4b32      	ldr	r3, [pc, #200]	@ (80071e8 <USBD_CDC_DeInit+0xfc>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f002 fa24 	bl	8009572 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800712a:	4b2f      	ldr	r3, [pc, #188]	@ (80071e8 <USBD_CDC_DeInit+0xfc>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	f003 020f 	and.w	r2, r3, #15
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	4613      	mov	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	440b      	add	r3, r1
 800713e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007142:	2200      	movs	r2, #0
 8007144:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007146:	4b29      	ldr	r3, [pc, #164]	@ (80071ec <USBD_CDC_DeInit+0x100>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f002 fa10 	bl	8009572 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007152:	4b26      	ldr	r3, [pc, #152]	@ (80071ec <USBD_CDC_DeInit+0x100>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f003 020f 	and.w	r2, r3, #15
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	3324      	adds	r3, #36	@ 0x24
 8007168:	2200      	movs	r2, #0
 800716a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800716c:	4b1f      	ldr	r3, [pc, #124]	@ (80071ec <USBD_CDC_DeInit+0x100>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	f003 020f 	and.w	r2, r3, #15
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	440b      	add	r3, r1
 8007180:	3326      	adds	r3, #38	@ 0x26
 8007182:	2200      	movs	r2, #0
 8007184:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	32b0      	adds	r2, #176	@ 0xb0
 8007190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01f      	beq.n	80071d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	33b0      	adds	r3, #176	@ 0xb0
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	32b0      	adds	r2, #176	@ 0xb0
 80071b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f002 fae4 	bl	8009788 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	32b0      	adds	r2, #176	@ 0xb0
 80071ca:	2100      	movs	r1, #0
 80071cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000093 	.word	0x20000093
 80071e8:	20000094 	.word	0x20000094
 80071ec:	20000095 	.word	0x20000095

080071f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	32b0      	adds	r2, #176	@ 0xb0
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e0bf      	b.n	80073a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007228:	2b00      	cmp	r3, #0
 800722a:	d050      	beq.n	80072ce <USBD_CDC_Setup+0xde>
 800722c:	2b20      	cmp	r3, #32
 800722e:	f040 80af 	bne.w	8007390 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d03a      	beq.n	80072b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	b25b      	sxtb	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	da1b      	bge.n	800727c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	33b0      	adds	r3, #176	@ 0xb0
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800725a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	88d2      	ldrh	r2, [r2, #6]
 8007260:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88db      	ldrh	r3, [r3, #6]
 8007266:	2b07      	cmp	r3, #7
 8007268:	bf28      	it	cs
 800726a:	2307      	movcs	r3, #7
 800726c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	89fa      	ldrh	r2, [r7, #14]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fd53 	bl	8008d20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800727a:	e090      	b.n	800739e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	785a      	ldrb	r2, [r3, #1]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	88db      	ldrh	r3, [r3, #6]
 800728a:	2b3f      	cmp	r3, #63	@ 0x3f
 800728c:	d803      	bhi.n	8007296 <USBD_CDC_Setup+0xa6>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	88db      	ldrh	r3, [r3, #6]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	e000      	b.n	8007298 <USBD_CDC_Setup+0xa8>
 8007296:	2240      	movs	r2, #64	@ 0x40
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800729e:	6939      	ldr	r1, [r7, #16]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80072a6:	461a      	mov	r2, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 fd65 	bl	8008d78 <USBD_CtlPrepareRx>
      break;
 80072ae:	e076      	b.n	800739e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	33b0      	adds	r3, #176	@ 0xb0
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	7850      	ldrb	r0, [r2, #1]
 80072c6:	2200      	movs	r2, #0
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	4798      	blx	r3
      break;
 80072cc:	e067      	b.n	800739e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b0b      	cmp	r3, #11
 80072d4:	d851      	bhi.n	800737a <USBD_CDC_Setup+0x18a>
 80072d6:	a201      	add	r2, pc, #4	@ (adr r2, 80072dc <USBD_CDC_Setup+0xec>)
 80072d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072dc:	0800730d 	.word	0x0800730d
 80072e0:	08007389 	.word	0x08007389
 80072e4:	0800737b 	.word	0x0800737b
 80072e8:	0800737b 	.word	0x0800737b
 80072ec:	0800737b 	.word	0x0800737b
 80072f0:	0800737b 	.word	0x0800737b
 80072f4:	0800737b 	.word	0x0800737b
 80072f8:	0800737b 	.word	0x0800737b
 80072fc:	0800737b 	.word	0x0800737b
 8007300:	0800737b 	.word	0x0800737b
 8007304:	08007337 	.word	0x08007337
 8007308:	08007361 	.word	0x08007361
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b03      	cmp	r3, #3
 8007316:	d107      	bne.n	8007328 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007318:	f107 030a 	add.w	r3, r7, #10
 800731c:	2202      	movs	r2, #2
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fcfd 	bl	8008d20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007326:	e032      	b.n	800738e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fc7b 	bl	8008c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	75fb      	strb	r3, [r7, #23]
          break;
 8007334:	e02b      	b.n	800738e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b03      	cmp	r3, #3
 8007340:	d107      	bne.n	8007352 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007342:	f107 030d 	add.w	r3, r7, #13
 8007346:	2201      	movs	r2, #1
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 fce8 	bl	8008d20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007350:	e01d      	b.n	800738e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 fc66 	bl	8008c26 <USBD_CtlError>
            ret = USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	75fb      	strb	r3, [r7, #23]
          break;
 800735e:	e016      	b.n	800738e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b03      	cmp	r3, #3
 800736a:	d00f      	beq.n	800738c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fc59 	bl	8008c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8007374:	2303      	movs	r3, #3
 8007376:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007378:	e008      	b.n	800738c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fc52 	bl	8008c26 <USBD_CtlError>
          ret = USBD_FAIL;
 8007382:	2303      	movs	r3, #3
 8007384:	75fb      	strb	r3, [r7, #23]
          break;
 8007386:	e002      	b.n	800738e <USBD_CDC_Setup+0x19e>
          break;
 8007388:	bf00      	nop
 800738a:	e008      	b.n	800739e <USBD_CDC_Setup+0x1ae>
          break;
 800738c:	bf00      	nop
      }
      break;
 800738e:	e006      	b.n	800739e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 fc47 	bl	8008c26 <USBD_CtlError>
      ret = USBD_FAIL;
 8007398:	2303      	movs	r3, #3
 800739a:	75fb      	strb	r3, [r7, #23]
      break;
 800739c:	bf00      	nop
  }

  return (uint8_t)ret;
 800739e:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	32b0      	adds	r2, #176	@ 0xb0
 80073c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e065      	b.n	800749e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	32b0      	adds	r2, #176	@ 0xb0
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	f003 020f 	and.w	r2, r3, #15
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	3318      	adds	r3, #24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d02f      	beq.n	800745c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	f003 020f 	and.w	r2, r3, #15
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	4613      	mov	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	440b      	add	r3, r1
 800740e:	3318      	adds	r3, #24
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	f003 010f 	and.w	r1, r3, #15
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	460b      	mov	r3, r1
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	440b      	add	r3, r1
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4403      	add	r3, r0
 8007424:	331c      	adds	r3, #28
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	fbb2 f1f3 	udiv	r1, r2, r3
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007432:	2b00      	cmp	r3, #0
 8007434:	d112      	bne.n	800745c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	f003 020f 	and.w	r2, r3, #15
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	3318      	adds	r3, #24
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800744e:	78f9      	ldrb	r1, [r7, #3]
 8007450:	2300      	movs	r3, #0
 8007452:	2200      	movs	r2, #0
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f002 f934 	bl	80096c2 <USBD_LL_Transmit>
 800745a:	e01f      	b.n	800749c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	33b0      	adds	r3, #176	@ 0xb0
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d010      	beq.n	800749c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	33b0      	adds	r3, #176	@ 0xb0
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007498:	78fa      	ldrb	r2, [r7, #3]
 800749a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	32b0      	adds	r2, #176	@ 0xb0
 80074bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	32b0      	adds	r2, #176	@ 0xb0
 80074cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e01a      	b.n	800750e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f002 f932 	bl	8009746 <USBD_LL_GetRxDataSize>
 80074e2:	4602      	mov	r2, r0
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	33b0      	adds	r3, #176	@ 0xb0
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007508:	4611      	mov	r1, r2
 800750a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	32b0      	adds	r2, #176	@ 0xb0
 8007528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007534:	2303      	movs	r3, #3
 8007536:	e024      	b.n	8007582 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	33b0      	adds	r3, #176	@ 0xb0
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d019      	beq.n	8007580 <USBD_CDC_EP0_RxReady+0x6a>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007552:	2bff      	cmp	r3, #255	@ 0xff
 8007554:	d014      	beq.n	8007580 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	33b0      	adds	r3, #176	@ 0xb0
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800756e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007576:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	22ff      	movs	r2, #255	@ 0xff
 800757c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007594:	2182      	movs	r1, #130	@ 0x82
 8007596:	4818      	ldr	r0, [pc, #96]	@ (80075f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007598:	f000 fd0f 	bl	8007fba <USBD_GetEpDesc>
 800759c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800759e:	2101      	movs	r1, #1
 80075a0:	4815      	ldr	r0, [pc, #84]	@ (80075f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075a2:	f000 fd0a 	bl	8007fba <USBD_GetEpDesc>
 80075a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075a8:	2181      	movs	r1, #129	@ 0x81
 80075aa:	4813      	ldr	r0, [pc, #76]	@ (80075f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075ac:	f000 fd05 	bl	8007fba <USBD_GetEpDesc>
 80075b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2210      	movs	r2, #16
 80075bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d006      	beq.n	80075d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075cc:	711a      	strb	r2, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d006      	beq.n	80075e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075e0:	711a      	strb	r2, [r3, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2243      	movs	r2, #67	@ 0x43
 80075ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075ec:	4b02      	ldr	r3, [pc, #8]	@ (80075f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000050 	.word	0x20000050

080075fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007604:	2182      	movs	r1, #130	@ 0x82
 8007606:	4818      	ldr	r0, [pc, #96]	@ (8007668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007608:	f000 fcd7 	bl	8007fba <USBD_GetEpDesc>
 800760c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800760e:	2101      	movs	r1, #1
 8007610:	4815      	ldr	r0, [pc, #84]	@ (8007668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007612:	f000 fcd2 	bl	8007fba <USBD_GetEpDesc>
 8007616:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007618:	2181      	movs	r1, #129	@ 0x81
 800761a:	4813      	ldr	r0, [pc, #76]	@ (8007668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800761c:	f000 fccd 	bl	8007fba <USBD_GetEpDesc>
 8007620:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2210      	movs	r2, #16
 800762c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d006      	beq.n	8007642 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2200      	movs	r2, #0
 8007638:	711a      	strb	r2, [r3, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f042 0202 	orr.w	r2, r2, #2
 8007640:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d006      	beq.n	8007656 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	711a      	strb	r2, [r3, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f042 0202 	orr.w	r2, r2, #2
 8007654:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2243      	movs	r2, #67	@ 0x43
 800765a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800765c:	4b02      	ldr	r3, [pc, #8]	@ (8007668 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000050 	.word	0x20000050

0800766c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007674:	2182      	movs	r1, #130	@ 0x82
 8007676:	4818      	ldr	r0, [pc, #96]	@ (80076d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007678:	f000 fc9f 	bl	8007fba <USBD_GetEpDesc>
 800767c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800767e:	2101      	movs	r1, #1
 8007680:	4815      	ldr	r0, [pc, #84]	@ (80076d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007682:	f000 fc9a 	bl	8007fba <USBD_GetEpDesc>
 8007686:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007688:	2181      	movs	r1, #129	@ 0x81
 800768a:	4813      	ldr	r0, [pc, #76]	@ (80076d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800768c:	f000 fc95 	bl	8007fba <USBD_GetEpDesc>
 8007690:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2210      	movs	r2, #16
 800769c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d006      	beq.n	80076b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ac:	711a      	strb	r2, [r3, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d006      	beq.n	80076c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c0:	711a      	strb	r2, [r3, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2243      	movs	r2, #67	@ 0x43
 80076ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076cc:	4b02      	ldr	r3, [pc, #8]	@ (80076d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000050 	.word	0x20000050

080076dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	220a      	movs	r2, #10
 80076e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076ea:	4b03      	ldr	r3, [pc, #12]	@ (80076f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	2000000c 	.word	0x2000000c

080076fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	e009      	b.n	8007724 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	33b0      	adds	r3, #176	@ 0xb0
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	32b0      	adds	r2, #176	@ 0xb0
 8007746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007752:	2303      	movs	r3, #3
 8007754:	e008      	b.n	8007768 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	32b0      	adds	r2, #176	@ 0xb0
 8007788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007794:	2303      	movs	r3, #3
 8007796:	e004      	b.n	80077a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	32b0      	adds	r2, #176	@ 0xb0
 80077c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32b0      	adds	r2, #176	@ 0xb0
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077da:	2303      	movs	r3, #3
 80077dc:	e018      	b.n	8007810 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7c1b      	ldrb	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10a      	bne.n	80077fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <USBD_CDC_ReceivePacket+0x68>)
 80077e8:	7819      	ldrb	r1, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 ff85 	bl	8009704 <USBD_LL_PrepareReceive>
 80077fa:	e008      	b.n	800780e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077fc:	4b06      	ldr	r3, [pc, #24]	@ (8007818 <USBD_CDC_ReceivePacket+0x68>)
 80077fe:	7819      	ldrb	r1, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007806:	2340      	movs	r3, #64	@ 0x40
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 ff7b 	bl	8009704 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000094 	.word	0x20000094

0800781c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007830:	2303      	movs	r3, #3
 8007832:	e01f      	b.n	8007874 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	79fa      	ldrb	r2, [r7, #7]
 8007866:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f001 fdf5 	bl	8009458 <USBD_LL_Init>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007890:	2303      	movs	r3, #3
 8007892:	e025      	b.n	80078e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	32ae      	adds	r2, #174	@ 0xae
 80078a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00f      	beq.n	80078d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	32ae      	adds	r2, #174	@ 0xae
 80078ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	f107 020e 	add.w	r2, r7, #14
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	4602      	mov	r2, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 fdfd 	bl	80094f0 <USBD_LL_Start>
 80078f6:	4603      	mov	r3, r0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007908:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	4611      	mov	r1, r2
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	4611      	mov	r1, r2
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f001 f90c 	bl	8008bb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80079a8:	461a      	mov	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d01a      	beq.n	80079f4 <USBD_LL_SetupStage+0x72>
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d822      	bhi.n	8007a08 <USBD_LL_SetupStage+0x86>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <USBD_LL_SetupStage+0x4a>
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d00a      	beq.n	80079e0 <USBD_LL_SetupStage+0x5e>
 80079ca:	e01d      	b.n	8007a08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fb63 	bl	80080a0 <USBD_StdDevReq>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
      break;
 80079de:	e020      	b.n	8007a22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fbcb 	bl	8008184 <USBD_StdItfReq>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
      break;
 80079f2:	e016      	b.n	8007a22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc2d 	bl	800825c <USBD_StdEPReq>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e00c      	b.n	8007a22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fdca 	bl	80095b0 <USBD_LL_StallEP>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a20:	bf00      	nop
  }

  return ret;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	460b      	mov	r3, r1
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d16e      	bne.n	8007b22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	f040 8098 	bne.w	8007b88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d913      	bls.n	8007a8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	1ad2      	subs	r2, r2, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	bf28      	it	cs
 8007a7e:	4613      	movcs	r3, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f001 f994 	bl	8008db2 <USBD_CtlContinueRx>
 8007a8a:	e07d      	b.n	8007b88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d014      	beq.n	8007ac4 <USBD_LL_DataOutStage+0x98>
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d81d      	bhi.n	8007ada <USBD_LL_DataOutStage+0xae>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <USBD_LL_DataOutStage+0x7c>
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d003      	beq.n	8007aae <USBD_LL_DataOutStage+0x82>
 8007aa6:	e018      	b.n	8007ada <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	75bb      	strb	r3, [r7, #22]
            break;
 8007aac:	e018      	b.n	8007ae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fa64 	bl	8007f86 <USBD_CoreFindIF>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75bb      	strb	r3, [r7, #22]
            break;
 8007ac2:	e00d      	b.n	8007ae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fa66 	bl	8007fa0 <USBD_CoreFindEP>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	75bb      	strb	r3, [r7, #22]
            break;
 8007ad8:	e002      	b.n	8007ae0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75bb      	strb	r3, [r7, #22]
            break;
 8007ade:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ae0:	7dbb      	ldrb	r3, [r7, #22]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d119      	bne.n	8007b1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d113      	bne.n	8007b1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007af2:	7dba      	ldrb	r2, [r7, #22]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	32ae      	adds	r2, #174	@ 0xae
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b02:	7dba      	ldrb	r2, [r7, #22]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b0a:	7dba      	ldrb	r2, [r7, #22]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	32ae      	adds	r2, #174	@ 0xae
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 f95a 	bl	8008dd4 <USBD_CtlSendStatus>
 8007b20:	e032      	b.n	8007b88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fa37 	bl	8007fa0 <USBD_CoreFindEP>
 8007b32:	4603      	mov	r3, r0
 8007b34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b36:	7dbb      	ldrb	r3, [r7, #22]
 8007b38:	2bff      	cmp	r3, #255	@ 0xff
 8007b3a:	d025      	beq.n	8007b88 <USBD_LL_DataOutStage+0x15c>
 8007b3c:	7dbb      	ldrb	r3, [r7, #22]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d122      	bne.n	8007b88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d117      	bne.n	8007b7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b4e:	7dba      	ldrb	r2, [r7, #22]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	32ae      	adds	r2, #174	@ 0xae
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00f      	beq.n	8007b7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b5e:	7dba      	ldrb	r2, [r7, #22]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b66:	7dba      	ldrb	r2, [r7, #22]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	32ae      	adds	r2, #174	@ 0xae
 8007b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	7afa      	ldrb	r2, [r7, #11]
 8007b74:	4611      	mov	r1, r2
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	e000      	b.n	8007b8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b086      	sub	sp, #24
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d16f      	bne.n	8007c86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d15a      	bne.n	8007c6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d914      	bls.n	8007bec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	1ad2      	subs	r2, r2, r3
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f001 f8bc 	bl	8008d56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bde:	2300      	movs	r3, #0
 8007be0:	2200      	movs	r2, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f001 fd8d 	bl	8009704 <USBD_LL_PrepareReceive>
 8007bea:	e03f      	b.n	8007c6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d11c      	bne.n	8007c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d316      	bcc.n	8007c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d20f      	bcs.n	8007c32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f001 f89d 	bl	8008d56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c24:	2300      	movs	r3, #0
 8007c26:	2200      	movs	r2, #0
 8007c28:	2100      	movs	r1, #0
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f001 fd6a 	bl	8009704 <USBD_LL_PrepareReceive>
 8007c30:	e01c      	b.n	8007c6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d10f      	bne.n	8007c5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c5e:	2180      	movs	r1, #128	@ 0x80
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f001 fca5 	bl	80095b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f001 f8c7 	bl	8008dfa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d03a      	beq.n	8007cec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fe42 	bl	8007900 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007c84:	e032      	b.n	8007cec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	4619      	mov	r1, r3
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f985 	bl	8007fa0 <USBD_CoreFindEP>
 8007c96:	4603      	mov	r3, r0
 8007c98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	2bff      	cmp	r3, #255	@ 0xff
 8007c9e:	d025      	beq.n	8007cec <USBD_LL_DataInStage+0x15a>
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d122      	bne.n	8007cec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d11c      	bne.n	8007cec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007cb2:	7dfa      	ldrb	r2, [r7, #23]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	32ae      	adds	r2, #174	@ 0xae
 8007cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d014      	beq.n	8007cec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007cc2:	7dfa      	ldrb	r2, [r7, #23]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007cca:	7dfa      	ldrb	r2, [r7, #23]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	32ae      	adds	r2, #174	@ 0xae
 8007cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	7afa      	ldrb	r2, [r7, #11]
 8007cd8:	4611      	mov	r1, r2
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ce2:	7dbb      	ldrb	r3, [r7, #22]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007ce8:	7dbb      	ldrb	r3, [r7, #22]
 8007cea:	e000      	b.n	8007cee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d014      	beq.n	8007d5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	6852      	ldr	r2, [r2, #4]
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d5c:	2340      	movs	r3, #64	@ 0x40
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2100      	movs	r1, #0
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 fbdf 	bl	8009526 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2240      	movs	r2, #64	@ 0x40
 8007d74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d78:	2340      	movs	r3, #64	@ 0x40
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2180      	movs	r1, #128	@ 0x80
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fbd1 	bl	8009526 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2240      	movs	r2, #64	@ 0x40
 8007d8e:	621a      	str	r2, [r3, #32]

  return ret;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d006      	beq.n	8007ddc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d106      	bne.n	8007e14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d110      	bne.n	8007e58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	32ae      	adds	r2, #174	@ 0xae
 8007e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e01c      	b.n	8007ebe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d115      	bne.n	8007ebc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	32ae      	adds	r2, #174	@ 0xae
 8007e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	32ae      	adds	r2, #174	@ 0xae
 8007eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	32ae      	adds	r2, #174	@ 0xae
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e01c      	b.n	8007f22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d115      	bne.n	8007f20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	32ae      	adds	r2, #174	@ 0xae
 8007efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	32ae      	adds	r2, #174	@ 0xae
 8007f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f18:	78fa      	ldrb	r2, [r7, #3]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6852      	ldr	r2, [r2, #4]
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	7812      	ldrb	r2, [r2, #0]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d91f      	bls.n	8008020 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fe6:	e013      	b.n	8008010 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fe8:	f107 030a 	add.w	r3, r7, #10
 8007fec:	4619      	mov	r1, r3
 8007fee:	6978      	ldr	r0, [r7, #20]
 8007ff0:	f000 f81b 	bl	800802a <USBD_GetNextDesc>
 8007ff4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	d108      	bne.n	8008010 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	789b      	ldrb	r3, [r3, #2]
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	429a      	cmp	r2, r3
 800800a:	d008      	beq.n	800801e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	885b      	ldrh	r3, [r3, #2]
 8008014:	b29a      	uxth	r2, r3
 8008016:	897b      	ldrh	r3, [r7, #10]
 8008018:	429a      	cmp	r2, r3
 800801a:	d8e5      	bhi.n	8007fe8 <USBD_GetEpDesc+0x2e>
 800801c:	e000      	b.n	8008020 <USBD_GetEpDesc+0x66>
          break;
 800801e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008020:	693b      	ldr	r3, [r7, #16]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	7812      	ldrb	r2, [r2, #0]
 8008040:	4413      	add	r3, r2
 8008042:	b29a      	uxth	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008054:	68fb      	ldr	r3, [r7, #12]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008062:	b480      	push	{r7}
 8008064:	b087      	sub	sp, #28
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	3301      	adds	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008080:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	b21a      	sxth	r2, r3
 8008088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800808c:	4313      	orrs	r3, r2
 800808e:	b21b      	sxth	r3, r3
 8008090:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008092:	89fb      	ldrh	r3, [r7, #14]
}
 8008094:	4618      	mov	r0, r3
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080b6:	2b40      	cmp	r3, #64	@ 0x40
 80080b8:	d005      	beq.n	80080c6 <USBD_StdDevReq+0x26>
 80080ba:	2b40      	cmp	r3, #64	@ 0x40
 80080bc:	d857      	bhi.n	800816e <USBD_StdDevReq+0xce>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00f      	beq.n	80080e2 <USBD_StdDevReq+0x42>
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d153      	bne.n	800816e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	32ae      	adds	r2, #174	@ 0xae
 80080d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
      break;
 80080e0:	e04a      	b.n	8008178 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	2b09      	cmp	r3, #9
 80080e8:	d83b      	bhi.n	8008162 <USBD_StdDevReq+0xc2>
 80080ea:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <USBD_StdDevReq+0x50>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008145 	.word	0x08008145
 80080f4:	08008159 	.word	0x08008159
 80080f8:	08008163 	.word	0x08008163
 80080fc:	0800814f 	.word	0x0800814f
 8008100:	08008163 	.word	0x08008163
 8008104:	08008123 	.word	0x08008123
 8008108:	08008119 	.word	0x08008119
 800810c:	08008163 	.word	0x08008163
 8008110:	0800813b 	.word	0x0800813b
 8008114:	0800812d 	.word	0x0800812d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fa3c 	bl	8008598 <USBD_GetDescriptor>
          break;
 8008120:	e024      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fba1 	bl	800886c <USBD_SetAddress>
          break;
 800812a:	e01f      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fbe0 	bl	80088f4 <USBD_SetConfig>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]
          break;
 8008138:	e018      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fc83 	bl	8008a48 <USBD_GetConfig>
          break;
 8008142:	e013      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fcb4 	bl	8008ab4 <USBD_GetStatus>
          break;
 800814c:	e00e      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fce3 	bl	8008b1c <USBD_SetFeature>
          break;
 8008156:	e009      	b.n	800816c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fd07 	bl	8008b6e <USBD_ClrFeature>
          break;
 8008160:	e004      	b.n	800816c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fd5e 	bl	8008c26 <USBD_CtlError>
          break;
 800816a:	bf00      	nop
      }
      break;
 800816c:	e004      	b.n	8008178 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fd58 	bl	8008c26 <USBD_CtlError>
      break;
 8008176:	bf00      	nop
  }

  return ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop

08008184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800819a:	2b40      	cmp	r3, #64	@ 0x40
 800819c:	d005      	beq.n	80081aa <USBD_StdItfReq+0x26>
 800819e:	2b40      	cmp	r3, #64	@ 0x40
 80081a0:	d852      	bhi.n	8008248 <USBD_StdItfReq+0xc4>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <USBD_StdItfReq+0x26>
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d14e      	bne.n	8008248 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d840      	bhi.n	800823a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	889b      	ldrh	r3, [r3, #4]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d836      	bhi.n	8008230 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	889b      	ldrh	r3, [r3, #4]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff fedb 	bl	8007f86 <USBD_CoreFindIF>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	2bff      	cmp	r3, #255	@ 0xff
 80081d8:	d01d      	beq.n	8008216 <USBD_StdItfReq+0x92>
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d11a      	bne.n	8008216 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081e0:	7bba      	ldrb	r2, [r7, #14]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	@ 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00f      	beq.n	8008210 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081f0:	7bba      	ldrb	r2, [r7, #14]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081f8:	7bba      	ldrb	r2, [r7, #14]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	32ae      	adds	r2, #174	@ 0xae
 80081fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800820e:	e004      	b.n	800821a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008214:	e001      	b.n	800821a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008216:	2303      	movs	r3, #3
 8008218:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	88db      	ldrh	r3, [r3, #6]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d110      	bne.n	8008244 <USBD_StdItfReq+0xc0>
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10d      	bne.n	8008244 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fdd3 	bl	8008dd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800822e:	e009      	b.n	8008244 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fcf7 	bl	8008c26 <USBD_CtlError>
          break;
 8008238:	e004      	b.n	8008244 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fcf2 	bl	8008c26 <USBD_CtlError>
          break;
 8008242:	e000      	b.n	8008246 <USBD_StdItfReq+0xc2>
          break;
 8008244:	bf00      	nop
      }
      break;
 8008246:	e004      	b.n	8008252 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fceb 	bl	8008c26 <USBD_CtlError>
      break;
 8008250:	bf00      	nop
  }

  return ret;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	889b      	ldrh	r3, [r3, #4]
 800826e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008278:	2b40      	cmp	r3, #64	@ 0x40
 800827a:	d007      	beq.n	800828c <USBD_StdEPReq+0x30>
 800827c:	2b40      	cmp	r3, #64	@ 0x40
 800827e:	f200 817f 	bhi.w	8008580 <USBD_StdEPReq+0x324>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d02a      	beq.n	80082dc <USBD_StdEPReq+0x80>
 8008286:	2b20      	cmp	r3, #32
 8008288:	f040 817a 	bne.w	8008580 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff fe85 	bl	8007fa0 <USBD_CoreFindEP>
 8008296:	4603      	mov	r3, r0
 8008298:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800829a:	7b7b      	ldrb	r3, [r7, #13]
 800829c:	2bff      	cmp	r3, #255	@ 0xff
 800829e:	f000 8174 	beq.w	800858a <USBD_StdEPReq+0x32e>
 80082a2:	7b7b      	ldrb	r3, [r7, #13]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 8170 	bne.w	800858a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80082aa:	7b7a      	ldrb	r2, [r7, #13]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80082b2:	7b7a      	ldrb	r2, [r7, #13]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	32ae      	adds	r2, #174	@ 0xae
 80082b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 8163 	beq.w	800858a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80082c4:	7b7a      	ldrb	r2, [r7, #13]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32ae      	adds	r2, #174	@ 0xae
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082da:	e156      	b.n	800858a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	785b      	ldrb	r3, [r3, #1]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d008      	beq.n	80082f6 <USBD_StdEPReq+0x9a>
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	f300 8145 	bgt.w	8008574 <USBD_StdEPReq+0x318>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 809b 	beq.w	8008426 <USBD_StdEPReq+0x1ca>
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d03c      	beq.n	800836e <USBD_StdEPReq+0x112>
 80082f4:	e13e      	b.n	8008574 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d002      	beq.n	8008308 <USBD_StdEPReq+0xac>
 8008302:	2b03      	cmp	r3, #3
 8008304:	d016      	beq.n	8008334 <USBD_StdEPReq+0xd8>
 8008306:	e02c      	b.n	8008362 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00d      	beq.n	800832a <USBD_StdEPReq+0xce>
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b80      	cmp	r3, #128	@ 0x80
 8008312:	d00a      	beq.n	800832a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 f949 	bl	80095b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800831e:	2180      	movs	r1, #128	@ 0x80
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 f945 	bl	80095b0 <USBD_LL_StallEP>
 8008326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008328:	e020      	b.n	800836c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fc7a 	bl	8008c26 <USBD_CtlError>
              break;
 8008332:	e01b      	b.n	800836c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	885b      	ldrh	r3, [r3, #2]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10e      	bne.n	800835a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <USBD_StdEPReq+0xfe>
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b80      	cmp	r3, #128	@ 0x80
 8008346:	d008      	beq.n	800835a <USBD_StdEPReq+0xfe>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	88db      	ldrh	r3, [r3, #6]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 f92b 	bl	80095b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fd3a 	bl	8008dd4 <USBD_CtlSendStatus>

              break;
 8008360:	e004      	b.n	800836c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc5e 	bl	8008c26 <USBD_CtlError>
              break;
 800836a:	bf00      	nop
          }
          break;
 800836c:	e107      	b.n	800857e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d002      	beq.n	8008380 <USBD_StdEPReq+0x124>
 800837a:	2b03      	cmp	r3, #3
 800837c:	d016      	beq.n	80083ac <USBD_StdEPReq+0x150>
 800837e:	e04b      	b.n	8008418 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <USBD_StdEPReq+0x146>
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b80      	cmp	r3, #128	@ 0x80
 800838a:	d00a      	beq.n	80083a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f90d 	bl	80095b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008396:	2180      	movs	r1, #128	@ 0x80
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f909 	bl	80095b0 <USBD_LL_StallEP>
 800839e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083a0:	e040      	b.n	8008424 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fc3e 	bl	8008c26 <USBD_CtlError>
              break;
 80083aa:	e03b      	b.n	8008424 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	885b      	ldrh	r3, [r3, #2]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d136      	bne.n	8008422 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 f913 	bl	80095ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fd03 	bl	8008dd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff fde4 	bl	8007fa0 <USBD_CoreFindEP>
 80083d8:	4603      	mov	r3, r0
 80083da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083dc:	7b7b      	ldrb	r3, [r7, #13]
 80083de:	2bff      	cmp	r3, #255	@ 0xff
 80083e0:	d01f      	beq.n	8008422 <USBD_StdEPReq+0x1c6>
 80083e2:	7b7b      	ldrb	r3, [r7, #13]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11c      	bne.n	8008422 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083e8:	7b7a      	ldrb	r2, [r7, #13]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083f0:	7b7a      	ldrb	r2, [r7, #13]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	32ae      	adds	r2, #174	@ 0xae
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d010      	beq.n	8008422 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008400:	7b7a      	ldrb	r2, [r7, #13]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	32ae      	adds	r2, #174	@ 0xae
 8008406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008416:	e004      	b.n	8008422 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fc03 	bl	8008c26 <USBD_CtlError>
              break;
 8008420:	e000      	b.n	8008424 <USBD_StdEPReq+0x1c8>
              break;
 8008422:	bf00      	nop
          }
          break;
 8008424:	e0ab      	b.n	800857e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d002      	beq.n	8008438 <USBD_StdEPReq+0x1dc>
 8008432:	2b03      	cmp	r3, #3
 8008434:	d032      	beq.n	800849c <USBD_StdEPReq+0x240>
 8008436:	e097      	b.n	8008568 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d007      	beq.n	800844e <USBD_StdEPReq+0x1f2>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	@ 0x80
 8008442:	d004      	beq.n	800844e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fbed 	bl	8008c26 <USBD_CtlError>
                break;
 800844c:	e091      	b.n	8008572 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008452:	2b00      	cmp	r3, #0
 8008454:	da0b      	bge.n	800846e <USBD_StdEPReq+0x212>
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	3310      	adds	r3, #16
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	3304      	adds	r3, #4
 800846c:	e00b      	b.n	8008486 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	4413      	add	r3, r2
 8008484:	3304      	adds	r3, #4
 8008486:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2202      	movs	r2, #2
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fc43 	bl	8008d20 <USBD_CtlSendData>
              break;
 800849a:	e06a      	b.n	8008572 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800849c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da11      	bge.n	80084c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	f003 020f 	and.w	r2, r3, #15
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	3324      	adds	r3, #36	@ 0x24
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d117      	bne.n	80084ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fbb0 	bl	8008c26 <USBD_CtlError>
                  break;
 80084c6:	e054      	b.n	8008572 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	f003 020f 	and.w	r2, r3, #15
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	440b      	add	r3, r1
 80084da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fb9d 	bl	8008c26 <USBD_CtlError>
                  break;
 80084ec:	e041      	b.n	8008572 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da0b      	bge.n	800850e <USBD_StdEPReq+0x2b2>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	3310      	adds	r3, #16
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	4413      	add	r3, r2
 800850a:	3304      	adds	r3, #4
 800850c:	e00b      	b.n	8008526 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	3304      	adds	r3, #4
 8008526:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <USBD_StdEPReq+0x2d8>
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b80      	cmp	r3, #128	@ 0x80
 8008532:	d103      	bne.n	800853c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	e00e      	b.n	800855a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 f873 	bl	800962c <USBD_LL_IsStallEP>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	e002      	b.n	800855a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2202      	movs	r2, #2
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fbdd 	bl	8008d20 <USBD_CtlSendData>
              break;
 8008566:	e004      	b.n	8008572 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fb5b 	bl	8008c26 <USBD_CtlError>
              break;
 8008570:	bf00      	nop
          }
          break;
 8008572:	e004      	b.n	800857e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fb55 	bl	8008c26 <USBD_CtlError>
          break;
 800857c:	bf00      	nop
      }
      break;
 800857e:	e005      	b.n	800858c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fb4f 	bl	8008c26 <USBD_CtlError>
      break;
 8008588:	e000      	b.n	800858c <USBD_StdEPReq+0x330>
      break;
 800858a:	bf00      	nop
  }

  return ret;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	885b      	ldrh	r3, [r3, #2]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	2b06      	cmp	r3, #6
 80085ba:	f200 8128 	bhi.w	800880e <USBD_GetDescriptor+0x276>
 80085be:	a201      	add	r2, pc, #4	@ (adr r2, 80085c4 <USBD_GetDescriptor+0x2c>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085f9 	.word	0x080085f9
 80085cc:	08008639 	.word	0x08008639
 80085d0:	0800880f 	.word	0x0800880f
 80085d4:	0800880f 	.word	0x0800880f
 80085d8:	080087af 	.word	0x080087af
 80085dc:	080087db 	.word	0x080087db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	7c12      	ldrb	r2, [r2, #16]
 80085ec:	f107 0108 	add.w	r1, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
      break;
 80085f6:	e112      	b.n	800881e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	7c1b      	ldrb	r3, [r3, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10d      	bne.n	800861c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008608:	f107 0208 	add.w	r2, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	2202      	movs	r2, #2
 8008618:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800861a:	e100      	b.n	800881e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	f107 0208 	add.w	r2, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	2202      	movs	r2, #2
 8008634:	701a      	strb	r2, [r3, #0]
      break;
 8008636:	e0f2      	b.n	800881e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	885b      	ldrh	r3, [r3, #2]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b05      	cmp	r3, #5
 8008640:	f200 80ac 	bhi.w	800879c <USBD_GetDescriptor+0x204>
 8008644:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <USBD_GetDescriptor+0xb4>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	08008665 	.word	0x08008665
 8008650:	08008699 	.word	0x08008699
 8008654:	080086cd 	.word	0x080086cd
 8008658:	08008701 	.word	0x08008701
 800865c:	08008735 	.word	0x08008735
 8008660:	08008769 	.word	0x08008769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	7c12      	ldrb	r2, [r2, #16]
 800867c:	f107 0108 	add.w	r1, r7, #8
 8008680:	4610      	mov	r0, r2
 8008682:	4798      	blx	r3
 8008684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008686:	e091      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 facb 	bl	8008c26 <USBD_CtlError>
            err++;
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	3301      	adds	r3, #1
 8008694:	72fb      	strb	r3, [r7, #11]
          break;
 8008696:	e089      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	7c12      	ldrb	r2, [r2, #16]
 80086b0:	f107 0108 	add.w	r1, r7, #8
 80086b4:	4610      	mov	r0, r2
 80086b6:	4798      	blx	r3
 80086b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ba:	e077      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fab1 	bl	8008c26 <USBD_CtlError>
            err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ca:	e06f      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	7c12      	ldrb	r2, [r2, #16]
 80086e4:	f107 0108 	add.w	r1, r7, #8
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
 80086ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ee:	e05d      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa97 	bl	8008c26 <USBD_CtlError>
            err++;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	3301      	adds	r3, #1
 80086fc:	72fb      	strb	r3, [r7, #11]
          break;
 80086fe:	e055      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00b      	beq.n	8008724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7c12      	ldrb	r2, [r2, #16]
 8008718:	f107 0108 	add.w	r1, r7, #8
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
 8008720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008722:	e043      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa7d 	bl	8008c26 <USBD_CtlError>
            err++;
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	3301      	adds	r3, #1
 8008730:	72fb      	strb	r3, [r7, #11]
          break;
 8008732:	e03b      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00b      	beq.n	8008758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	7c12      	ldrb	r2, [r2, #16]
 800874c:	f107 0108 	add.w	r1, r7, #8
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
 8008754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008756:	e029      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa63 	bl	8008c26 <USBD_CtlError>
            err++;
 8008760:	7afb      	ldrb	r3, [r7, #11]
 8008762:	3301      	adds	r3, #1
 8008764:	72fb      	strb	r3, [r7, #11]
          break;
 8008766:	e021      	b.n	80087ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	7c12      	ldrb	r2, [r2, #16]
 8008780:	f107 0108 	add.w	r1, r7, #8
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
 8008788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800878a:	e00f      	b.n	80087ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fa49 	bl	8008c26 <USBD_CtlError>
            err++;
 8008794:	7afb      	ldrb	r3, [r7, #11]
 8008796:	3301      	adds	r3, #1
 8008798:	72fb      	strb	r3, [r7, #11]
          break;
 800879a:	e007      	b.n	80087ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa41 	bl	8008c26 <USBD_CtlError>
          err++;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	3301      	adds	r3, #1
 80087a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087aa:	bf00      	nop
      }
      break;
 80087ac:	e037      	b.n	800881e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7c1b      	ldrb	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087be:	f107 0208 	add.w	r2, r7, #8
 80087c2:	4610      	mov	r0, r2
 80087c4:	4798      	blx	r3
 80087c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087c8:	e029      	b.n	800881e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fa2a 	bl	8008c26 <USBD_CtlError>
        err++;
 80087d2:	7afb      	ldrb	r3, [r7, #11]
 80087d4:	3301      	adds	r3, #1
 80087d6:	72fb      	strb	r3, [r7, #11]
      break;
 80087d8:	e021      	b.n	800881e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	7c1b      	ldrb	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10d      	bne.n	80087fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ea:	f107 0208 	add.w	r2, r7, #8
 80087ee:	4610      	mov	r0, r2
 80087f0:	4798      	blx	r3
 80087f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3301      	adds	r3, #1
 80087f8:	2207      	movs	r2, #7
 80087fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087fc:	e00f      	b.n	800881e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fa10 	bl	8008c26 <USBD_CtlError>
        err++;
 8008806:	7afb      	ldrb	r3, [r7, #11]
 8008808:	3301      	adds	r3, #1
 800880a:	72fb      	strb	r3, [r7, #11]
      break;
 800880c:	e007      	b.n	800881e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fa08 	bl	8008c26 <USBD_CtlError>
      err++;
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	3301      	adds	r3, #1
 800881a:	72fb      	strb	r3, [r7, #11]
      break;
 800881c:	bf00      	nop
  }

  if (err != 0U)
 800881e:	7afb      	ldrb	r3, [r7, #11]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d11e      	bne.n	8008862 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	88db      	ldrh	r3, [r3, #6]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d016      	beq.n	800885a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800882c:	893b      	ldrh	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00e      	beq.n	8008850 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	88da      	ldrh	r2, [r3, #6]
 8008836:	893b      	ldrh	r3, [r7, #8]
 8008838:	4293      	cmp	r3, r2
 800883a:	bf28      	it	cs
 800883c:	4613      	movcs	r3, r2
 800883e:	b29b      	uxth	r3, r3
 8008840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008842:	893b      	ldrh	r3, [r7, #8]
 8008844:	461a      	mov	r2, r3
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa69 	bl	8008d20 <USBD_CtlSendData>
 800884e:	e009      	b.n	8008864 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9e7 	bl	8008c26 <USBD_CtlError>
 8008858:	e004      	b.n	8008864 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 faba 	bl	8008dd4 <USBD_CtlSendStatus>
 8008860:	e000      	b.n	8008864 <USBD_GetDescriptor+0x2cc>
    return;
 8008862:	bf00      	nop
  }
}
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop

0800886c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	889b      	ldrh	r3, [r3, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d131      	bne.n	80088e2 <USBD_SetAddress+0x76>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	88db      	ldrh	r3, [r3, #6]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d12d      	bne.n	80088e2 <USBD_SetAddress+0x76>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	2b7f      	cmp	r3, #127	@ 0x7f
 800888c:	d829      	bhi.n	80088e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	885b      	ldrh	r3, [r3, #2]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d104      	bne.n	80088b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f9bc 	bl	8008c26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ae:	e01d      	b.n	80088ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7bfa      	ldrb	r2, [r7, #15]
 80088b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fee1 	bl	8009684 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa86 	bl	8008dd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2202      	movs	r2, #2
 80088d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d6:	e009      	b.n	80088ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e0:	e004      	b.n	80088ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f99e 	bl	8008c26 <USBD_CtlError>
  }
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	885b      	ldrh	r3, [r3, #2]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	4b4e      	ldr	r3, [pc, #312]	@ (8008a44 <USBD_SetConfig+0x150>)
 800890a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800890c:	4b4d      	ldr	r3, [pc, #308]	@ (8008a44 <USBD_SetConfig+0x150>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d905      	bls.n	8008920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f985 	bl	8008c26 <USBD_CtlError>
    return USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	e08c      	b.n	8008a3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d002      	beq.n	8008932 <USBD_SetConfig+0x3e>
 800892c:	2b03      	cmp	r3, #3
 800892e:	d029      	beq.n	8008984 <USBD_SetConfig+0x90>
 8008930:	e075      	b.n	8008a1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008932:	4b44      	ldr	r3, [pc, #272]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d020      	beq.n	800897c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800893a:	4b42      	ldr	r3, [pc, #264]	@ (8008a44 <USBD_SetConfig+0x150>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008944:	4b3f      	ldr	r3, [pc, #252]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fe ffe3 	bl	8007916 <USBD_SetClassConfig>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d008      	beq.n	800896c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f962 	bl	8008c26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800896a:	e065      	b.n	8008a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fa31 	bl	8008dd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2203      	movs	r2, #3
 8008976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800897a:	e05d      	b.n	8008a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fa29 	bl	8008dd4 <USBD_CtlSendStatus>
      break;
 8008982:	e059      	b.n	8008a38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008984:	4b2f      	ldr	r3, [pc, #188]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d112      	bne.n	80089b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008994:	4b2b      	ldr	r3, [pc, #172]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800899e:	4b29      	ldr	r3, [pc, #164]	@ (8008a44 <USBD_SetConfig+0x150>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7fe ffd2 	bl	800794e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa12 	bl	8008dd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089b0:	e042      	b.n	8008a38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80089b2:	4b24      	ldr	r3, [pc, #144]	@ (8008a44 <USBD_SetConfig+0x150>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d02a      	beq.n	8008a16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7fe ffc0 	bl	800794e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008a44 <USBD_SetConfig+0x150>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a44 <USBD_SetConfig+0x150>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7fe ff99 	bl	8007916 <USBD_SetClassConfig>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00f      	beq.n	8008a0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f918 	bl	8008c26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fe ffa5 	bl	800794e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a0c:	e014      	b.n	8008a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9e0 	bl	8008dd4 <USBD_CtlSendStatus>
      break;
 8008a14:	e010      	b.n	8008a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9dc 	bl	8008dd4 <USBD_CtlSendStatus>
      break;
 8008a1c:	e00c      	b.n	8008a38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f900 	bl	8008c26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a26:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <USBD_SetConfig+0x150>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fe ff8e 	bl	800794e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a32:	2303      	movs	r3, #3
 8008a34:	73fb      	strb	r3, [r7, #15]
      break;
 8008a36:	bf00      	nop
  }

  return ret;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000350 	.word	0x20000350

08008a48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d004      	beq.n	8008a64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8e2 	bl	8008c26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a62:	e023      	b.n	8008aac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	dc02      	bgt.n	8008a76 <USBD_GetConfig+0x2e>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dc03      	bgt.n	8008a7c <USBD_GetConfig+0x34>
 8008a74:	e015      	b.n	8008aa2 <USBD_GetConfig+0x5a>
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d00b      	beq.n	8008a92 <USBD_GetConfig+0x4a>
 8008a7a:	e012      	b.n	8008aa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3308      	adds	r3, #8
 8008a86:	2201      	movs	r2, #1
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f948 	bl	8008d20 <USBD_CtlSendData>
        break;
 8008a90:	e00c      	b.n	8008aac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3304      	adds	r3, #4
 8008a96:	2201      	movs	r2, #1
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f940 	bl	8008d20 <USBD_CtlSendData>
        break;
 8008aa0:	e004      	b.n	8008aac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f8be 	bl	8008c26 <USBD_CtlError>
        break;
 8008aaa:	bf00      	nop
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d81e      	bhi.n	8008b0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	88db      	ldrh	r3, [r3, #6]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d004      	beq.n	8008ade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f8a5 	bl	8008c26 <USBD_CtlError>
        break;
 8008adc:	e01a      	b.n	8008b14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d005      	beq.n	8008afa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f043 0202 	orr.w	r2, r3, #2
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	330c      	adds	r3, #12
 8008afe:	2202      	movs	r2, #2
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f90c 	bl	8008d20 <USBD_CtlSendData>
      break;
 8008b08:	e004      	b.n	8008b14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f88a 	bl	8008c26 <USBD_CtlError>
      break;
 8008b12:	bf00      	nop
  }
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d107      	bne.n	8008b3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f94c 	bl	8008dd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b3c:	e013      	b.n	8008b66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	885b      	ldrh	r3, [r3, #2]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d10b      	bne.n	8008b5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	889b      	ldrh	r3, [r3, #4]
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f93c 	bl	8008dd4 <USBD_CtlSendStatus>
}
 8008b5c:	e003      	b.n	8008b66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f860 	bl	8008c26 <USBD_CtlError>
}
 8008b66:	bf00      	nop
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d80b      	bhi.n	8008b9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d10c      	bne.n	8008ba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f91c 	bl	8008dd4 <USBD_CtlSendStatus>
      }
      break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f840 	bl	8008c26 <USBD_CtlError>
      break;
 8008ba6:	e000      	b.n	8008baa <USBD_ClrFeature+0x3c>
      break;
 8008ba8:	bf00      	nop
  }
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	781a      	ldrb	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7ff fa40 	bl	8008062 <SWAPBYTE>
 8008be2:	4603      	mov	r3, r0
 8008be4:	461a      	mov	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3301      	adds	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff fa33 	bl	8008062 <SWAPBYTE>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3301      	adds	r3, #1
 8008c08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7ff fa26 	bl	8008062 <SWAPBYTE>
 8008c16:	4603      	mov	r3, r0
 8008c18:	461a      	mov	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	80da      	strh	r2, [r3, #6]
}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c30:	2180      	movs	r1, #128	@ 0x80
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fcbc 	bl	80095b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c38:	2100      	movs	r1, #0
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fcb8 	bl	80095b0 <USBD_LL_StallEP>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d042      	beq.n	8008ce4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c62:	6938      	ldr	r0, [r7, #16]
 8008c64:	f000 f842 	bl	8008cec <USBD_GetLen>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c72:	d808      	bhi.n	8008c86 <USBD_GetString+0x3e>
 8008c74:	6938      	ldr	r0, [r7, #16]
 8008c76:	f000 f839 	bl	8008cec <USBD_GetLen>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	e001      	b.n	8008c8a <USBD_GetString+0x42>
 8008c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	4413      	add	r3, r2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	3301      	adds	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cb0:	e013      	b.n	8008cda <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	613b      	str	r3, [r7, #16]
    idx++;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	4413      	add	r3, r2
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e7      	bne.n	8008cb2 <USBD_GetString+0x6a>
 8008ce2:	e000      	b.n	8008ce6 <USBD_GetString+0x9e>
    return;
 8008ce4:	bf00      	nop
  }
}
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008cfc:	e005      	b.n	8008d0a <USBD_GetLen+0x1e>
  {
    len++;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	3301      	adds	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1f5      	bne.n	8008cfe <USBD_GetLen+0x12>
  }

  return len;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	2100      	movs	r1, #0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fcbb 	bl	80096c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	2100      	movs	r1, #0
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 fcaa 	bl	80096c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2203      	movs	r2, #3
 8008d88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	2100      	movs	r1, #0
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 fcae 	bl	8009704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 fc9d 	bl	8009704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2204      	movs	r2, #4
 8008de0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008de4:	2300      	movs	r3, #0
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fc69 	bl	80096c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2205      	movs	r2, #5
 8008e06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2100      	movs	r1, #0
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fc77 	bl	8009704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e24:	2200      	movs	r2, #0
 8008e26:	4912      	ldr	r1, [pc, #72]	@ (8008e70 <MX_USB_DEVICE_Init+0x50>)
 8008e28:	4812      	ldr	r0, [pc, #72]	@ (8008e74 <MX_USB_DEVICE_Init+0x54>)
 8008e2a:	f7fe fcf7 	bl	800781c <USBD_Init>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e34:	f7f7 fd76 	bl	8000924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e38:	490f      	ldr	r1, [pc, #60]	@ (8008e78 <MX_USB_DEVICE_Init+0x58>)
 8008e3a:	480e      	ldr	r0, [pc, #56]	@ (8008e74 <MX_USB_DEVICE_Init+0x54>)
 8008e3c:	f7fe fd1e 	bl	800787c <USBD_RegisterClass>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e46:	f7f7 fd6d 	bl	8000924 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e4a:	490c      	ldr	r1, [pc, #48]	@ (8008e7c <MX_USB_DEVICE_Init+0x5c>)
 8008e4c:	4809      	ldr	r0, [pc, #36]	@ (8008e74 <MX_USB_DEVICE_Init+0x54>)
 8008e4e:	f7fe fc55 	bl	80076fc <USBD_CDC_RegisterInterface>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e58:	f7f7 fd64 	bl	8000924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e5c:	4805      	ldr	r0, [pc, #20]	@ (8008e74 <MX_USB_DEVICE_Init+0x54>)
 8008e5e:	f7fe fd43 	bl	80078e8 <USBD_Start>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e68:	f7f7 fd5c 	bl	8000924 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200000ac 	.word	0x200000ac
 8008e74:	20000354 	.word	0x20000354
 8008e78:	20000018 	.word	0x20000018
 8008e7c:	20000098 	.word	0x20000098

08008e80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e84:	2200      	movs	r2, #0
 8008e86:	4905      	ldr	r1, [pc, #20]	@ (8008e9c <CDC_Init_FS+0x1c>)
 8008e88:	4805      	ldr	r0, [pc, #20]	@ (8008ea0 <CDC_Init_FS+0x20>)
 8008e8a:	f7fe fc51 	bl	8007730 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e8e:	4905      	ldr	r1, [pc, #20]	@ (8008ea4 <CDC_Init_FS+0x24>)
 8008e90:	4803      	ldr	r0, [pc, #12]	@ (8008ea0 <CDC_Init_FS+0x20>)
 8008e92:	f7fe fc6f 	bl	8007774 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20000a30 	.word	0x20000a30
 8008ea0:	20000354 	.word	0x20000354
 8008ea4:	20000630 	.word	0x20000630

08008ea8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008eac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	2b23      	cmp	r3, #35	@ 0x23
 8008ecc:	d84a      	bhi.n	8008f64 <CDC_Control_FS+0xac>
 8008ece:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <CDC_Control_FS+0x1c>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008f65 	.word	0x08008f65
 8008ed8:	08008f65 	.word	0x08008f65
 8008edc:	08008f65 	.word	0x08008f65
 8008ee0:	08008f65 	.word	0x08008f65
 8008ee4:	08008f65 	.word	0x08008f65
 8008ee8:	08008f65 	.word	0x08008f65
 8008eec:	08008f65 	.word	0x08008f65
 8008ef0:	08008f65 	.word	0x08008f65
 8008ef4:	08008f65 	.word	0x08008f65
 8008ef8:	08008f65 	.word	0x08008f65
 8008efc:	08008f65 	.word	0x08008f65
 8008f00:	08008f65 	.word	0x08008f65
 8008f04:	08008f65 	.word	0x08008f65
 8008f08:	08008f65 	.word	0x08008f65
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f65 	.word	0x08008f65
 8008f14:	08008f65 	.word	0x08008f65
 8008f18:	08008f65 	.word	0x08008f65
 8008f1c:	08008f65 	.word	0x08008f65
 8008f20:	08008f65 	.word	0x08008f65
 8008f24:	08008f65 	.word	0x08008f65
 8008f28:	08008f65 	.word	0x08008f65
 8008f2c:	08008f65 	.word	0x08008f65
 8008f30:	08008f65 	.word	0x08008f65
 8008f34:	08008f65 	.word	0x08008f65
 8008f38:	08008f65 	.word	0x08008f65
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f65 	.word	0x08008f65
 8008f48:	08008f65 	.word	0x08008f65
 8008f4c:	08008f65 	.word	0x08008f65
 8008f50:	08008f65 	.word	0x08008f65
 8008f54:	08008f65 	.word	0x08008f65
 8008f58:	08008f65 	.word	0x08008f65
 8008f5c:	08008f65 	.word	0x08008f65
 8008f60:	08008f65 	.word	0x08008f65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f64:	bf00      	nop
  }

  return (USBD_OK);
 8008f66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	4805      	ldr	r0, [pc, #20]	@ (8008f98 <CDC_Receive_FS+0x24>)
 8008f82:	f7fe fbf7 	bl	8007774 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f86:	4804      	ldr	r0, [pc, #16]	@ (8008f98 <CDC_Receive_FS+0x24>)
 8008f88:	f7fe fc12 	bl	80077b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20000354 	.word	0x20000354

08008f9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2212      	movs	r2, #18
 8008fd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fd2:	4b03      	ldr	r3, [pc, #12]	@ (8008fe0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	200000c8 	.word	0x200000c8

08008fe4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	6039      	str	r1, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2204      	movs	r2, #4
 8008ff4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	@ (8009004 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	200000dc 	.word	0x200000dc

08009008 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d105      	bne.n	8009026 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	4907      	ldr	r1, [pc, #28]	@ (800903c <USBD_FS_ProductStrDescriptor+0x34>)
 800901e:	4808      	ldr	r0, [pc, #32]	@ (8009040 <USBD_FS_ProductStrDescriptor+0x38>)
 8009020:	f7ff fe12 	bl	8008c48 <USBD_GetString>
 8009024:	e004      	b.n	8009030 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4904      	ldr	r1, [pc, #16]	@ (800903c <USBD_FS_ProductStrDescriptor+0x34>)
 800902a:	4805      	ldr	r0, [pc, #20]	@ (8009040 <USBD_FS_ProductStrDescriptor+0x38>)
 800902c:	f7ff fe0c 	bl	8008c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009030:	4b02      	ldr	r3, [pc, #8]	@ (800903c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000e30 	.word	0x20000e30
 8009040:	08009864 	.word	0x08009864

08009044 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	4904      	ldr	r1, [pc, #16]	@ (8009064 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009054:	4804      	ldr	r0, [pc, #16]	@ (8009068 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009056:	f7ff fdf7 	bl	8008c48 <USBD_GetString>
  return USBD_StrDesc;
 800905a:	4b02      	ldr	r3, [pc, #8]	@ (8009064 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000e30 	.word	0x20000e30
 8009068:	0800987c 	.word	0x0800987c

0800906c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	221a      	movs	r2, #26
 800907c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800907e:	f000 f843 	bl	8009108 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009082:	4b02      	ldr	r3, [pc, #8]	@ (800908c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	200000e0 	.word	0x200000e0

08009090 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4907      	ldr	r1, [pc, #28]	@ (80090c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090a6:	4808      	ldr	r0, [pc, #32]	@ (80090c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090a8:	f7ff fdce 	bl	8008c48 <USBD_GetString>
 80090ac:	e004      	b.n	80090b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	4904      	ldr	r1, [pc, #16]	@ (80090c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090b2:	4805      	ldr	r0, [pc, #20]	@ (80090c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090b4:	f7ff fdc8 	bl	8008c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090b8:	4b02      	ldr	r3, [pc, #8]	@ (80090c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000e30 	.word	0x20000e30
 80090c8:	08009890 	.word	0x08009890

080090cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4907      	ldr	r1, [pc, #28]	@ (8009100 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090e2:	4808      	ldr	r0, [pc, #32]	@ (8009104 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090e4:	f7ff fdb0 	bl	8008c48 <USBD_GetString>
 80090e8:	e004      	b.n	80090f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	4904      	ldr	r1, [pc, #16]	@ (8009100 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ee:	4805      	ldr	r0, [pc, #20]	@ (8009104 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090f0:	f7ff fdaa 	bl	8008c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090f4:	4b02      	ldr	r3, [pc, #8]	@ (8009100 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000e30 	.word	0x20000e30
 8009104:	0800989c 	.word	0x0800989c

08009108 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800910e:	4b0f      	ldr	r3, [pc, #60]	@ (800914c <Get_SerialNum+0x44>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009114:	4b0e      	ldr	r3, [pc, #56]	@ (8009150 <Get_SerialNum+0x48>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800911a:	4b0e      	ldr	r3, [pc, #56]	@ (8009154 <Get_SerialNum+0x4c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4413      	add	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800912e:	2208      	movs	r2, #8
 8009130:	4909      	ldr	r1, [pc, #36]	@ (8009158 <Get_SerialNum+0x50>)
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 f814 	bl	8009160 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009138:	2204      	movs	r2, #4
 800913a:	4908      	ldr	r1, [pc, #32]	@ (800915c <Get_SerialNum+0x54>)
 800913c:	68b8      	ldr	r0, [r7, #8]
 800913e:	f000 f80f 	bl	8009160 <IntToUnicode>
  }
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	1fff7a10 	.word	0x1fff7a10
 8009150:	1fff7a14 	.word	0x1fff7a14
 8009154:	1fff7a18 	.word	0x1fff7a18
 8009158:	200000e2 	.word	0x200000e2
 800915c:	200000f2 	.word	0x200000f2

08009160 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	4613      	mov	r3, r2
 800916c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009172:	2300      	movs	r3, #0
 8009174:	75fb      	strb	r3, [r7, #23]
 8009176:	e027      	b.n	80091c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	0f1b      	lsrs	r3, r3, #28
 800917c:	2b09      	cmp	r3, #9
 800917e:	d80b      	bhi.n	8009198 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	0f1b      	lsrs	r3, r3, #28
 8009184:	b2da      	uxtb	r2, r3
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	4619      	mov	r1, r3
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	440b      	add	r3, r1
 8009190:	3230      	adds	r2, #48	@ 0x30
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	e00a      	b.n	80091ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	0f1b      	lsrs	r3, r3, #28
 800919c:	b2da      	uxtb	r2, r3
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	4619      	mov	r1, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	440b      	add	r3, r1
 80091a8:	3237      	adds	r2, #55	@ 0x37
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	011b      	lsls	r3, r3, #4
 80091b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	3301      	adds	r3, #1
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	4413      	add	r3, r2
 80091be:	2200      	movs	r2, #0
 80091c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	3301      	adds	r3, #1
 80091c6:	75fb      	strb	r3, [r7, #23]
 80091c8:	7dfa      	ldrb	r2, [r7, #23]
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d3d3      	bcc.n	8009178 <IntToUnicode+0x18>
  }
}
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
	...

080091e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08a      	sub	sp, #40	@ 0x28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091e8:	f107 0314 	add.w	r3, r7, #20
 80091ec:	2200      	movs	r2, #0
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	605a      	str	r2, [r3, #4]
 80091f2:	609a      	str	r2, [r3, #8]
 80091f4:	60da      	str	r2, [r3, #12]
 80091f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009200:	d13a      	bne.n	8009278 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009202:	2300      	movs	r3, #0
 8009204:	613b      	str	r3, [r7, #16]
 8009206:	4b1e      	ldr	r3, [pc, #120]	@ (8009280 <HAL_PCD_MspInit+0xa0>)
 8009208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920a:	4a1d      	ldr	r2, [pc, #116]	@ (8009280 <HAL_PCD_MspInit+0xa0>)
 800920c:	f043 0301 	orr.w	r3, r3, #1
 8009210:	6313      	str	r3, [r2, #48]	@ 0x30
 8009212:	4b1b      	ldr	r3, [pc, #108]	@ (8009280 <HAL_PCD_MspInit+0xa0>)
 8009214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	613b      	str	r3, [r7, #16]
 800921c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800921e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009224:	2302      	movs	r3, #2
 8009226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009228:	2300      	movs	r3, #0
 800922a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800922c:	2303      	movs	r3, #3
 800922e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009230:	230a      	movs	r3, #10
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009234:	f107 0314 	add.w	r3, r7, #20
 8009238:	4619      	mov	r1, r3
 800923a:	4812      	ldr	r0, [pc, #72]	@ (8009284 <HAL_PCD_MspInit+0xa4>)
 800923c:	f7f8 fbc4 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009240:	4b0f      	ldr	r3, [pc, #60]	@ (8009280 <HAL_PCD_MspInit+0xa0>)
 8009242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009244:	4a0e      	ldr	r2, [pc, #56]	@ (8009280 <HAL_PCD_MspInit+0xa0>)
 8009246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800924a:	6353      	str	r3, [r2, #52]	@ 0x34
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	4b0b      	ldr	r3, [pc, #44]	@ (8009280 <HAL_PCD_MspInit+0xa0>)
 8009252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009254:	4a0a      	ldr	r2, [pc, #40]	@ (8009280 <HAL_PCD_MspInit+0xa0>)
 8009256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800925a:	6453      	str	r3, [r2, #68]	@ 0x44
 800925c:	4b08      	ldr	r3, [pc, #32]	@ (8009280 <HAL_PCD_MspInit+0xa0>)
 800925e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009268:	2200      	movs	r2, #0
 800926a:	2100      	movs	r1, #0
 800926c:	2043      	movs	r0, #67	@ 0x43
 800926e:	f7f8 fb74 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009272:	2043      	movs	r0, #67	@ 0x43
 8009274:	f7f8 fb8d 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009278:	bf00      	nop
 800927a:	3728      	adds	r7, #40	@ 0x28
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40023800 	.word	0x40023800
 8009284:	40020000 	.word	0x40020000

08009288 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7fe fb6f 	bl	8007982 <USBD_LL_SetupStage>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4613      	mov	r3, r2
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	4619      	mov	r1, r3
 80092d6:	f7fe fba9 	bl	8007a2c <USBD_LL_DataOutStage>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80092f4:	78fa      	ldrb	r2, [r7, #3]
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	4613      	mov	r3, r2
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	440b      	add	r3, r1
 8009302:	3320      	adds	r3, #32
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	4619      	mov	r1, r3
 800930a:	f7fe fc42 	bl	8007b92 <USBD_LL_DataInStage>
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe fd7c 	bl	8007e22 <USBD_LL_SOF>
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800933a:	2301      	movs	r3, #1
 800933c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	79db      	ldrb	r3, [r3, #7]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d001      	beq.n	800934a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009346:	f7f7 faed 	bl	8000924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009350:	7bfa      	ldrb	r2, [r7, #15]
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fd20 	bl	8007d9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fcc8 	bl	8007cf6 <USBD_LL_Reset>
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fd1b 	bl	8007dba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	6812      	ldr	r2, [r2, #0]
 8009392:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009396:	f043 0301 	orr.w	r3, r3, #1
 800939a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7adb      	ldrb	r3, [r3, #11]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093a4:	4b04      	ldr	r3, [pc, #16]	@ (80093b8 <HAL_PCD_SuspendCallback+0x48>)
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	4a03      	ldr	r2, [pc, #12]	@ (80093b8 <HAL_PCD_SuspendCallback+0x48>)
 80093aa:	f043 0306 	orr.w	r3, r3, #6
 80093ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	e000ed00 	.word	0xe000ed00

080093bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fd11 	bl	8007df2 <USBD_LL_Resume>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093ea:	78fa      	ldrb	r2, [r7, #3]
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fd69 	bl	8007ec6 <USBD_LL_IsoOUTIncomplete>
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe fd25 	bl	8007e62 <USBD_LL_IsoINIncomplete>
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fd7b 	bl	8007f2a <USBD_LL_DevConnected>
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fd78 	bl	8007f40 <USBD_LL_DevDisconnected>
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d13c      	bne.n	80094e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009468:	4a20      	ldr	r2, [pc, #128]	@ (80094ec <USBD_LL_Init+0x94>)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a1e      	ldr	r2, [pc, #120]	@ (80094ec <USBD_LL_Init+0x94>)
 8009474:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009478:	4b1c      	ldr	r3, [pc, #112]	@ (80094ec <USBD_LL_Init+0x94>)
 800947a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800947e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009480:	4b1a      	ldr	r3, [pc, #104]	@ (80094ec <USBD_LL_Init+0x94>)
 8009482:	2204      	movs	r2, #4
 8009484:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009486:	4b19      	ldr	r3, [pc, #100]	@ (80094ec <USBD_LL_Init+0x94>)
 8009488:	2202      	movs	r2, #2
 800948a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800948c:	4b17      	ldr	r3, [pc, #92]	@ (80094ec <USBD_LL_Init+0x94>)
 800948e:	2200      	movs	r2, #0
 8009490:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009492:	4b16      	ldr	r3, [pc, #88]	@ (80094ec <USBD_LL_Init+0x94>)
 8009494:	2202      	movs	r2, #2
 8009496:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009498:	4b14      	ldr	r3, [pc, #80]	@ (80094ec <USBD_LL_Init+0x94>)
 800949a:	2200      	movs	r2, #0
 800949c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800949e:	4b13      	ldr	r3, [pc, #76]	@ (80094ec <USBD_LL_Init+0x94>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094a4:	4b11      	ldr	r3, [pc, #68]	@ (80094ec <USBD_LL_Init+0x94>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094aa:	4b10      	ldr	r3, [pc, #64]	@ (80094ec <USBD_LL_Init+0x94>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094b0:	4b0e      	ldr	r3, [pc, #56]	@ (80094ec <USBD_LL_Init+0x94>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094b6:	480d      	ldr	r0, [pc, #52]	@ (80094ec <USBD_LL_Init+0x94>)
 80094b8:	f7f8 fc23 	bl	8001d02 <HAL_PCD_Init>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094c2:	f7f7 fa2f 	bl	8000924 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094c6:	2180      	movs	r1, #128	@ 0x80
 80094c8:	4808      	ldr	r0, [pc, #32]	@ (80094ec <USBD_LL_Init+0x94>)
 80094ca:	f7f9 fe50 	bl	800316e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094ce:	2240      	movs	r2, #64	@ 0x40
 80094d0:	2100      	movs	r1, #0
 80094d2:	4806      	ldr	r0, [pc, #24]	@ (80094ec <USBD_LL_Init+0x94>)
 80094d4:	f7f9 fe04 	bl	80030e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094d8:	2280      	movs	r2, #128	@ 0x80
 80094da:	2101      	movs	r1, #1
 80094dc:	4803      	ldr	r0, [pc, #12]	@ (80094ec <USBD_LL_Init+0x94>)
 80094de:	f7f9 fdff 	bl	80030e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20001030 	.word	0x20001030

080094f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009506:	4618      	mov	r0, r3
 8009508:	f7f8 fd0a 	bl	8001f20 <HAL_PCD_Start>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f942 	bl	800979c <USBD_Get_USB_Status>
 8009518:	4603      	mov	r3, r0
 800951a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800951c:	7bbb      	ldrb	r3, [r7, #14]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	4608      	mov	r0, r1
 8009530:	4611      	mov	r1, r2
 8009532:	461a      	mov	r2, r3
 8009534:	4603      	mov	r3, r0
 8009536:	70fb      	strb	r3, [r7, #3]
 8009538:	460b      	mov	r3, r1
 800953a:	70bb      	strb	r3, [r7, #2]
 800953c:	4613      	mov	r3, r2
 800953e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800954e:	78bb      	ldrb	r3, [r7, #2]
 8009550:	883a      	ldrh	r2, [r7, #0]
 8009552:	78f9      	ldrb	r1, [r7, #3]
 8009554:	f7f9 f9de 	bl	8002914 <HAL_PCD_EP_Open>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	4618      	mov	r0, r3
 8009560:	f000 f91c 	bl	800979c <USBD_Get_USB_Status>
 8009564:	4603      	mov	r3, r0
 8009566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009568:	7bbb      	ldrb	r3, [r7, #14]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	4611      	mov	r1, r2
 8009590:	4618      	mov	r0, r3
 8009592:	f7f9 fa29 	bl	80029e8 <HAL_PCD_EP_Close>
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f8fd 	bl	800979c <USBD_Get_USB_Status>
 80095a2:	4603      	mov	r3, r0
 80095a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7f9 fae1 	bl	8002b96 <HAL_PCD_EP_SetStall>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f8de 	bl	800979c <USBD_Get_USB_Status>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009608:	78fa      	ldrb	r2, [r7, #3]
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f7f9 fb25 	bl	8002c5c <HAL_PCD_EP_ClrStall>
 8009612:	4603      	mov	r3, r0
 8009614:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f8bf 	bl	800979c <USBD_Get_USB_Status>
 800961e:	4603      	mov	r3, r0
 8009620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009622:	7bbb      	ldrb	r3, [r7, #14]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800963e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009644:	2b00      	cmp	r3, #0
 8009646:	da0b      	bge.n	8009660 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	4613      	mov	r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	3316      	adds	r3, #22
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	e00b      	b.n	8009678 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009666:	68f9      	ldr	r1, [r7, #12]
 8009668:	4613      	mov	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009676:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800969e:	78fa      	ldrb	r2, [r7, #3]
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f9 f912 	bl	80028cc <HAL_PCD_SetAddress>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 f874 	bl	800979c <USBD_Get_USB_Status>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
 80096ce:	460b      	mov	r3, r1
 80096d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096e0:	7af9      	ldrb	r1, [r7, #11]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	f7f9 fa1c 	bl	8002b22 <HAL_PCD_EP_Transmit>
 80096ea:	4603      	mov	r3, r0
 80096ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 f853 	bl	800979c <USBD_Get_USB_Status>
 80096f6:	4603      	mov	r3, r0
 80096f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	607a      	str	r2, [r7, #4]
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	460b      	mov	r3, r1
 8009712:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009722:	7af9      	ldrb	r1, [r7, #11]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	f7f9 f9a8 	bl	8002a7c <HAL_PCD_EP_Receive>
 800972c:	4603      	mov	r3, r0
 800972e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f832 	bl	800979c <USBD_Get_USB_Status>
 8009738:	4603      	mov	r3, r0
 800973a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800973c:	7dbb      	ldrb	r3, [r7, #22]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	460b      	mov	r3, r1
 8009750:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f7f9 f9c8 	bl	8002af2 <HAL_PCD_EP_GetRxCount>
 8009762:	4603      	mov	r3, r0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009774:	4b03      	ldr	r3, [pc, #12]	@ (8009784 <USBD_static_malloc+0x18>)
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20001514 	.word	0x20001514

08009788 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d817      	bhi.n	80097e0 <USBD_Get_USB_Status+0x44>
 80097b0:	a201      	add	r2, pc, #4	@ (adr r2, 80097b8 <USBD_Get_USB_Status+0x1c>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097c9 	.word	0x080097c9
 80097bc:	080097cf 	.word	0x080097cf
 80097c0:	080097d5 	.word	0x080097d5
 80097c4:	080097db 	.word	0x080097db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e00b      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ce:	2303      	movs	r3, #3
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e008      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	e005      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097da:	2303      	movs	r3, #3
 80097dc:	73fb      	strb	r3, [r7, #15]
    break;
 80097de:	e002      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097e0:	2303      	movs	r3, #3
 80097e2:	73fb      	strb	r3, [r7, #15]
    break;
 80097e4:	bf00      	nop
  }
  return usb_status;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <memset>:
 80097f4:	4402      	add	r2, r0
 80097f6:	4603      	mov	r3, r0
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d100      	bne.n	80097fe <memset+0xa>
 80097fc:	4770      	bx	lr
 80097fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009802:	e7f9      	b.n	80097f8 <memset+0x4>

08009804 <__libc_init_array>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	4d0d      	ldr	r5, [pc, #52]	@ (800983c <__libc_init_array+0x38>)
 8009808:	4c0d      	ldr	r4, [pc, #52]	@ (8009840 <__libc_init_array+0x3c>)
 800980a:	1b64      	subs	r4, r4, r5
 800980c:	10a4      	asrs	r4, r4, #2
 800980e:	2600      	movs	r6, #0
 8009810:	42a6      	cmp	r6, r4
 8009812:	d109      	bne.n	8009828 <__libc_init_array+0x24>
 8009814:	4d0b      	ldr	r5, [pc, #44]	@ (8009844 <__libc_init_array+0x40>)
 8009816:	4c0c      	ldr	r4, [pc, #48]	@ (8009848 <__libc_init_array+0x44>)
 8009818:	f000 f818 	bl	800984c <_init>
 800981c:	1b64      	subs	r4, r4, r5
 800981e:	10a4      	asrs	r4, r4, #2
 8009820:	2600      	movs	r6, #0
 8009822:	42a6      	cmp	r6, r4
 8009824:	d105      	bne.n	8009832 <__libc_init_array+0x2e>
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	f855 3b04 	ldr.w	r3, [r5], #4
 800982c:	4798      	blx	r3
 800982e:	3601      	adds	r6, #1
 8009830:	e7ee      	b.n	8009810 <__libc_init_array+0xc>
 8009832:	f855 3b04 	ldr.w	r3, [r5], #4
 8009836:	4798      	blx	r3
 8009838:	3601      	adds	r6, #1
 800983a:	e7f2      	b.n	8009822 <__libc_init_array+0x1e>
 800983c:	080098cc 	.word	0x080098cc
 8009840:	080098cc 	.word	0x080098cc
 8009844:	080098cc 	.word	0x080098cc
 8009848:	080098d0 	.word	0x080098d0

0800984c <_init>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr

08009858 <_fini>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr
