/*
 * drone_usb.c
 *
 *  Created on: Apr 23, 2025
 *      Author: vince
 */

#include "drone_usb.h"
#include "crc8.h"           // implement your CRC-8 routine
#include "tim.h"            // for PWM outputs
#include <string.h>

static uint8_t rxBuf[64];
static uint16_t servo_vals[8];

uint8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len) {
    memcpy(rxBuf, Buf, *Len);
    USB_ParseBuffer(rxBuf, *Len);
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, rxBuf);
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
    return (USBD_OK);
}

void USB_ParseBuffer(uint8_t* buf, uint16_t len) {
    if (len < 5) return;
    if (buf[0]!=0xAA || buf[1]!=0x55) return;
    uint8_t id = buf[2], L = buf[3];
    if (L+5 > len) return;
    uint8_t* p = &buf[4];
    if (crc8(&buf[2], 2+L) != buf[4+L]) return;

    if (id == MSG_ID_SET_SERVOS && L==16) {
        for(int i=0;i<8;i++){
            uint16_t v = p[2*i] | (p[2*i+1]<<8);
            servo_vals[i]=v;
            // e.g. if TIM2_CH1…CH4, TIM3_CH1…CH4 used:
            if (i < 4)
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1<<i, v);
            else
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1<<(i-4), v);
        }
    }
}

void USB_SendTelemetry(uint16_t current_mA,
                       uint16_t voltage_mV,
                       uint16_t  soc_pct,
                       uint16_t temp1_dC,
                       uint16_t temp2_dC)
{
    uint8_t msg[5 + 9]; // header+id+len + payload(9) + crc
    msg[0]=0xAA; msg[1]=0x55;
    msg[2]=MSG_ID_TELEMETRY;
    msg[3]=9;
    msg[4] = current_mA & 0xFF;
    msg[5] = current_mA >> 8;
    msg[6] = voltage_mV & 0xFF;
    msg[7] = voltage_mV >> 8;
    msg[8] = soc_pct;
    msg[9] = temp1_dC & 0xFF;
    msg[10]= temp1_dC >> 8;
    msg[11]= temp2_dC & 0xFF;
    msg[12]= temp2_dC >> 8;
    msg[13]= crc8(&msg[2], 2+9);
    CDC_Transmit_FS(msg, sizeof(msg));
}
