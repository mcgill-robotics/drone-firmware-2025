
drone_power_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003154  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080032e0  080032e0  000042e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003328  08003328  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003328  08003328  00004328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003330  08003330  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003330  08003330  00004330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003334  08003334  00004334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003338  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08003344  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003344  000051b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e742  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e86  00000000  00000000  0001377e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00015608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f6  00000000  00000000  000162d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c078  00000000  00000000  00016cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000042b2  00000000  00000000  00022d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00026ff8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000035a4  00000000  00000000  0002703c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000076  00000000  00000000  0002a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080032c8 	.word	0x080032c8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080032c8 	.word	0x080032c8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fb51 	bl	8000b66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f80c 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f932 	bl	8000730 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004cc:	f000 f85a 	bl	8000584 <MX_CAN1_Init>
  MX_I2C1_Init();
 80004d0:	f000 f88e 	bl	80005f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004d4:	f000 f8cc 	bl	8000670 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f8fa 	bl	80006d0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <main+0x20>

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b096      	sub	sp, #88	@ 0x58
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2244      	movs	r2, #68	@ 0x44
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 febd 	bl	800326e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000502:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000506:	f001 f857 	bl	80015b8 <HAL_PWREx_ControlVoltageScaling>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000510:	f000 f95c 	bl	80007cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000514:	2310      	movs	r3, #16
 8000516:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000518:	2301      	movs	r3, #1
 800051a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000520:	2360      	movs	r3, #96	@ 0x60
 8000522:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2302      	movs	r3, #2
 8000526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000528:	2301      	movs	r3, #1
 800052a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000530:	2328      	movs	r3, #40	@ 0x28
 8000532:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000534:	2307      	movs	r3, #7
 8000536:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000538:	2302      	movs	r3, #2
 800053a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053c:	2302      	movs	r3, #2
 800053e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4618      	mov	r0, r3
 8000546:	f001 f88d 	bl	8001664 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000550:	f000 f93c 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	2303      	movs	r3, #3
 800055a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2104      	movs	r1, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fc8d 	bl	8001e8c <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000578:	f000 f928 	bl	80007cc <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3758      	adds	r7, #88	@ 0x58
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_CAN1_Init+0x64>)
 800058a:	4a18      	ldr	r2, [pc, #96]	@ (80005ec <MX_CAN1_Init+0x68>)
 800058c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <MX_CAN1_Init+0x64>)
 8000590:	2205      	movs	r2, #5
 8000592:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000594:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_CAN1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <MX_CAN1_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005a2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80005a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005be:	2200      	movs	r2, #0
 80005c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005d6:	f000 fb3b 	bl	8000c50 <HAL_CAN_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005e0:	f000 f8f4 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000028 	.word	0x20000028
 80005ec:	40006400 	.word	0x40006400

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_I2C1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <MX_I2C1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_I2C1_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <MX_I2C1_Init+0x74>)
 800062c:	f000 fe84 	bl	8001338 <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000636:	f000 f8c9 	bl	80007cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <MX_I2C1_Init+0x74>)
 800063e:	f000 ff16 	bl	800146e <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000648:	f000 f8c0 	bl	80007cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000650:	f000 ff58 	bl	8001504 <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 f8b7 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000050 	.word	0x20000050
 8000668:	40005400 	.word	0x40005400
 800066c:	10d19ce4 	.word	0x10d19ce4

08000670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <MX_USART1_UART_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_USART1_UART_Init+0x58>)
 80006b4:	f002 f918 	bl	80028e8 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f885 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000a4 	.word	0x200000a4
 80006cc:	40013800 	.word	0x40013800

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	@ (800072c <MX_USART2_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 8000714:	f002 f8e8 	bl	80028e8 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f855 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000012c 	.word	0x2000012c
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4a1f      	ldr	r2, [pc, #124]	@ (80007c8 <MX_GPIO_Init+0x98>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a19      	ldr	r2, [pc, #100]	@ (80007c8 <MX_GPIO_Init+0x98>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_GPIO_Init+0x98>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000780:	f000 fdc2 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C3_Pin V3_Pin C2_Pin V2_Pin
                           C1_Pin V1_Pin */
  GPIO_InitStruct.Pin = C3_Pin|V3_Pin|C2_Pin|V2_Pin
 8000784:	23f3      	movs	r3, #243	@ 0xf3
 8000786:	60fb      	str	r3, [r7, #12]
                          |C1_Pin|V1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000788:	2303      	movs	r3, #3
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f000 fc3b 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800079e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f000 fc2b 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e2:	4a0e      	ldr	r2, [pc, #56]	@ (800081c <HAL_MspInit+0x44>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x44>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6593      	str	r3, [r2, #88]	@ 0x58
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_CAN_MspInit+0x80>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d129      	bne.n	8000896 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <HAL_CAN_MspInit+0x84>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <HAL_CAN_MspInit+0x84>)
 8000848:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800084c:	6593      	str	r3, [r2, #88]	@ 0x58
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_CAN_MspInit+0x84>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_CAN_MspInit+0x84>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a11      	ldr	r2, [pc, #68]	@ (80008a4 <HAL_CAN_MspInit+0x84>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_CAN_MspInit+0x84>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000872:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000884:	2309      	movs	r3, #9
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000892:	f000 fbbf 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40006400 	.word	0x40006400
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0a0      	sub	sp, #128	@ 0x80
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	225c      	movs	r2, #92	@ 0x5c
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fcd0 	bl	800326e <memset>
  if(hi2c->Instance==I2C1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <HAL_I2C_MspInit+0xa4>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d135      	bne.n	8000944 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008d8:	2340      	movs	r3, #64	@ 0x40
 80008da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008dc:	2300      	movs	r3, #0
 80008de:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fcf5 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008f0:	f7ff ff6c 	bl	80007cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <HAL_I2C_MspInit+0xa8>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f8:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <HAL_I2C_MspInit+0xa8>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <HAL_I2C_MspInit+0xa8>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000904:	f003 0302 	and.w	r3, r3, #2
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800090c:	23c0      	movs	r3, #192	@ 0xc0
 800090e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000910:	2312      	movs	r3, #18
 8000912:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800091c:	2304      	movs	r3, #4
 800091e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000924:	4619      	mov	r1, r3
 8000926:	480b      	ldr	r0, [pc, #44]	@ (8000954 <HAL_I2C_MspInit+0xac>)
 8000928:	f000 fb74 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <HAL_I2C_MspInit+0xa8>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000930:	4a07      	ldr	r2, [pc, #28]	@ (8000950 <HAL_I2C_MspInit+0xa8>)
 8000932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000936:	6593      	str	r3, [r2, #88]	@ 0x58
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_I2C_MspInit+0xa8>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000944:	bf00      	nop
 8000946:	3780      	adds	r7, #128	@ 0x80
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40005400 	.word	0x40005400
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0a2      	sub	sp, #136	@ 0x88
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	225c      	movs	r2, #92	@ 0x5c
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fc78 	bl	800326e <memset>
  if(huart->Instance==USART1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a40      	ldr	r2, [pc, #256]	@ (8000a84 <HAL_UART_MspInit+0x12c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d13a      	bne.n	80009fe <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800098c:	2300      	movs	r3, #0
 800098e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fc9d 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a0:	f7ff ff14 	bl	80007cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a4:	4b38      	ldr	r3, [pc, #224]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 80009a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a8:	4a37      	ldr	r2, [pc, #220]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b0:	4b35      	ldr	r3, [pc, #212]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 80009b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b32      	ldr	r3, [pc, #200]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c0:	4a31      	ldr	r2, [pc, #196]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009d8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e8:	2307      	movs	r3, #7
 80009ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f8:	f000 fb0c 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fc:	e03d      	b.n	8000a7a <HAL_UART_MspInit+0x122>
  else if(huart->Instance==USART2)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <HAL_UART_MspInit+0x134>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d138      	bne.n	8000a7a <HAL_UART_MspInit+0x122>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fc5d 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0xcc>
      Error_Handler();
 8000a20:	f7ff fed4 	bl	80007cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 8000a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 8000a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_UART_MspInit+0x130>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a54:	230c      	movs	r3, #12
 8000a56:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f000 facd 	bl	8001014 <HAL_GPIO_Init>
}
 8000a7a:	bf00      	nop
 8000a7c:	3788      	adds	r7, #136	@ 0x88
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40004400 	.word	0x40004400

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f893 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f002 fb9d 	bl	8003280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b46:	f7ff fcb9 	bl	80004bc <main>

08000b4a <LoopForever>:

LoopForever:
    b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b4c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b58:	08003338 	.word	0x08003338
  ldr r2, =_sbss
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b60:	200001b8 	.word	0x200001b8

08000b64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_IRQHandler>

08000b66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 fa1b 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b76:	200f      	movs	r0, #15
 8000b78:	f000 f80e 	bl	8000b98 <HAL_InitTick>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	e001      	b.n	8000b8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b88:	f7ff fe26 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d023      	beq.n	8000bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_InitTick+0x70>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fa19 	bl	8000ffa <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d809      	bhi.n	8000be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f9f1 	bl	8000fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_InitTick+0x74>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e001      	b.n	8000bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200001b4 	.word	0x200001b4

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200001b4 	.word	0x200001b4

08000c50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e0ed      	b.n	8000e3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fdd6 	bl	8000820 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0201 	orr.w	r2, r2, #1
 8000c82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c84:	f7ff ffd8 	bl	8000c38 <HAL_GetTick>
 8000c88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c8a:	e012      	b.n	8000cb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c8c:	f7ff ffd4 	bl	8000c38 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b0a      	cmp	r3, #10
 8000c98:	d90b      	bls.n	8000cb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2205      	movs	r2, #5
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0c5      	b.n	8000e3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0e5      	beq.n	8000c8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 0202 	bic.w	r2, r2, #2
 8000cce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd0:	f7ff ffb2 	bl	8000c38 <HAL_GetTick>
 8000cd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cd6:	e012      	b.n	8000cfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cd8:	f7ff ffae 	bl	8000c38 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d90b      	bls.n	8000cfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e09f      	b.n	8000e3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1e5      	bne.n	8000cd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7e1b      	ldrb	r3, [r3, #24]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d108      	bne.n	8000d26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	e007      	b.n	8000d36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7e5b      	ldrb	r3, [r3, #25]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d108      	bne.n	8000d50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e007      	b.n	8000d60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7e9b      	ldrb	r3, [r3, #26]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d108      	bne.n	8000d7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0220 	orr.w	r2, r2, #32
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	e007      	b.n	8000d8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0220 	bic.w	r2, r2, #32
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7edb      	ldrb	r3, [r3, #27]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d108      	bne.n	8000da4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0210 	bic.w	r2, r2, #16
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0210 	orr.w	r2, r2, #16
 8000db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7f1b      	ldrb	r3, [r3, #28]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d108      	bne.n	8000dce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0208 	orr.w	r2, r2, #8
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e007      	b.n	8000dde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0208 	bic.w	r2, r2, #8
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7f5b      	ldrb	r3, [r3, #29]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0204 	orr.w	r2, r2, #4
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e007      	b.n	8000e08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0204 	bic.w	r2, r2, #4
 8000e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	ea42 0103 	orr.w	r1, r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	1e5a      	subs	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff47 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff5c 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffb0 	bl	8000f68 <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e154      	b.n	80012ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8146 	beq.w	80012c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d005      	beq.n	8001054 <HAL_GPIO_Init+0x40>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d017      	beq.n	80010f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a0 	beq.w	80012c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b58      	ldr	r3, [pc, #352]	@ (80012ec <HAL_GPIO_Init+0x2d8>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118c:	4a57      	ldr	r2, [pc, #348]	@ (80012ec <HAL_GPIO_Init+0x2d8>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6613      	str	r3, [r2, #96]	@ 0x60
 8001194:	4b55      	ldr	r3, [pc, #340]	@ (80012ec <HAL_GPIO_Init+0x2d8>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a0:	4a53      	ldr	r2, [pc, #332]	@ (80012f0 <HAL_GPIO_Init+0x2dc>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ca:	d019      	beq.n	8001200 <HAL_GPIO_Init+0x1ec>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a49      	ldr	r2, [pc, #292]	@ (80012f4 <HAL_GPIO_Init+0x2e0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d013      	beq.n	80011fc <HAL_GPIO_Init+0x1e8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a48      	ldr	r2, [pc, #288]	@ (80012f8 <HAL_GPIO_Init+0x2e4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00d      	beq.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a47      	ldr	r2, [pc, #284]	@ (80012fc <HAL_GPIO_Init+0x2e8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x1e0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a46      	ldr	r2, [pc, #280]	@ (8001300 <HAL_GPIO_Init+0x2ec>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d101      	bne.n	80011f0 <HAL_GPIO_Init+0x1dc>
 80011ec:	2304      	movs	r3, #4
 80011ee:	e008      	b.n	8001202 <HAL_GPIO_Init+0x1ee>
 80011f0:	2307      	movs	r3, #7
 80011f2:	e006      	b.n	8001202 <HAL_GPIO_Init+0x1ee>
 80011f4:	2303      	movs	r3, #3
 80011f6:	e004      	b.n	8001202 <HAL_GPIO_Init+0x1ee>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e002      	b.n	8001202 <HAL_GPIO_Init+0x1ee>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_GPIO_Init+0x1ee>
 8001200:	2300      	movs	r3, #0
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	f002 0203 	and.w	r2, r2, #3
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	4093      	lsls	r3, r2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001212:	4937      	ldr	r1, [pc, #220]	@ (80012f0 <HAL_GPIO_Init+0x2dc>)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001220:	4b38      	ldr	r3, [pc, #224]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001244:	4a2f      	ldr	r2, [pc, #188]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800124a:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800126e:	4a25      	ldr	r2, [pc, #148]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001274:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001298:	4a1a      	ldr	r2, [pc, #104]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800129e:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f47f aea3 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000c00 	.word	0x48000c00
 8001300:	48001000 	.word	0x48001000
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001324:	e002      	b.n	800132c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e08d      	b.n	8001466 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff faa2 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	@ 0x24
 8001368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001388:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001398:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d107      	bne.n	80013b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	e006      	b.n	80013c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d108      	bne.n	80013da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	e007      	b.n	80013ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800140c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69d9      	ldr	r1, [r3, #28]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2220      	movs	r2, #32
 8001452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b20      	cmp	r3, #32
 8001482:	d138      	bne.n	80014f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800148e:	2302      	movs	r3, #2
 8001490:	e032      	b.n	80014f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2224      	movs	r2, #36	@ 0x24
 800149e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0201 	bic.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2220      	movs	r2, #32
 80014e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014f6:	2302      	movs	r3, #2
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b20      	cmp	r3, #32
 8001518:	d139      	bne.n	800158e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001524:	2302      	movs	r3, #2
 8001526:	e033      	b.n	8001590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2224      	movs	r2, #36	@ 0x24
 8001534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001556:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2220      	movs	r2, #32
 800157e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800158e:	2302      	movs	r3, #2
  }
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40007000 	.word	0x40007000

080015b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c6:	d130      	bne.n	800162a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015d4:	d038      	beq.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015de:	4a1e      	ldr	r2, [pc, #120]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2232      	movs	r2, #50	@ 0x32
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	0c9b      	lsrs	r3, r3, #18
 80015f8:	3301      	adds	r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015fc:	e002      	b.n	8001604 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3b01      	subs	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001610:	d102      	bne.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f2      	bne.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001624:	d110      	bne.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e00f      	b.n	800164a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001636:	d007      	beq.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001640:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001646:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40007000 	.word	0x40007000
 800165c:	20000000 	.word	0x20000000
 8001660:	431bde83 	.word	0x431bde83

08001664 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	f000 bc02 	b.w	8001e7c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001678:	4b96      	ldr	r3, [pc, #600]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001682:	4b94      	ldr	r3, [pc, #592]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80e4 	beq.w	8001862 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4c>
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	f040 808b 	bne.w	80017be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	f040 8087 	bne.w	80017be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b0:	4b88      	ldr	r3, [pc, #544]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x64>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e3d9      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1a      	ldr	r2, [r3, #32]
 80016cc:	4b81      	ldr	r3, [pc, #516]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <HAL_RCC_OscConfig+0x7e>
 80016d8:	4b7e      	ldr	r3, [pc, #504]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016e0:	e005      	b.n	80016ee <HAL_RCC_OscConfig+0x8a>
 80016e2:	4b7c      	ldr	r3, [pc, #496]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80016e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d223      	bcs.n	800173a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd8c 	bl	8002214 <RCC_SetFlashLatencyFromMSIRange>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e3ba      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001706:	4b73      	ldr	r3, [pc, #460]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a72      	ldr	r2, [pc, #456]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b70      	ldr	r3, [pc, #448]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	496d      	ldr	r1, [pc, #436]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001724:	4b6b      	ldr	r3, [pc, #428]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	4968      	ldr	r1, [pc, #416]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e025      	b.n	8001786 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173a:	4b66      	ldr	r3, [pc, #408]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a65      	ldr	r2, [pc, #404]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b63      	ldr	r3, [pc, #396]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4960      	ldr	r1, [pc, #384]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001758:	4b5e      	ldr	r3, [pc, #376]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	495b      	ldr	r1, [pc, #364]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fd4c 	bl	8002214 <RCC_SetFlashLatencyFromMSIRange>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e37a      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001786:	f000 fc81 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800178a:	4602      	mov	r2, r0
 800178c:	4b51      	ldr	r3, [pc, #324]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	4950      	ldr	r1, [pc, #320]	@ (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001798:	5ccb      	ldrb	r3, [r1, r3]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	4a4e      	ldr	r2, [pc, #312]	@ (80018dc <HAL_RCC_OscConfig+0x278>)
 80017a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017a6:	4b4e      	ldr	r3, [pc, #312]	@ (80018e0 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f9f4 	bl	8000b98 <HAL_InitTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d052      	beq.n	8001860 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	e35e      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d032      	beq.n	800182c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017c6:	4b43      	ldr	r3, [pc, #268]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a42      	ldr	r2, [pc, #264]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fa31 	bl	8000c38 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017da:	f7ff fa2d 	bl	8000c38 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e347      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ec:	4b39      	ldr	r3, [pc, #228]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f8:	4b36      	ldr	r3, [pc, #216]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a35      	ldr	r2, [pc, #212]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b33      	ldr	r3, [pc, #204]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4930      	ldr	r1, [pc, #192]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001816:	4b2f      	ldr	r3, [pc, #188]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	492b      	ldr	r1, [pc, #172]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
 800182a:	e01a      	b.n	8001862 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800182c:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a28      	ldr	r2, [pc, #160]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001838:	f7ff f9fe 	bl	8000c38 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001840:	f7ff f9fa 	bl	8000c38 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e314      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1dc>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d073      	beq.n	8001956 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b08      	cmp	r3, #8
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x21c>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d10e      	bne.n	8001898 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d10b      	bne.n	8001898 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d063      	beq.n	8001954 <HAL_RCC_OscConfig+0x2f0>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d15f      	bne.n	8001954 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e2f1      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x24c>
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a0b      	ldr	r2, [pc, #44]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e025      	b.n	80018fc <HAL_RCC_OscConfig+0x298>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018b8:	d114      	bne.n	80018e4 <HAL_RCC_OscConfig+0x280>
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a02      	ldr	r2, [pc, #8]	@ (80018d4 <HAL_RCC_OscConfig+0x270>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e013      	b.n	80018fc <HAL_RCC_OscConfig+0x298>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	080032e0 	.word	0x080032e0
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004
 80018e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a9f      	ldr	r2, [pc, #636]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a9c      	ldr	r2, [pc, #624]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f998 	bl	8000c38 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f994 	bl	8000c38 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	@ 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e2ae      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191e:	4b92      	ldr	r3, [pc, #584]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x2a8>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f984 	bl	8000c38 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff f980 	bl	8000c38 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	@ 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e29a      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001946:	4b88      	ldr	r3, [pc, #544]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x2d0>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d060      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d005      	beq.n	8001974 <HAL_RCC_OscConfig+0x310>
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b0c      	cmp	r3, #12
 800196c:	d119      	bne.n	80019a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d116      	bne.n	80019a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001974:	4b7c      	ldr	r3, [pc, #496]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x328>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e277      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b76      	ldr	r3, [pc, #472]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	061b      	lsls	r3, r3, #24
 800199a:	4973      	ldr	r1, [pc, #460]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a0:	e040      	b.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d023      	beq.n	80019f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f93f 	bl	8000c38 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff f93b 	bl	8000c38 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e255      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d0:	4b65      	ldr	r3, [pc, #404]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b62      	ldr	r3, [pc, #392]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	061b      	lsls	r3, r3, #24
 80019ea:	495f      	ldr	r1, [pc, #380]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e018      	b.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 80019f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f91b 	bl	8000c38 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff f917 	bl	8000c38 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e231      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a18:	4b53      	ldr	r3, [pc, #332]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a38:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff f8f6 	bl	8000c38 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff f8f2 	bl	8000c38 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e20c      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a62:	4b41      	ldr	r3, [pc, #260]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ef      	beq.n	8001a50 <HAL_RCC_OscConfig+0x3ec>
 8001a70:	e01b      	b.n	8001aaa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a72:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a78:	4a3b      	ldr	r2, [pc, #236]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff f8d9 	bl	8000c38 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8a:	f7ff f8d5 	bl	8000c38 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e1ef      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a9c:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ef      	bne.n	8001a8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80a6 	beq.w	8001c04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001abc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	4a26      	ldr	r2, [pc, #152]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <HAL_RCC_OscConfig+0x508>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d118      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <HAL_RCC_OscConfig+0x508>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b6c <HAL_RCC_OscConfig+0x508>)
 8001af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afc:	f7ff f89c 	bl	8000c38 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b04:	f7ff f898 	bl	8000c38 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1b2      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_RCC_OscConfig+0x508>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d108      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4d8>
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b3a:	e029      	b.n	8001b90 <HAL_RCC_OscConfig+0x52c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d115      	bne.n	8001b70 <HAL_RCC_OscConfig+0x50c>
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4a:	4a07      	ldr	r2, [pc, #28]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5a:	4a03      	ldr	r2, [pc, #12]	@ (8001b68 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b64:	e014      	b.n	8001b90 <HAL_RCC_OscConfig+0x52c>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	4b9a      	ldr	r3, [pc, #616]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b76:	4a99      	ldr	r2, [pc, #612]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b80:	4b96      	ldr	r3, [pc, #600]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b86:	4a95      	ldr	r2, [pc, #596]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d016      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff f84e 	bl	8000c38 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f84a 	bl	8000c38 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e162      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb6:	4b89      	ldr	r3, [pc, #548]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ed      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x53c>
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f837 	bl	8000c38 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff f833 	bl	8000c38 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e14b      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be4:	4b7d      	ldr	r3, [pc, #500]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ed      	bne.n	8001bce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bf2:	7ffb      	ldrb	r3, [r7, #31]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf8:	4b78      	ldr	r3, [pc, #480]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	4a77      	ldr	r2, [pc, #476]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d03c      	beq.n	8001c8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01c      	beq.n	8001c52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c18:	4b70      	ldr	r3, [pc, #448]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff f806 	bl	8000c38 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c30:	f7ff f802 	bl	8000c38 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e11c      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c42:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ef      	beq.n	8001c30 <HAL_RCC_OscConfig+0x5cc>
 8001c50:	e01b      	b.n	8001c8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c52:	4b62      	ldr	r3, [pc, #392]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c58:	4a60      	ldr	r2, [pc, #384]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c62:	f7fe ffe9 	bl	8000c38 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c6a:	f7fe ffe5 	bl	8000c38 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0ff      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c7c:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ef      	bne.n	8001c6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80f3 	beq.w	8001e7a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	f040 80c9 	bne.w	8001e30 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0203 	and.w	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d12c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d123      	bne.n	8001d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d11b      	bne.n	8001d0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cde:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d113      	bne.n	8001d0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d109      	bne.n	8001d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	3b01      	subs	r3, #1
 8001d06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d06b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d062      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d12:	4b32      	ldr	r3, [pc, #200]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0ac      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d22:	4b2e      	ldr	r3, [pc, #184]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a2d      	ldr	r2, [pc, #180]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001d28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d2e:	f7fe ff83 	bl	8000c38 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7fe ff7f 	bl	8000c38 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e099      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d48:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	4b21      	ldr	r3, [pc, #132]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d64:	3a01      	subs	r2, #1
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d6e:	0212      	lsls	r2, r2, #8
 8001d70:	4311      	orrs	r1, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d76:	0852      	lsrs	r2, r2, #1
 8001d78:	3a01      	subs	r2, #1
 8001d7a:	0552      	lsls	r2, r2, #21
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d82:	0852      	lsrs	r2, r2, #1
 8001d84:	3a01      	subs	r2, #1
 8001d86:	0652      	lsls	r2, r2, #25
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d8e:	06d2      	lsls	r2, r2, #27
 8001d90:	430a      	orrs	r2, r1
 8001d92:	4912      	ldr	r1, [pc, #72]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d98:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a0c      	ldr	r2, [pc, #48]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db0:	f7fe ff42 	bl	8000c38 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe ff3e 	bl	8000c38 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e058      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <HAL_RCC_OscConfig+0x778>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd6:	e050      	b.n	8001e7a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e04f      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de4:	4b27      	ldr	r3, [pc, #156]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d144      	bne.n	8001e7a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001df0:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a23      	ldr	r2, [pc, #140]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dfc:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a20      	ldr	r2, [pc, #128]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e08:	f7fe ff16 	bl	8000c38 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe ff12 	bl	8000c38 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e02c      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x7ac>
 8001e2e:	e024      	b.n	8001e7a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d01f      	beq.n	8001e76 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a12      	ldr	r2, [pc, #72]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001e3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe fef9 	bl	8000c38 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe fef5 	bl	8000c38 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	4905      	ldr	r1, [pc, #20]	@ (8001e84 <HAL_RCC_OscConfig+0x820>)
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_RCC_OscConfig+0x824>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
 8001e74:	e001      	b.n	8001e7a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	feeefffc 	.word	0xfeeefffc

08001e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0e7      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b75      	ldr	r3, [pc, #468]	@ (8002078 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b72      	ldr	r3, [pc, #456]	@ (8002078 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4970      	ldr	r1, [pc, #448]	@ (8002078 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8002078 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0cf      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	4b66      	ldr	r3, [pc, #408]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d908      	bls.n	8001efe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b63      	ldr	r3, [pc, #396]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4960      	ldr	r1, [pc, #384]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d04c      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	4b5a      	ldr	r3, [pc, #360]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d121      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0a6      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2a:	4b54      	ldr	r3, [pc, #336]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e09a      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f42:	4b4e      	ldr	r3, [pc, #312]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e08e      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f52:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e086      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b46      	ldr	r3, [pc, #280]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4943      	ldr	r1, [pc, #268]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f74:	f7fe fe60 	bl	8000c38 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fe5c 	bl	8000c38 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e06e      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b3a      	ldr	r3, [pc, #232]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d010      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4b31      	ldr	r3, [pc, #196]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d208      	bcs.n	8001fd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	492b      	ldr	r1, [pc, #172]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd2:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d210      	bcs.n	8002002 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 0207 	bic.w	r2, r3, #7
 8001fe8:	4923      	ldr	r1, [pc, #140]	@ (8002078 <HAL_RCC_ClockConfig+0x1ec>)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e036      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	4918      	ldr	r1, [pc, #96]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4910      	ldr	r1, [pc, #64]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002040:	f000 f824 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	490b      	ldr	r1, [pc, #44]	@ (8002080 <HAL_RCC_ClockConfig+0x1f4>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	4a09      	ldr	r2, [pc, #36]	@ (8002084 <HAL_RCC_ClockConfig+0x1f8>)
 800205e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_ClockConfig+0x1fc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fd97 	bl	8000b98 <HAL_InitTick>
 800206a:	4603      	mov	r3, r0
 800206c:	72fb      	strb	r3, [r7, #11]

  return status;
 800206e:	7afb      	ldrb	r3, [r7, #11]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40022000 	.word	0x40022000
 800207c:	40021000 	.word	0x40021000
 8002080:	080032e0 	.word	0x080032e0
 8002084:	20000000 	.word	0x20000000
 8002088:	20000004 	.word	0x20000004

0800208c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	@ 0x24
 8002090:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209a:	4b3e      	ldr	r3, [pc, #248]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x34>
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d121      	bne.n	80020fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d11e      	bne.n	80020fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020c0:	4b34      	ldr	r3, [pc, #208]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020cc:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e005      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d102      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002104:	4b25      	ldr	r3, [pc, #148]	@ (800219c <HAL_RCC_GetSysClockFreq+0x110>)
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	e004      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b08      	cmp	r3, #8
 800210e:	d101      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002110:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002112:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d134      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0xa6>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d003      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0xac>
 8002130:	e005      	b.n	800213e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002132:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <HAL_RCC_GetSysClockFreq+0x110>)
 8002134:	617b      	str	r3, [r7, #20]
      break;
 8002136:	e005      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800213a:	617b      	str	r3, [r7, #20]
      break;
 800213c:	e002      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	617b      	str	r3, [r7, #20]
      break;
 8002142:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	3301      	adds	r3, #1
 8002150:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	fb03 f202 	mul.w	r2, r3, r2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	0e5b      	lsrs	r3, r3, #25
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	3301      	adds	r3, #1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002184:	69bb      	ldr	r3, [r7, #24]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	@ 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	080032f8 	.word	0x080032f8
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	007a1200 	.word	0x007a1200

080021a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000000 	.word	0x20000000

080021bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021c0:	f7ff fff0 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4904      	ldr	r1, [pc, #16]	@ (80021e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	080032f0 	.word	0x080032f0

080021e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021ec:	f7ff ffda 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0adb      	lsrs	r3, r3, #11
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4904      	ldr	r1, [pc, #16]	@ (8002210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	080032f0 	.word	0x080032f0

08002214 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002220:	4b2a      	ldr	r3, [pc, #168]	@ (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800222c:	f7ff f9b6 	bl	800159c <HAL_PWREx_GetVoltageRange>
 8002230:	6178      	str	r0, [r7, #20]
 8002232:	e014      	b.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002238:	4a24      	ldr	r2, [pc, #144]	@ (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002240:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800224c:	f7ff f9a6 	bl	800159c <HAL_PWREx_GetVoltageRange>
 8002250:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	4a1d      	ldr	r2, [pc, #116]	@ (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002264:	d10b      	bne.n	800227e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b80      	cmp	r3, #128	@ 0x80
 800226a:	d919      	bls.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002270:	d902      	bls.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002272:	2302      	movs	r3, #2
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e013      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e010      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b80      	cmp	r3, #128	@ 0x80
 8002282:	d902      	bls.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002284:	2303      	movs	r3, #3
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e00a      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b80      	cmp	r3, #128	@ 0x80
 800228e:	d102      	bne.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002290:	2302      	movs	r3, #2
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e004      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b70      	cmp	r3, #112	@ 0x70
 800229a:	d101      	bne.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800229c:	2301      	movs	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 0207 	bic.w	r2, r3, #7
 80022a8:	4909      	ldr	r1, [pc, #36]	@ (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d001      	beq.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40022000 	.word	0x40022000

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022dc:	2300      	movs	r3, #0
 80022de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e0:	2300      	movs	r3, #0
 80022e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022f8:	d01a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022fe:	d814      	bhi.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002304:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002308:	d10f      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800230a:	4b5d      	ldr	r3, [pc, #372]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	4a5c      	ldr	r2, [pc, #368]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002314:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002316:	e00c      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f9f0 	bl	8002704 <RCCEx_PLLSAI1_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002328:	e003      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	74fb      	strb	r3, [r7, #19]
      break;
 800232e:	e000      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002338:	4b51      	ldr	r3, [pc, #324]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	494e      	ldr	r1, [pc, #312]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800234e:	e001      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 809e 	beq.w	800249e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002366:	4b46      	ldr	r3, [pc, #280]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b40      	ldr	r3, [pc, #256]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	4a3f      	ldr	r2, [pc, #252]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	@ 0x58
 8002388:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002394:	2301      	movs	r3, #1
 8002396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002398:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a39      	ldr	r2, [pc, #228]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fc48 	bl	8000c38 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023aa:	e009      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7fe fc44 	bl	8000c38 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d902      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	74fb      	strb	r3, [r7, #19]
        break;
 80023be:	e005      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c0:	4b30      	ldr	r3, [pc, #192]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ef      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d15a      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01e      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d019      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023ee:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023fa:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002400:	4a1f      	ldr	r2, [pc, #124]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800240a:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002410:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800241a:	4a19      	ldr	r2, [pc, #100]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d016      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fc04 	bl	8000c38 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002432:	e00b      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fc00 	bl	8000c38 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d902      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	74fb      	strb	r3, [r7, #19]
            break;
 800244a:	e006      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ec      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002460:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002466:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	4904      	ldr	r1, [pc, #16]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002476:	e009      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
 800247c:	e006      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248c:	7c7b      	ldrb	r3, [r7, #17]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b9b      	ldr	r3, [pc, #620]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	4a9a      	ldr	r2, [pc, #616]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024aa:	4b95      	ldr	r3, [pc, #596]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b0:	f023 0203 	bic.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4991      	ldr	r1, [pc, #580]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f023 020c 	bic.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	4989      	ldr	r1, [pc, #548]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ee:	4b84      	ldr	r3, [pc, #528]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	4980      	ldr	r1, [pc, #512]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002510:	4b7b      	ldr	r3, [pc, #492]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002516:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	4978      	ldr	r1, [pc, #480]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002532:	4b73      	ldr	r3, [pc, #460]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002538:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002540:	496f      	ldr	r1, [pc, #444]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002554:	4b6a      	ldr	r3, [pc, #424]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4967      	ldr	r1, [pc, #412]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002576:	4b62      	ldr	r3, [pc, #392]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	495e      	ldr	r1, [pc, #376]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002598:	4b59      	ldr	r3, [pc, #356]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a6:	4956      	ldr	r1, [pc, #344]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ba:	4b51      	ldr	r3, [pc, #324]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	494d      	ldr	r1, [pc, #308]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d028      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025dc:	4b48      	ldr	r3, [pc, #288]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ea:	4945      	ldr	r1, [pc, #276]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025fa:	d106      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025fc:	4b40      	ldr	r3, [pc, #256]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a3f      	ldr	r2, [pc, #252]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002606:	60d3      	str	r3, [r2, #12]
 8002608:	e011      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002612:	d10c      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f872 	bl	8002704 <RCCEx_PLLSAI1_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d028      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800263a:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002648:	492d      	ldr	r1, [pc, #180]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002658:	d106      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800265a:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	4a28      	ldr	r2, [pc, #160]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002660:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002664:	60d3      	str	r3, [r2, #12]
 8002666:	e011      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002670:	d10c      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f843 	bl	8002704 <RCCEx_PLLSAI1_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01c      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002698:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a6:	4916      	ldr	r1, [pc, #88]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	2102      	movs	r1, #2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f820 	bl	8002704 <RCCEx_PLLSAI1_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	4904      	ldr	r1, [pc, #16]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002712:	4b74      	ldr	r3, [pc, #464]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d018      	beq.n	8002750 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800271e:	4b71      	ldr	r3, [pc, #452]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d10d      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
       ||
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002736:	4b6b      	ldr	r3, [pc, #428]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
       ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d047      	beq.n	80027da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e044      	b.n	80027da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d018      	beq.n	800278a <RCCEx_PLLSAI1_Config+0x86>
 8002758:	2b03      	cmp	r3, #3
 800275a:	d825      	bhi.n	80027a8 <RCCEx_PLLSAI1_Config+0xa4>
 800275c:	2b01      	cmp	r3, #1
 800275e:	d002      	beq.n	8002766 <RCCEx_PLLSAI1_Config+0x62>
 8002760:	2b02      	cmp	r3, #2
 8002762:	d009      	beq.n	8002778 <RCCEx_PLLSAI1_Config+0x74>
 8002764:	e020      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002766:	4b5f      	ldr	r3, [pc, #380]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11d      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002776:	e01a      	b.n	80027ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002778:	4b5a      	ldr	r3, [pc, #360]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e013      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800278a:	4b56      	ldr	r3, [pc, #344]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002796:	4b53      	ldr	r3, [pc, #332]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027a6:	e006      	b.n	80027b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e004      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027be:	4b49      	ldr	r3, [pc, #292]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	430b      	orrs	r3, r1
 80027d4:	4943      	ldr	r1, [pc, #268]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d17c      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027e0:	4b40      	ldr	r3, [pc, #256]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3f      	ldr	r2, [pc, #252]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fa24 	bl	8000c38 <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027f2:	e009      	b.n	8002808 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027f4:	f7fe fa20 	bl	8000c38 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d902      	bls.n	8002808 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	73fb      	strb	r3, [r7, #15]
        break;
 8002806:	e005      	b.n	8002814 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ef      	bne.n	80027f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d15f      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d110      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002820:	4b30      	ldr	r3, [pc, #192]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002828:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	0211      	lsls	r1, r2, #8
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	06d2      	lsls	r2, r2, #27
 8002838:	430a      	orrs	r2, r1
 800283a:	492a      	ldr	r1, [pc, #168]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	610b      	str	r3, [r1, #16]
 8002840:	e027      	b.n	8002892 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d112      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002848:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002850:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6892      	ldr	r2, [r2, #8]
 8002858:	0211      	lsls	r1, r2, #8
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6912      	ldr	r2, [r2, #16]
 800285e:	0852      	lsrs	r2, r2, #1
 8002860:	3a01      	subs	r2, #1
 8002862:	0552      	lsls	r2, r2, #21
 8002864:	430a      	orrs	r2, r1
 8002866:	491f      	ldr	r1, [pc, #124]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	610b      	str	r3, [r1, #16]
 800286c:	e011      	b.n	8002892 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800286e:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002876:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6892      	ldr	r2, [r2, #8]
 800287e:	0211      	lsls	r1, r2, #8
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6952      	ldr	r2, [r2, #20]
 8002884:	0852      	lsrs	r2, r2, #1
 8002886:	3a01      	subs	r2, #1
 8002888:	0652      	lsls	r2, r2, #25
 800288a:	430a      	orrs	r2, r1
 800288c:	4915      	ldr	r1, [pc, #84]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002892:	4b14      	ldr	r3, [pc, #80]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a13      	ldr	r2, [pc, #76]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002898:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800289c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe f9cb 	bl	8000c38 <HAL_GetTick>
 80028a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028a4:	e009      	b.n	80028ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a6:	f7fe f9c7 	bl	8000c38 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d902      	bls.n	80028ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	73fb      	strb	r3, [r7, #15]
          break;
 80028b8:	e005      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ef      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4903      	ldr	r1, [pc, #12]	@ (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e040      	b.n	800297c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe f824 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	@ 0x24
 8002914:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa82 	bl	8002e38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f825 	bl	8002984 <UART_SetConfig>
 800293a:	4603      	mov	r3, r0
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e01b      	b.n	800297c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002952:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002962:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fb01 	bl	8002f7c <UART_CheckIdleState>
 800297a:	4603      	mov	r3, r0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002988:	b08a      	sub	sp, #40	@ 0x28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	431a      	orrs	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b9e      	ldr	r3, [pc, #632]	@ (8002c2c <UART_SetConfig+0x2a8>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029bc:	430b      	orrs	r3, r1
 80029be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a93      	ldr	r2, [pc, #588]	@ (8002c30 <UART_SetConfig+0x2ac>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ec:	4313      	orrs	r3, r2
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a8a      	ldr	r2, [pc, #552]	@ (8002c34 <UART_SetConfig+0x2b0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d126      	bne.n	8002a5c <UART_SetConfig+0xd8>
 8002a0e:	4b8a      	ldr	r3, [pc, #552]	@ (8002c38 <UART_SetConfig+0x2b4>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d81b      	bhi.n	8002a54 <UART_SetConfig+0xd0>
 8002a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <UART_SetConfig+0xa0>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a45 	.word	0x08002a45
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002a4d 	.word	0x08002a4d
 8002a34:	2301      	movs	r3, #1
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3a:	e0ab      	b.n	8002b94 <UART_SetConfig+0x210>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a42:	e0a7      	b.n	8002b94 <UART_SetConfig+0x210>
 8002a44:	2304      	movs	r3, #4
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4a:	e0a3      	b.n	8002b94 <UART_SetConfig+0x210>
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a52:	e09f      	b.n	8002b94 <UART_SetConfig+0x210>
 8002a54:	2310      	movs	r3, #16
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a5a:	e09b      	b.n	8002b94 <UART_SetConfig+0x210>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a76      	ldr	r2, [pc, #472]	@ (8002c3c <UART_SetConfig+0x2b8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d138      	bne.n	8002ad8 <UART_SetConfig+0x154>
 8002a66:	4b74      	ldr	r3, [pc, #464]	@ (8002c38 <UART_SetConfig+0x2b4>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	d82d      	bhi.n	8002ad0 <UART_SetConfig+0x14c>
 8002a74:	a201      	add	r2, pc, #4	@ (adr r2, 8002a7c <UART_SetConfig+0xf8>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002ad1 	.word	0x08002ad1
 8002a84:	08002ad1 	.word	0x08002ad1
 8002a88:	08002ad1 	.word	0x08002ad1
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002ad1 	.word	0x08002ad1
 8002a94:	08002ad1 	.word	0x08002ad1
 8002a98:	08002ad1 	.word	0x08002ad1
 8002a9c:	08002ab9 	.word	0x08002ab9
 8002aa0:	08002ad1 	.word	0x08002ad1
 8002aa4:	08002ad1 	.word	0x08002ad1
 8002aa8:	08002ad1 	.word	0x08002ad1
 8002aac:	08002ac9 	.word	0x08002ac9
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab6:	e06d      	b.n	8002b94 <UART_SetConfig+0x210>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abe:	e069      	b.n	8002b94 <UART_SetConfig+0x210>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac6:	e065      	b.n	8002b94 <UART_SetConfig+0x210>
 8002ac8:	2308      	movs	r3, #8
 8002aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ace:	e061      	b.n	8002b94 <UART_SetConfig+0x210>
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad6:	e05d      	b.n	8002b94 <UART_SetConfig+0x210>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a58      	ldr	r2, [pc, #352]	@ (8002c40 <UART_SetConfig+0x2bc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d125      	bne.n	8002b2e <UART_SetConfig+0x1aa>
 8002ae2:	4b55      	ldr	r3, [pc, #340]	@ (8002c38 <UART_SetConfig+0x2b4>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002aec:	2b30      	cmp	r3, #48	@ 0x30
 8002aee:	d016      	beq.n	8002b1e <UART_SetConfig+0x19a>
 8002af0:	2b30      	cmp	r3, #48	@ 0x30
 8002af2:	d818      	bhi.n	8002b26 <UART_SetConfig+0x1a2>
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d00a      	beq.n	8002b0e <UART_SetConfig+0x18a>
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d814      	bhi.n	8002b26 <UART_SetConfig+0x1a2>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <UART_SetConfig+0x182>
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d008      	beq.n	8002b16 <UART_SetConfig+0x192>
 8002b04:	e00f      	b.n	8002b26 <UART_SetConfig+0x1a2>
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0c:	e042      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b14:	e03e      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b16:	2304      	movs	r3, #4
 8002b18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1c:	e03a      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b1e:	2308      	movs	r3, #8
 8002b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b24:	e036      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b26:	2310      	movs	r3, #16
 8002b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b2c:	e032      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3f      	ldr	r2, [pc, #252]	@ (8002c30 <UART_SetConfig+0x2ac>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d12a      	bne.n	8002b8e <UART_SetConfig+0x20a>
 8002b38:	4b3f      	ldr	r3, [pc, #252]	@ (8002c38 <UART_SetConfig+0x2b4>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b46:	d01a      	beq.n	8002b7e <UART_SetConfig+0x1fa>
 8002b48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b4c:	d81b      	bhi.n	8002b86 <UART_SetConfig+0x202>
 8002b4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b52:	d00c      	beq.n	8002b6e <UART_SetConfig+0x1ea>
 8002b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b58:	d815      	bhi.n	8002b86 <UART_SetConfig+0x202>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <UART_SetConfig+0x1e2>
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	d008      	beq.n	8002b76 <UART_SetConfig+0x1f2>
 8002b64:	e00f      	b.n	8002b86 <UART_SetConfig+0x202>
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b6c:	e012      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b74:	e00e      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b76:	2304      	movs	r3, #4
 8002b78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b7c:	e00a      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b7e:	2308      	movs	r3, #8
 8002b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b84:	e006      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b86:	2310      	movs	r3, #16
 8002b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b8c:	e002      	b.n	8002b94 <UART_SetConfig+0x210>
 8002b8e:	2310      	movs	r3, #16
 8002b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a25      	ldr	r2, [pc, #148]	@ (8002c30 <UART_SetConfig+0x2ac>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	f040 808a 	bne.w	8002cb4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d824      	bhi.n	8002bf2 <UART_SetConfig+0x26e>
 8002ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <UART_SetConfig+0x22c>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002bf3 	.word	0x08002bf3
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002bf3 	.word	0x08002bf3
 8002bc0:	08002be3 	.word	0x08002be3
 8002bc4:	08002bf3 	.word	0x08002bf3
 8002bc8:	08002bf3 	.word	0x08002bf3
 8002bcc:	08002bf3 	.word	0x08002bf3
 8002bd0:	08002beb 	.word	0x08002beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f7ff faf2 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8002bd8:	61f8      	str	r0, [r7, #28]
        break;
 8002bda:	e010      	b.n	8002bfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <UART_SetConfig+0x2c0>)
 8002bde:	61fb      	str	r3, [r7, #28]
        break;
 8002be0:	e00d      	b.n	8002bfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002be2:	f7ff fa53 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002be6:	61f8      	str	r0, [r7, #28]
        break;
 8002be8:	e009      	b.n	8002bfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bee:	61fb      	str	r3, [r7, #28]
        break;
 8002bf0:	e005      	b.n	8002bfe <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8109 	beq.w	8002e18 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d305      	bcc.n	8002c22 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d912      	bls.n	8002c48 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c28:	e0f6      	b.n	8002e18 <UART_SetConfig+0x494>
 8002c2a:	bf00      	nop
 8002c2c:	efff69f3 	.word	0xefff69f3
 8002c30:	40008000 	.word	0x40008000
 8002c34:	40013800 	.word	0x40013800
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	40004800 	.word	0x40004800
 8002c44:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	461c      	mov	r4, r3
 8002c4e:	4615      	mov	r5, r2
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	022b      	lsls	r3, r5, #8
 8002c5a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c5e:	0222      	lsls	r2, r4, #8
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	6849      	ldr	r1, [r1, #4]
 8002c64:	0849      	lsrs	r1, r1, #1
 8002c66:	2000      	movs	r0, #0
 8002c68:	4688      	mov	r8, r1
 8002c6a:	4681      	mov	r9, r0
 8002c6c:	eb12 0a08 	adds.w	sl, r2, r8
 8002c70:	eb43 0b09 	adc.w	fp, r3, r9
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c82:	4650      	mov	r0, sl
 8002c84:	4659      	mov	r1, fp
 8002c86:	f7fd faa1 	bl	80001cc <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c98:	d308      	bcc.n	8002cac <UART_SetConfig+0x328>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ca0:	d204      	bcs.n	8002cac <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	e0b5      	b.n	8002e18 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cb2:	e0b1      	b.n	8002e18 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cbc:	d15d      	bne.n	8002d7a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d827      	bhi.n	8002d16 <UART_SetConfig+0x392>
 8002cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ccc <UART_SetConfig+0x348>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002cf1 	.word	0x08002cf1
 8002cd0:	08002cf9 	.word	0x08002cf9
 8002cd4:	08002d01 	.word	0x08002d01
 8002cd8:	08002d17 	.word	0x08002d17
 8002cdc:	08002d07 	.word	0x08002d07
 8002ce0:	08002d17 	.word	0x08002d17
 8002ce4:	08002d17 	.word	0x08002d17
 8002ce8:	08002d17 	.word	0x08002d17
 8002cec:	08002d0f 	.word	0x08002d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf0:	f7ff fa64 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8002cf4:	61f8      	str	r0, [r7, #28]
        break;
 8002cf6:	e014      	b.n	8002d22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf8:	f7ff fa76 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8002cfc:	61f8      	str	r0, [r7, #28]
        break;
 8002cfe:	e010      	b.n	8002d22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d00:	4b4c      	ldr	r3, [pc, #304]	@ (8002e34 <UART_SetConfig+0x4b0>)
 8002d02:	61fb      	str	r3, [r7, #28]
        break;
 8002d04:	e00d      	b.n	8002d22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d06:	f7ff f9c1 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002d0a:	61f8      	str	r0, [r7, #28]
        break;
 8002d0c:	e009      	b.n	8002d22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d12:	61fb      	str	r3, [r7, #28]
        break;
 8002d14:	e005      	b.n	8002d22 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d077      	beq.n	8002e18 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005a      	lsls	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	441a      	add	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d916      	bls.n	8002d72 <UART_SetConfig+0x3ee>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d4a:	d212      	bcs.n	8002d72 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f023 030f 	bic.w	r3, r3, #15
 8002d54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	8afb      	ldrh	r3, [r7, #22]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	8afa      	ldrh	r2, [r7, #22]
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	e052      	b.n	8002e18 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d78:	e04e      	b.n	8002e18 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d827      	bhi.n	8002dd2 <UART_SetConfig+0x44e>
 8002d82:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <UART_SetConfig+0x404>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002dbd 	.word	0x08002dbd
 8002d94:	08002dd3 	.word	0x08002dd3
 8002d98:	08002dc3 	.word	0x08002dc3
 8002d9c:	08002dd3 	.word	0x08002dd3
 8002da0:	08002dd3 	.word	0x08002dd3
 8002da4:	08002dd3 	.word	0x08002dd3
 8002da8:	08002dcb 	.word	0x08002dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dac:	f7ff fa06 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8002db0:	61f8      	str	r0, [r7, #28]
        break;
 8002db2:	e014      	b.n	8002dde <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db4:	f7ff fa18 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8002db8:	61f8      	str	r0, [r7, #28]
        break;
 8002dba:	e010      	b.n	8002dde <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e34 <UART_SetConfig+0x4b0>)
 8002dbe:	61fb      	str	r3, [r7, #28]
        break;
 8002dc0:	e00d      	b.n	8002dde <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc2:	f7ff f963 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002dc6:	61f8      	str	r0, [r7, #28]
        break;
 8002dc8:	e009      	b.n	8002dde <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dce:	61fb      	str	r3, [r7, #28]
        break;
 8002dd0:	e005      	b.n	8002dde <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d019      	beq.n	8002e18 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	085a      	lsrs	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	441a      	add	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	d909      	bls.n	8002e12 <UART_SetConfig+0x48e>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e04:	d205      	bcs.n	8002e12 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	e002      	b.n	8002e18 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	@ 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop
 8002e34:	00f42400 	.word	0x00f42400

08002e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01a      	beq.n	8002f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f36:	d10a      	bne.n	8002f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
  }
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b098      	sub	sp, #96	@ 0x60
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f8c:	f7fd fe54 	bl	8000c38 <HAL_GetTick>
 8002f90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d12e      	bne.n	8002ffe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f88c 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d021      	beq.n	8002ffe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e6      	bne.n	8002fba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e062      	b.n	80030c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d149      	bne.n	80030a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800300c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003014:	2200      	movs	r2, #0
 8003016:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f856 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d03c      	beq.n	80030a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	623b      	str	r3, [r7, #32]
   return(result);
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800303a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003044:	633b      	str	r3, [r7, #48]	@ 0x30
 8003046:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800304a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e6      	bne.n	8003026 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3308      	adds	r3, #8
 800305e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	60fb      	str	r3, [r7, #12]
   return(result);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003078:	61fa      	str	r2, [r7, #28]
 800307a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	69b9      	ldr	r1, [r7, #24]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	617b      	str	r3, [r7, #20]
   return(result);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e011      	b.n	80030c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3758      	adds	r7, #88	@ 0x58
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030dc:	e04f      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d04b      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fd fda7 	bl	8000c38 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <UART_WaitOnFlagUntilTimeout+0x30>
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e04e      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d037      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b80      	cmp	r3, #128	@ 0x80
 8003112:	d034      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b40      	cmp	r3, #64	@ 0x40
 8003118:	d031      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d110      	bne.n	800314a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2208      	movs	r2, #8
 800312e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f838 	bl	80031a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2208      	movs	r2, #8
 800313a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e029      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003158:	d111      	bne.n	800317e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f81e 	bl	80031a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e00f      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	429a      	cmp	r2, r3
 800319a:	d0a0      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b095      	sub	sp, #84	@ 0x54
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e6      	bne.n	80031ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003218:	2b01      	cmp	r3, #1
 800321a:	d118      	bne.n	800324e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	60bb      	str	r3, [r7, #8]
   return(result);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f023 0310 	bic.w	r3, r3, #16
 8003230:	647b      	str	r3, [r7, #68]	@ 0x44
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	6979      	ldr	r1, [r7, #20]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	613b      	str	r3, [r7, #16]
   return(result);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e6      	bne.n	800321c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003262:	bf00      	nop
 8003264:	3754      	adds	r7, #84	@ 0x54
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <memset>:
 800326e:	4402      	add	r2, r0
 8003270:	4603      	mov	r3, r0
 8003272:	4293      	cmp	r3, r2
 8003274:	d100      	bne.n	8003278 <memset+0xa>
 8003276:	4770      	bx	lr
 8003278:	f803 1b01 	strb.w	r1, [r3], #1
 800327c:	e7f9      	b.n	8003272 <memset+0x4>
	...

08003280 <__libc_init_array>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4d0d      	ldr	r5, [pc, #52]	@ (80032b8 <__libc_init_array+0x38>)
 8003284:	4c0d      	ldr	r4, [pc, #52]	@ (80032bc <__libc_init_array+0x3c>)
 8003286:	1b64      	subs	r4, r4, r5
 8003288:	10a4      	asrs	r4, r4, #2
 800328a:	2600      	movs	r6, #0
 800328c:	42a6      	cmp	r6, r4
 800328e:	d109      	bne.n	80032a4 <__libc_init_array+0x24>
 8003290:	4d0b      	ldr	r5, [pc, #44]	@ (80032c0 <__libc_init_array+0x40>)
 8003292:	4c0c      	ldr	r4, [pc, #48]	@ (80032c4 <__libc_init_array+0x44>)
 8003294:	f000 f818 	bl	80032c8 <_init>
 8003298:	1b64      	subs	r4, r4, r5
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	2600      	movs	r6, #0
 800329e:	42a6      	cmp	r6, r4
 80032a0:	d105      	bne.n	80032ae <__libc_init_array+0x2e>
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a8:	4798      	blx	r3
 80032aa:	3601      	adds	r6, #1
 80032ac:	e7ee      	b.n	800328c <__libc_init_array+0xc>
 80032ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b2:	4798      	blx	r3
 80032b4:	3601      	adds	r6, #1
 80032b6:	e7f2      	b.n	800329e <__libc_init_array+0x1e>
 80032b8:	08003330 	.word	0x08003330
 80032bc:	08003330 	.word	0x08003330
 80032c0:	08003330 	.word	0x08003330
 80032c4:	08003334 	.word	0x08003334

080032c8 <_init>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	bf00      	nop
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr

080032d4 <_fini>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	bf00      	nop
 80032d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032da:	bc08      	pop	{r3}
 80032dc:	469e      	mov	lr, r3
 80032de:	4770      	bx	lr
