/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "usb_device.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define CMD_WREG        0x40
#define CMD_START       0x08
#define CMD_STOP        0x0A
#define CMD_RDATA       0x12

#define REG_INPMUX      0x02
#define REG_MODE        0x04  // as you asked: write 0x39 here
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint16_t soc = 80; //in % of full
uint16_t current1 = 0; //in mA
uint16_t current2 = 0; //in mA
uint16_t current3 = 0; //in mA
uint16_t totalCurrent = 0; //in A
uint16_t voltage = 0; //in volts
uint16_t currentPower = 0; //in Watts
uint16_t temp1 = 0;
uint16_t temp2 = 0;

ADS124_HandleTypeDef adc;

volatile uint8_t sendTelemetryFlag = 0;
int32_t results[6];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_SPI1_Init();
  MX_SPI2_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_USART1_UART_Init();
  MX_TIM4_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
//  ADS124_Init(&adc, &hspi2);
//  ADS124_SetDataRate(&adc, 0x06);
//  HAL_TIM_Base_Start_IT(&htim4);

//  uint8_t cmd[3] = { 0x20 | 0x04, 0x02, 0x00};
//  uint8_t rx[3];
//
//  volatile uint8_t reg04;
   {
          uint8_t hdr[2] = { CMD_WREG | REG_MODE, 0x00 }; // write 1 reg
          uint8_t val    = 0x39;
//          ADC_CS_LOW();
          HAL_SPI_Transmit(&hspi1, hdr, 2, HAL_MAX_DELAY);
          HAL_SPI_Transmit(&hspi1, &val, 1, HAL_MAX_DELAY);
//          ADC_CS_HIGH();
   }

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
//	  if (sendTelemetryFlag) {
//		  sendTelemetryFlag = 0;
//		  USB_SendTelemetry(totalCurrent, voltage, soc, temp1, temp2);
//	  }
//	  for (uint8_t ch = 0; ch < 6; ch++) {
//		  // pick channel
//		  ADS124_SelectChannel(&adc, ch);
//		  // start conversion
//		  ADS124_SendCommand(&adc, ADS124_CMD_START);
//
//		  // wait â‰¥1/400 s = 2.5 ms
//		  HAL_Delay(3);
//
//		  // read the 24-bit signed result
//		  ADS124_ReadConversion(&adc, &results[ch]);
//		  printf("CH%u = %ld\r\n", ch, results[ch]);
//
//		  // stop any further conversions until next START
//		  ADS124_SendCommand(&adc, ADS124_CMD_STOP);
//	  }

	  for (uint8_t ch = 0; ch < 6; ch++)
	  {
		  // a) select channel: INPMUX = P = AINch, N = AINCOM (0x09)
		  {
			  uint8_t hdr[2] = { CMD_WREG | REG_INPMUX, 0x00 };
			  uint8_t mux    = (ch << 4) | 0x09;
			  ADC_CS_LOW();
			  HAL_SPI_Transmit(&hspi1, hdr, 2, HAL_MAX_DELAY);
			  HAL_SPI_Transmit(&hspi1, &mux, 1, HAL_MAX_DELAY);
			  ADC_CS_HIGH();
		  }

		  // b) start one conversion
		  {
			  uint8_t cmd = CMD_START;
			  ADC_CS_LOW();
			  HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
			  ADC_CS_HIGH();
		  }

		  // c) wait conversion time (e.g. ~3 ms @ 400 SPS)
		  HAL_Delay(3);

		  // d) read the 24-bit result via RDATA
		  {
			  uint8_t cmd = CMD_RDATA;
			  uint8_t buf[3];
			  ADC_CS_LOW();
			  HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
			  HAL_SPI_Receive (&hspi1, buf, 3, HAL_MAX_DELAY);
			  ADC_CS_HIGH();

			  int32_t v = ((int32_t)buf[0] << 16)
						| ((int32_t)buf[1] <<  8)
						|  (int32_t)buf[2];
			  if (v & 0x800000) v |= 0xFF000000;  // sign-extend
			  results[ch] = v;
		  }

		  // e) stop (optional when doing single-shot)
		  {
			  uint8_t cmd = CMD_STOP;
			  ADC_CS_LOW();
			  HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
			  ADC_CS_HIGH();
		  }
	  }
	  volatile int bkpt = 0;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM4) {
        // read sensors & compute SOC

        // send over USB
//        USB_SendTelemetry(totalCurrent, voltage, soc, temp1, temp2);
//        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
        sendTelemetryFlag = 1;
    }
}

int fputc(int ch, FILE *f) {
  ITM_SendChar(ch);
  return ch;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
