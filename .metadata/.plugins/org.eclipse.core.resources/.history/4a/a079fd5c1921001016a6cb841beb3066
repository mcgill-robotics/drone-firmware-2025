// --- ads124s06.h ---
#ifndef ADS124S06_H
#define ADS124S06_H

#include "stm32f4xx_hal.h"
#include <stdint.h>

/* Command definitions (Table 24) */
#define ADS124_CMD_NOP        0x00
#define ADS124_CMD_WAKEUP     0x02
#define ADS124_CMD_POWERDOWN  0x04
#define ADS124_CMD_RESET      0x06
#define ADS124_CMD_START      0x08
#define ADS124_CMD_STOP       0x0A
#define ADS124_CMD_RDATA      0x12
#define ADS124_CMD_RREG       0x20
#define ADS124_CMD_WREG       0x40
#define ADS124_CMD_SYOCAL     0x16
#define ADS124_CMD_SYGCAL     0x17
#define ADS124_CMD_SFOCAL     0x19

/**
 * @brief ADS124S06 handle struct (no DRDY pin)
 */
typedef struct {
    SPI_HandleTypeDef *hspi;     // SPI interface
    GPIO_TypeDef      *cs_port;  // Chip-select port
    uint16_t           cs_pin;   // Chip-select pin
} ADS124_HandleTypeDef;

/**
 * @brief Initialize ADS124S06 (CS pin, SPI handle, hardware reset)
 */
void ADS124_Init(ADS124_HandleTypeDef *h,
                 SPI_HandleTypeDef *hspi,
                 GPIO_TypeDef *cs_port, uint16_t cs_pin);

/**
 * @brief Send a single-byte command (RESET, START, STOP, etc.)
 */
HAL_StatusTypeDef ADS124_SendCommand(ADS124_HandleTypeDef *h, uint8_t cmd);

/**
 * @brief Write n_regs starting at start_addr
 */
HAL_StatusTypeDef ADS124_WriteRegister(ADS124_HandleTypeDef *h,
                                       uint8_t start_addr,
                                       uint8_t *data, uint8_t n_regs);

/**
 * @brief Read n_regs starting at start_addr
 */
HAL_StatusTypeDef ADS124_ReadRegister(ADS124_HandleTypeDef *h,
                                      uint8_t start_addr,
                                      uint8_t *data, uint8_t n_regs);

/**
 * @brief Read a single 24-bit conversion via RDATA (no DRDY polling)
 * @note Caller must ensure conversion is complete (e.g. fixed delay after START)
 */
HAL_StatusTypeDef ADS124_ReadConversion(ADS124_HandleTypeDef *h, int32_t *out);

/**
 * @brief Hardware reset via RESET command + delay
 */
HAL_StatusTypeDef ADS124_Reset(ADS124_HandleTypeDef *h);

#endif /* ADS124S06_H */


// --- ads124s06.c ---
#include "ads124s06.h"

static void ADS124_Select(ADS124_HandleTypeDef *h) {
    HAL_GPIO_WritePin(h->cs_port, h->cs_pin, GPIO_PIN_RESET);
}
static void ADS124_Unselect(ADS124_HandleTypeDef *h) {
    HAL_GPIO_WritePin(h->cs_port, h->cs_pin, GPIO_PIN_SET);
}

void ADS124_Init(ADS124_HandleTypeDef *h,
                 SPI_HandleTypeDef *hspi,
                 GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
    h->hspi    = hspi;
    h->cs_port = cs_port;
    h->cs_pin  = cs_pin;
    ADS124_Unselect(h);
    // hardware reset
    ADS124_SendCommand(h, ADS124_CMD_RESET);
    HAL_Delay(1); // > td(RSSC)
}

HAL_StatusTypeDef ADS124_SendCommand(ADS124_HandleTypeDef *h, uint8_t cmd)
{
    ADS124_Select(h);
    HAL_StatusTypeDef st = HAL_SPI_Transmit(h->hspi, &cmd, 1, HAL_MAX_DELAY);
    ADS124_Unselect(h);
    return st;
}

HAL_StatusTypeDef ADS124_WriteRegister(ADS124_HandleTypeDef *h,
                                       uint8_t start_addr,
                                       uint8_t *data, uint8_t n_regs)
{
    uint8_t hdr[2] = { ADS124_CMD_WREG | (start_addr & 0x0F), n_regs-1 };
    ADS124_Select(h);
    HAL_StatusTypeDef st = HAL_SPI_Transmit(h->hspi, hdr, 2, HAL_MAX_DELAY);
    if (st == HAL_OK) st = HAL_SPI_Transmit(h->hspi, data, n_regs, HAL_MAX_DELAY);
    ADS124_Unselect(h);
    return st;
}

HAL_StatusTypeDef ADS124_ReadRegister(ADS124_HandleTypeDef *h,
                                      uint8_t start_addr,
                                      uint8_t *data, uint8_t n_regs)
{
    uint8_t hdr[2] = { ADS124_CMD_RREG | (start_addr & 0x0F), n_regs-1 };
    ADS124_Select(h);
    HAL_StatusTypeDef st = HAL_SPI_Transmit(h->hspi, hdr, 2, HAL_MAX_DELAY);
    if (st == HAL_OK) st = HAL_SPI_Receive(h->hspi, data, n_regs, HAL_MAX_DELAY);
    ADS124_Unselect(h);
    return st;
}

HAL_StatusTypeDef ADS124_ReadConversion(ADS124_HandleTypeDef *h, int32_t *out)
{
    uint8_t cmd = ADS124_CMD_RDATA;
    ADS124_Select(h);
    HAL_StatusTypeDef st = HAL_SPI_Transmit(h->hspi, &cmd, 1, HAL_MAX_DELAY);
    if (st != HAL_OK) { ADS124_Unselect(h); return st; }
    uint8_t buf[3];
    st = HAL_SPI_Receive(h->hspi, buf, 3, HAL_MAX_DELAY);
    ADS124_Unselect(h);
    if (st != HAL_OK) return st;
    int32_t val = ((int32_t)buf[0] << 16) |
                  ((int32_t)buf[1] <<  8) |
                  ((int32_t)buf[2]      );
    if (val & 0x800000) val |= 0xFF000000;
    *out = val;
    return HAL_OK;
}

HAL_StatusTypeDef ADS124_Reset(ADS124_HandleTypeDef *h)
{
    HAL_StatusTypeDef st = ADS124_SendCommand(h, ADS124_CMD_RESET);
    HAL_Delay(1);
    return st;
}

