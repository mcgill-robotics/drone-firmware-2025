
drone_power_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004364  08004364  00005364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ac  080043ac  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080043ac  080043ac  000053ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b4  080043b4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b4  080043b4  000053b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080043bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  080043c8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080043c8  000061c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f112  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ba  00000000  00000000  0001514e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00017208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2e  00000000  00000000  00017f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fae3  00000000  00000000  00018956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109ca  00000000  00000000  00038439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9401  00000000  00000000  00048e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d4  00000000  00000000  00112248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00115a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800434c 	.word	0x0800434c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800434c 	.word	0x0800434c

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	@ 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_d2uiz>:
 8000544:	004a      	lsls	r2, r1, #1
 8000546:	d211      	bcs.n	800056c <__aeabi_d2uiz+0x28>
 8000548:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800054c:	d211      	bcs.n	8000572 <__aeabi_d2uiz+0x2e>
 800054e:	d50d      	bpl.n	800056c <__aeabi_d2uiz+0x28>
 8000550:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000554:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000558:	d40e      	bmi.n	8000578 <__aeabi_d2uiz+0x34>
 800055a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000562:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000566:	fa23 f002 	lsr.w	r0, r3, r2
 800056a:	4770      	bx	lr
 800056c:	f04f 0000 	mov.w	r0, #0
 8000570:	4770      	bx	lr
 8000572:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000576:	d102      	bne.n	800057e <__aeabi_d2uiz+0x3a>
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	4770      	bx	lr
 800057e:	f04f 0000 	mov.w	r0, #0
 8000582:	4770      	bx	lr

08000584 <__aeabi_d2f>:
 8000584:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000588:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800058c:	bf24      	itt	cs
 800058e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000592:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000596:	d90d      	bls.n	80005b4 <__aeabi_d2f+0x30>
 8000598:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800059c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005ac:	bf08      	it	eq
 80005ae:	f020 0001 	biceq.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b8:	d121      	bne.n	80005fe <__aeabi_d2f+0x7a>
 80005ba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005be:	bfbc      	itt	lt
 80005c0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c4:	4770      	bxlt	lr
 80005c6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ce:	f1c2 0218 	rsb	r2, r2, #24
 80005d2:	f1c2 0c20 	rsb	ip, r2, #32
 80005d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	bf18      	it	ne
 80005e0:	f040 0001 	orrne.w	r0, r0, #1
 80005e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005f0:	ea40 000c 	orr.w	r0, r0, ip
 80005f4:	fa23 f302 	lsr.w	r3, r3, r2
 80005f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005fc:	e7cc      	b.n	8000598 <__aeabi_d2f+0x14>
 80005fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000602:	d107      	bne.n	8000614 <__aeabi_d2f+0x90>
 8000604:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000608:	bf1e      	ittt	ne
 800060a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000612:	4770      	bxne	lr
 8000614:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000618:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800061c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <__aeabi_uldivmod>:
 8000624:	b953      	cbnz	r3, 800063c <__aeabi_uldivmod+0x18>
 8000626:	b94a      	cbnz	r2, 800063c <__aeabi_uldivmod+0x18>
 8000628:	2900      	cmp	r1, #0
 800062a:	bf08      	it	eq
 800062c:	2800      	cmpeq	r0, #0
 800062e:	bf1c      	itt	ne
 8000630:	f04f 31ff 	movne.w	r1, #4294967295
 8000634:	f04f 30ff 	movne.w	r0, #4294967295
 8000638:	f000 b96a 	b.w	8000910 <__aeabi_idiv0>
 800063c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000640:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000644:	f000 f806 	bl	8000654 <__udivmoddi4>
 8000648:	f8dd e004 	ldr.w	lr, [sp, #4]
 800064c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000650:	b004      	add	sp, #16
 8000652:	4770      	bx	lr

08000654 <__udivmoddi4>:
 8000654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000658:	9d08      	ldr	r5, [sp, #32]
 800065a:	460c      	mov	r4, r1
 800065c:	2b00      	cmp	r3, #0
 800065e:	d14e      	bne.n	80006fe <__udivmoddi4+0xaa>
 8000660:	4694      	mov	ip, r2
 8000662:	458c      	cmp	ip, r1
 8000664:	4686      	mov	lr, r0
 8000666:	fab2 f282 	clz	r2, r2
 800066a:	d962      	bls.n	8000732 <__udivmoddi4+0xde>
 800066c:	b14a      	cbz	r2, 8000682 <__udivmoddi4+0x2e>
 800066e:	f1c2 0320 	rsb	r3, r2, #32
 8000672:	4091      	lsls	r1, r2
 8000674:	fa20 f303 	lsr.w	r3, r0, r3
 8000678:	fa0c fc02 	lsl.w	ip, ip, r2
 800067c:	4319      	orrs	r1, r3
 800067e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000682:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000686:	fa1f f68c 	uxth.w	r6, ip
 800068a:	fbb1 f4f7 	udiv	r4, r1, r7
 800068e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000692:	fb07 1114 	mls	r1, r7, r4, r1
 8000696:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069a:	fb04 f106 	mul.w	r1, r4, r6
 800069e:	4299      	cmp	r1, r3
 80006a0:	d90a      	bls.n	80006b8 <__udivmoddi4+0x64>
 80006a2:	eb1c 0303 	adds.w	r3, ip, r3
 80006a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80006aa:	f080 8112 	bcs.w	80008d2 <__udivmoddi4+0x27e>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 810f 	bls.w	80008d2 <__udivmoddi4+0x27e>
 80006b4:	3c02      	subs	r4, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	1a59      	subs	r1, r3, r1
 80006ba:	fa1f f38e 	uxth.w	r3, lr
 80006be:	fbb1 f0f7 	udiv	r0, r1, r7
 80006c2:	fb07 1110 	mls	r1, r7, r0, r1
 80006c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ca:	fb00 f606 	mul.w	r6, r0, r6
 80006ce:	429e      	cmp	r6, r3
 80006d0:	d90a      	bls.n	80006e8 <__udivmoddi4+0x94>
 80006d2:	eb1c 0303 	adds.w	r3, ip, r3
 80006d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80006da:	f080 80fc 	bcs.w	80008d6 <__udivmoddi4+0x282>
 80006de:	429e      	cmp	r6, r3
 80006e0:	f240 80f9 	bls.w	80008d6 <__udivmoddi4+0x282>
 80006e4:	4463      	add	r3, ip
 80006e6:	3802      	subs	r0, #2
 80006e8:	1b9b      	subs	r3, r3, r6
 80006ea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ee:	2100      	movs	r1, #0
 80006f0:	b11d      	cbz	r5, 80006fa <__udivmoddi4+0xa6>
 80006f2:	40d3      	lsrs	r3, r2
 80006f4:	2200      	movs	r2, #0
 80006f6:	e9c5 3200 	strd	r3, r2, [r5]
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d905      	bls.n	800070e <__udivmoddi4+0xba>
 8000702:	b10d      	cbz	r5, 8000708 <__udivmoddi4+0xb4>
 8000704:	e9c5 0100 	strd	r0, r1, [r5]
 8000708:	2100      	movs	r1, #0
 800070a:	4608      	mov	r0, r1
 800070c:	e7f5      	b.n	80006fa <__udivmoddi4+0xa6>
 800070e:	fab3 f183 	clz	r1, r3
 8000712:	2900      	cmp	r1, #0
 8000714:	d146      	bne.n	80007a4 <__udivmoddi4+0x150>
 8000716:	42a3      	cmp	r3, r4
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0xcc>
 800071a:	4290      	cmp	r0, r2
 800071c:	f0c0 80f0 	bcc.w	8000900 <__udivmoddi4+0x2ac>
 8000720:	1a86      	subs	r6, r0, r2
 8000722:	eb64 0303 	sbc.w	r3, r4, r3
 8000726:	2001      	movs	r0, #1
 8000728:	2d00      	cmp	r5, #0
 800072a:	d0e6      	beq.n	80006fa <__udivmoddi4+0xa6>
 800072c:	e9c5 6300 	strd	r6, r3, [r5]
 8000730:	e7e3      	b.n	80006fa <__udivmoddi4+0xa6>
 8000732:	2a00      	cmp	r2, #0
 8000734:	f040 8090 	bne.w	8000858 <__udivmoddi4+0x204>
 8000738:	eba1 040c 	sub.w	r4, r1, ip
 800073c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000740:	fa1f f78c 	uxth.w	r7, ip
 8000744:	2101      	movs	r1, #1
 8000746:	fbb4 f6f8 	udiv	r6, r4, r8
 800074a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074e:	fb08 4416 	mls	r4, r8, r6, r4
 8000752:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000756:	fb07 f006 	mul.w	r0, r7, r6
 800075a:	4298      	cmp	r0, r3
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x11c>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f106 34ff 	add.w	r4, r6, #4294967295
 8000766:	d202      	bcs.n	800076e <__udivmoddi4+0x11a>
 8000768:	4298      	cmp	r0, r3
 800076a:	f200 80cd 	bhi.w	8000908 <__udivmoddi4+0x2b4>
 800076e:	4626      	mov	r6, r4
 8000770:	1a1c      	subs	r4, r3, r0
 8000772:	fa1f f38e 	uxth.w	r3, lr
 8000776:	fbb4 f0f8 	udiv	r0, r4, r8
 800077a:	fb08 4410 	mls	r4, r8, r0, r4
 800077e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000782:	fb00 f707 	mul.w	r7, r0, r7
 8000786:	429f      	cmp	r7, r3
 8000788:	d908      	bls.n	800079c <__udivmoddi4+0x148>
 800078a:	eb1c 0303 	adds.w	r3, ip, r3
 800078e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x146>
 8000794:	429f      	cmp	r7, r3
 8000796:	f200 80b0 	bhi.w	80008fa <__udivmoddi4+0x2a6>
 800079a:	4620      	mov	r0, r4
 800079c:	1bdb      	subs	r3, r3, r7
 800079e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007a2:	e7a5      	b.n	80006f0 <__udivmoddi4+0x9c>
 80007a4:	f1c1 0620 	rsb	r6, r1, #32
 80007a8:	408b      	lsls	r3, r1
 80007aa:	fa22 f706 	lsr.w	r7, r2, r6
 80007ae:	431f      	orrs	r7, r3
 80007b0:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b4:	fa04 f301 	lsl.w	r3, r4, r1
 80007b8:	ea43 030c 	orr.w	r3, r3, ip
 80007bc:	40f4      	lsrs	r4, r6
 80007be:	fa00 f801 	lsl.w	r8, r0, r1
 80007c2:	0c38      	lsrs	r0, r7, #16
 80007c4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c8:	fbb4 fef0 	udiv	lr, r4, r0
 80007cc:	fa1f fc87 	uxth.w	ip, r7
 80007d0:	fb00 441e 	mls	r4, r0, lr, r4
 80007d4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d8:	fb0e f90c 	mul.w	r9, lr, ip
 80007dc:	45a1      	cmp	r9, r4
 80007de:	fa02 f201 	lsl.w	r2, r2, r1
 80007e2:	d90a      	bls.n	80007fa <__udivmoddi4+0x1a6>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007ea:	f080 8084 	bcs.w	80008f6 <__udivmoddi4+0x2a2>
 80007ee:	45a1      	cmp	r9, r4
 80007f0:	f240 8081 	bls.w	80008f6 <__udivmoddi4+0x2a2>
 80007f4:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f8:	443c      	add	r4, r7
 80007fa:	eba4 0409 	sub.w	r4, r4, r9
 80007fe:	fa1f f983 	uxth.w	r9, r3
 8000802:	fbb4 f3f0 	udiv	r3, r4, r0
 8000806:	fb00 4413 	mls	r4, r0, r3, r4
 800080a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000812:	45a4      	cmp	ip, r4
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x1d2>
 8000816:	193c      	adds	r4, r7, r4
 8000818:	f103 30ff 	add.w	r0, r3, #4294967295
 800081c:	d267      	bcs.n	80008ee <__udivmoddi4+0x29a>
 800081e:	45a4      	cmp	ip, r4
 8000820:	d965      	bls.n	80008ee <__udivmoddi4+0x29a>
 8000822:	3b02      	subs	r3, #2
 8000824:	443c      	add	r4, r7
 8000826:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800082a:	fba0 9302 	umull	r9, r3, r0, r2
 800082e:	eba4 040c 	sub.w	r4, r4, ip
 8000832:	429c      	cmp	r4, r3
 8000834:	46ce      	mov	lr, r9
 8000836:	469c      	mov	ip, r3
 8000838:	d351      	bcc.n	80008de <__udivmoddi4+0x28a>
 800083a:	d04e      	beq.n	80008da <__udivmoddi4+0x286>
 800083c:	b155      	cbz	r5, 8000854 <__udivmoddi4+0x200>
 800083e:	ebb8 030e 	subs.w	r3, r8, lr
 8000842:	eb64 040c 	sbc.w	r4, r4, ip
 8000846:	fa04 f606 	lsl.w	r6, r4, r6
 800084a:	40cb      	lsrs	r3, r1
 800084c:	431e      	orrs	r6, r3
 800084e:	40cc      	lsrs	r4, r1
 8000850:	e9c5 6400 	strd	r6, r4, [r5]
 8000854:	2100      	movs	r1, #0
 8000856:	e750      	b.n	80006fa <__udivmoddi4+0xa6>
 8000858:	f1c2 0320 	rsb	r3, r2, #32
 800085c:	fa20 f103 	lsr.w	r1, r0, r3
 8000860:	fa0c fc02 	lsl.w	ip, ip, r2
 8000864:	fa24 f303 	lsr.w	r3, r4, r3
 8000868:	4094      	lsls	r4, r2
 800086a:	430c      	orrs	r4, r1
 800086c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000870:	fa00 fe02 	lsl.w	lr, r0, r2
 8000874:	fa1f f78c 	uxth.w	r7, ip
 8000878:	fbb3 f0f8 	udiv	r0, r3, r8
 800087c:	fb08 3110 	mls	r1, r8, r0, r3
 8000880:	0c23      	lsrs	r3, r4, #16
 8000882:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000886:	fb00 f107 	mul.w	r1, r0, r7
 800088a:	4299      	cmp	r1, r3
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x24c>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f100 36ff 	add.w	r6, r0, #4294967295
 8000896:	d22c      	bcs.n	80008f2 <__udivmoddi4+0x29e>
 8000898:	4299      	cmp	r1, r3
 800089a:	d92a      	bls.n	80008f2 <__udivmoddi4+0x29e>
 800089c:	3802      	subs	r0, #2
 800089e:	4463      	add	r3, ip
 80008a0:	1a5b      	subs	r3, r3, r1
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a8:	fb08 3311 	mls	r3, r8, r1, r3
 80008ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008b0:	fb01 f307 	mul.w	r3, r1, r7
 80008b4:	42a3      	cmp	r3, r4
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x276>
 80008b8:	eb1c 0404 	adds.w	r4, ip, r4
 80008bc:	f101 36ff 	add.w	r6, r1, #4294967295
 80008c0:	d213      	bcs.n	80008ea <__udivmoddi4+0x296>
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	d911      	bls.n	80008ea <__udivmoddi4+0x296>
 80008c6:	3902      	subs	r1, #2
 80008c8:	4464      	add	r4, ip
 80008ca:	1ae4      	subs	r4, r4, r3
 80008cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008d0:	e739      	b.n	8000746 <__udivmoddi4+0xf2>
 80008d2:	4604      	mov	r4, r0
 80008d4:	e6f0      	b.n	80006b8 <__udivmoddi4+0x64>
 80008d6:	4608      	mov	r0, r1
 80008d8:	e706      	b.n	80006e8 <__udivmoddi4+0x94>
 80008da:	45c8      	cmp	r8, r9
 80008dc:	d2ae      	bcs.n	800083c <__udivmoddi4+0x1e8>
 80008de:	ebb9 0e02 	subs.w	lr, r9, r2
 80008e2:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e6:	3801      	subs	r0, #1
 80008e8:	e7a8      	b.n	800083c <__udivmoddi4+0x1e8>
 80008ea:	4631      	mov	r1, r6
 80008ec:	e7ed      	b.n	80008ca <__udivmoddi4+0x276>
 80008ee:	4603      	mov	r3, r0
 80008f0:	e799      	b.n	8000826 <__udivmoddi4+0x1d2>
 80008f2:	4630      	mov	r0, r6
 80008f4:	e7d4      	b.n	80008a0 <__udivmoddi4+0x24c>
 80008f6:	46d6      	mov	lr, sl
 80008f8:	e77f      	b.n	80007fa <__udivmoddi4+0x1a6>
 80008fa:	4463      	add	r3, ip
 80008fc:	3802      	subs	r0, #2
 80008fe:	e74d      	b.n	800079c <__udivmoddi4+0x148>
 8000900:	4606      	mov	r6, r0
 8000902:	4623      	mov	r3, r4
 8000904:	4608      	mov	r0, r1
 8000906:	e70f      	b.n	8000728 <__udivmoddi4+0xd4>
 8000908:	3e02      	subs	r6, #2
 800090a:	4463      	add	r3, ip
 800090c:	e730      	b.n	8000770 <__udivmoddi4+0x11c>
 800090e:	bf00      	nop

08000910 <__aeabi_idiv0>:
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000918:	f000 fc47 	bl	80011aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091c:	f000 f820 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000920:	f000 f946 	bl	8000bb0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000924:	f000 f86e 	bl	8000a04 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000928:	f000 f8a2 	bl	8000a70 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800092c:	f000 f8e0 	bl	8000af0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000930:	f000 f90e 	bl	8000b50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  pca.hi2c = &hi2c1;
 8000934:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <main+0x40>)
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <main+0x44>)
 8000938:	601a      	str	r2, [r3, #0]
  pca.address = PCA9685_DEFAULT_ADDRESS;
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <main+0x40>)
 800093c:	2240      	movs	r2, #64	@ 0x40
 800093e:	711a      	strb	r2, [r3, #4]
  PCA9685_Init(&pca);
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <main+0x40>)
 8000942:	f000 f9db 	bl	8000cfc <PCA9685_Init>
  PCA9685_SetPWMFreq(&pca, 50);
 8000946:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800095c <main+0x48>
 800094a:	4802      	ldr	r0, [pc, #8]	@ (8000954 <main+0x40>)
 800094c:	f000 f9ec 	bl	8000d28 <PCA9685_SetPWMFreq>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <main+0x3c>
 8000954:	200001b4 	.word	0x200001b4
 8000958:	20000050 	.word	0x20000050
 800095c:	42480000 	.word	0x42480000

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b096      	sub	sp, #88	@ 0x58
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2244      	movs	r2, #68	@ 0x44
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fc79 	bl	8004266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000982:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000986:	f001 fe13 	bl	80025b0 <HAL_PWREx_ControlVoltageScaling>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000990:	f000 f95c 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000994:	2310      	movs	r3, #16
 8000996:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009a0:	2360      	movs	r3, #96	@ 0x60
 80009a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a4:	2302      	movs	r3, #2
 80009a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009a8:	2301      	movs	r3, #1
 80009aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009b0:	2328      	movs	r3, #40	@ 0x28
 80009b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b4:	2307      	movs	r3, #7
 80009b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fe49 	bl	800265c <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009d0:	f000 f93c 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d8:	2303      	movs	r3, #3
 80009da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	2104      	movs	r1, #4
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fa49 	bl	8002e84 <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009f8:	f000 f928 	bl	8000c4c <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3758      	adds	r7, #88	@ 0x58
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <MX_CAN1_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a10:	2205      	movs	r2, #5
 8000a12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a22:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000a26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a56:	f000 fc41 	bl	80012dc <HAL_CAN_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a60:	f000 f8f4 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000028 	.word	0x20000028
 8000a6c:	40006400 	.word	0x40006400

08000a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <MX_I2C1_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <MX_I2C1_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000aac:	f000 ff8a 	bl	80019c4 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 f8c9 	bl	8000c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000abe:	f001 fcd1 	bl	8002464 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 f8c0 	bl	8000c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000ad0:	f001 fd13 	bl	80024fa <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f8b7 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000050 	.word	0x20000050
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	10d19ce4 	.word	0x10d19ce4

08000af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000af6:	4a15      	ldr	r2, [pc, #84]	@ (8000b4c <MX_USART1_UART_Init+0x5c>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_USART1_UART_Init+0x58>)
 8000b34:	f002 fed4 	bl	80038e0 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b3e:	f000 f885 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000a4 	.word	0x200000a4
 8000b4c:	40013800 	.word	0x40013800

08000b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b56:	4a15      	ldr	r2, [pc, #84]	@ (8000bac <MX_USART2_UART_Init+0x5c>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b94:	f002 fea4 	bl	80038e0 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b9e:	f000 f855 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000012c 	.word	0x2000012c
 8000bac:	40004400 	.word	0x40004400

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <MX_GPIO_Init+0x98>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	4a1f      	ldr	r2, [pc, #124]	@ (8000c48 <MX_GPIO_Init+0x98>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <MX_GPIO_Init+0x98>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_GPIO_Init+0x98>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	4a19      	ldr	r2, [pc, #100]	@ (8000c48 <MX_GPIO_Init+0x98>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_GPIO_Init+0x98>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c00:	f000 fec8 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C3_Pin V3_Pin C2_Pin V2_Pin
                           C1_Pin V1_Pin */
  GPIO_InitStruct.Pin = C3_Pin|V3_Pin|C2_Pin|V2_Pin
 8000c04:	23f3      	movs	r3, #243	@ 0xf3
 8000c06:	60fb      	str	r3, [r7, #12]
                          |C1_Pin|V1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1a:	f000 fd41 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3a:	f000 fd31 	bl	80016a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <PCA9685_WriteReg>:
#include "math.h"

#include <stdint.h>

// I2C Write function
static void PCA9685_WriteReg(PCA9685_HandleTypeDef* pca, uint8_t reg, uint8_t value) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
 8000c64:	4613      	mov	r3, r2
 8000c66:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = {reg, value};
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	733b      	strb	r3, [r7, #12]
 8000c6c:	78bb      	ldrb	r3, [r7, #2]
 8000c6e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(pca->hi2c, (pca->address << 1), data, 2, HAL_MAX_DELAY);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	b299      	uxth	r1, r3
 8000c7c:	f107 020c 	add.w	r2, r7, #12
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2302      	movs	r3, #2
 8000c88:	f000 ff38 	bl	8001afc <HAL_I2C_Master_Transmit>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <PCA9685_ReadReg>:

// I2C Read function
static uint8_t PCA9685_ReadReg(PCA9685_HandleTypeDef* pca, uint8_t reg) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    HAL_I2C_Master_Transmit(pca->hi2c, (pca->address << 1), &reg, 1, HAL_MAX_DELAY);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b299      	uxth	r1, r3
 8000cac:	1cfa      	adds	r2, r7, #3
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f000 ff21 	bl	8001afc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pca->hi2c, (pca->address << 1), &value, 1, HAL_MAX_DELAY);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	791b      	ldrb	r3, [r3, #4]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	b299      	uxth	r1, r3
 8000cc6:	f107 020f 	add.w	r2, r7, #15
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f001 f82b 	bl	8001d2c <HAL_I2C_Master_Receive>
    return value;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <PCA9685_Reset>:

// Reset PCA9685
void PCA9685_Reset(PCA9685_HandleTypeDef* pca) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    PCA9685_WriteReg(pca, PCA9685_MODE1, 0x00); // Normal mode
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffb3 	bl	8000c58 <PCA9685_WriteReg>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <PCA9685_Init>:

// Initialize PCA9685
void PCA9685_Init(PCA9685_HandleTypeDef* pca) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    PCA9685_Reset(pca);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ffeb 	bl	8000ce0 <PCA9685_Reset>
    HAL_Delay(10); // Wait for reset
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f000 fac2 	bl	8001294 <HAL_Delay>
    PCA9685_SetPWMFreq(pca, 50); // Default 50Hz (for servos)
 8000d10:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8000d24 <PCA9685_Init+0x28>
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f807 	bl	8000d28 <PCA9685_SetPWMFreq>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	42480000 	.word	0x42480000

08000d28 <PCA9685_SetPWMFreq>:

// Set PWM Frequency
void PCA9685_SetPWMFreq(PCA9685_HandleTypeDef* pca, float freq) {
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	ed87 0a00 	vstr	s0, [r7]
	pca->freq = (freq < 0.0) ? freq * -1.0 : freq;
 8000d34:	edd7 7a00 	vldr	s15, [r7]
 8000d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d40:	d50d      	bpl.n	8000d5e <PCA9685_SetPWMFreq+0x36>
 8000d42:	6838      	ldr	r0, [r7, #0]
 8000d44:	f7ff fba6 	bl	8000494 <__aeabi_f2d>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000d52:	4620      	mov	r0, r4
 8000d54:	4629      	mov	r1, r5
 8000d56:	f7ff fc15 	bl	8000584 <__aeabi_d2f>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	e000      	b.n	8000d60 <PCA9685_SetPWMFreq+0x38>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6093      	str	r3, [r2, #8]
    uint8_t oldmode = PCA9685_ReadReg(pca, PCA9685_MODE1);
 8000d64:	2100      	movs	r1, #0
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff94 	bl	8000c94 <PCA9685_ReadReg>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
    uint8_t newmode = (oldmode & 0x7F) | 0x10; // Sleep mode
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	73bb      	strb	r3, [r7, #14]
    PCA9685_WriteReg(pca, PCA9685_MODE1, newmode);
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	461a      	mov	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff65 	bl	8000c58 <PCA9685_WriteReg>

    uint8_t prescale = (uint8_t)(round(25000000 / (4096 * pca->freq)) - 1);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d94:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000e10 <PCA9685_SetPWMFreq+0xe8>
 8000d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000e14 <PCA9685_SetPWMFreq+0xec>
 8000da0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000da4:	ee16 0a90 	vmov	r0, s13
 8000da8:	f7ff fb74 	bl	8000494 <__aeabi_f2d>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	ec43 2b10 	vmov	d0, r2, r3
 8000db4:	f003 fa84 	bl	80042c0 <round>
 8000db8:	ec51 0b10 	vmov	r0, r1, d0
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <PCA9685_SetPWMFreq+0xf0>)
 8000dc2:	f7ff fa07 	bl	80001d4 <__aeabi_dsub>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fbb9 	bl	8000544 <__aeabi_d2uiz>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	737b      	strb	r3, [r7, #13]
    PCA9685_WriteReg(pca, PCA9685_PRESCALE, prescale);
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	21fe      	movs	r1, #254	@ 0xfe
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff3b 	bl	8000c58 <PCA9685_WriteReg>
    PCA9685_WriteReg(pca, PCA9685_MODE1, oldmode);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	461a      	mov	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff35 	bl	8000c58 <PCA9685_WriteReg>
    HAL_Delay(5);
 8000dee:	2005      	movs	r0, #5
 8000df0:	f000 fa50 	bl	8001294 <HAL_Delay>
    PCA9685_WriteReg(pca, PCA9685_MODE1, oldmode | 0xA0); // Restart with auto-increment enabled
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <PCA9685_WriteReg>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	45800000 	.word	0x45800000
 8000e14:	4bbebc20 	.word	0x4bbebc20
 8000e18:	3ff00000 	.word	0x3ff00000

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <HAL_CAN_MspInit+0x80>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d129      	bne.n	8000eda <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <HAL_CAN_MspInit+0x84>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ee8 <HAL_CAN_MspInit+0x84>)
 8000e8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_CAN_MspInit+0x84>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_CAN_MspInit+0x84>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <HAL_CAN_MspInit+0x84>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <HAL_CAN_MspInit+0x84>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ec8:	2309      	movs	r3, #9
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed6:	f000 fbe3 	bl	80016a0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40006400 	.word	0x40006400
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0a0      	sub	sp, #128	@ 0x80
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	225c      	movs	r2, #92	@ 0x5c
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 f9aa 	bl	8004266 <memset>
  if(hi2c->Instance==I2C1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1e      	ldr	r2, [pc, #120]	@ (8000f90 <HAL_I2C_MspInit+0xa4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d135      	bne.n	8000f88 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f1c:	2340      	movs	r3, #64	@ 0x40
 8000f1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 f9cf 	bl	80032cc <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f34:	f7ff fe8a 	bl	8000c4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_I2C_MspInit+0xa8>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3c:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <HAL_I2C_MspInit+0xa8>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_I2C_MspInit+0xa8>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f50:	23c0      	movs	r3, #192	@ 0xc0
 8000f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f60:	2304      	movs	r3, #4
 8000f62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <HAL_I2C_MspInit+0xac>)
 8000f6c:	f000 fb98 	bl	80016a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <HAL_I2C_MspInit+0xa8>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f74:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <HAL_I2C_MspInit+0xa8>)
 8000f76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <HAL_I2C_MspInit+0xa8>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f88:	bf00      	nop
 8000f8a:	3780      	adds	r7, #128	@ 0x80
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0a2      	sub	sp, #136	@ 0x88
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	225c      	movs	r2, #92	@ 0x5c
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 f952 	bl	8004266 <memset>
  if(huart->Instance==USART1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a40      	ldr	r2, [pc, #256]	@ (80010c8 <HAL_UART_MspInit+0x12c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d13a      	bne.n	8001042 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 f977 	bl	80032cc <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fe4:	f7ff fe32 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe8:	4b38      	ldr	r3, [pc, #224]	@ (80010cc <HAL_UART_MspInit+0x130>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fec:	4a37      	ldr	r2, [pc, #220]	@ (80010cc <HAL_UART_MspInit+0x130>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff4:	4b35      	ldr	r3, [pc, #212]	@ (80010cc <HAL_UART_MspInit+0x130>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b32      	ldr	r3, [pc, #200]	@ (80010cc <HAL_UART_MspInit+0x130>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	4a31      	ldr	r2, [pc, #196]	@ (80010cc <HAL_UART_MspInit+0x130>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <HAL_UART_MspInit+0x130>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001018:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800101c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800102c:	2307      	movs	r3, #7
 800102e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103c:	f000 fb30 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001040:	e03d      	b.n	80010be <HAL_UART_MspInit+0x122>
  else if(huart->Instance==USART2)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a22      	ldr	r2, [pc, #136]	@ (80010d0 <HAL_UART_MspInit+0x134>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d138      	bne.n	80010be <HAL_UART_MspInit+0x122>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	4618      	mov	r0, r3
 800105a:	f002 f937 	bl	80032cc <HAL_RCCEx_PeriphCLKConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_UART_MspInit+0xcc>
      Error_Handler();
 8001064:	f7ff fdf2 	bl	8000c4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <HAL_UART_MspInit+0x130>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106c:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <HAL_UART_MspInit+0x130>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001072:	6593      	str	r3, [r2, #88]	@ 0x58
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_UART_MspInit+0x130>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_UART_MspInit+0x130>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001084:	4a11      	ldr	r2, [pc, #68]	@ (80010cc <HAL_UART_MspInit+0x130>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_UART_MspInit+0x130>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001098:	230c      	movs	r3, #12
 800109a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ba:	f000 faf1 	bl	80016a0 <HAL_GPIO_Init>
}
 80010be:	bf00      	nop
 80010c0:	3788      	adds	r7, #136	@ 0x88
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40004400 	.word	0x40004400

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <NMI_Handler+0x4>

080010dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <MemManage_Handler+0x4>

080010ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112a:	f000 f893 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001190 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800115c:	f7ff ffea 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <LoopForever+0x6>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <LoopForever+0xe>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <LoopForever+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f003 f877 	bl	8004278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118a:	f7ff fbc3 	bl	8000914 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001190:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800119c:	080043bc 	.word	0x080043bc
  ldr r2, =_sbss
 80011a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011a4:	200001c4 	.word	0x200001c4

080011a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_IRQHandler>

080011aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 fa3f 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f80e 	bl	80011dc <HAL_InitTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e001      	b.n	80011d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011cc:	f7ff fe26 	bl	8000e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d023      	beq.n	8001238 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f0:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_InitTick+0x70>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_InitTick+0x6c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fa3d 	bl	8001686 <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10f      	bne.n	8001232 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d809      	bhi.n	800122c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 fa15 	bl	800164e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001224:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <HAL_InitTick+0x74>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e007      	b.n	800123c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e004      	b.n	800123c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e001      	b.n	800123c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20000000 	.word	0x20000000
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	200001c0 	.word	0x200001c0

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200001c0 	.word	0x200001c0

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0ed      	b.n	80014ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fdb2 	bl	8000e64 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff ffb4 	bl	800127c <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001316:	e012      	b.n	800133e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001318:	f7ff ffb0 	bl	800127c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b0a      	cmp	r3, #10
 8001324:	d90b      	bls.n	800133e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2205      	movs	r2, #5
 8001336:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0c5      	b.n	80014ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0e5      	beq.n	8001318 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0202 	bic.w	r2, r2, #2
 800135a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff ff8e 	bl	800127c <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001362:	e012      	b.n	800138a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001364:	f7ff ff8a 	bl	800127c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b0a      	cmp	r3, #10
 8001370:	d90b      	bls.n	800138a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2205      	movs	r2, #5
 8001382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e09f      	b.n	80014ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e5      	bne.n	8001364 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7e1b      	ldrb	r3, [r3, #24]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d108      	bne.n	80013b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e007      	b.n	80013c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7e5b      	ldrb	r3, [r3, #25]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e007      	b.n	80013ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e9b      	ldrb	r3, [r3, #26]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0220 	orr.w	r2, r2, #32
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0220 	bic.w	r2, r2, #32
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7edb      	ldrb	r3, [r3, #27]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0210 	bic.w	r2, r2, #16
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e007      	b.n	8001440 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0210 	orr.w	r2, r2, #16
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7f1b      	ldrb	r3, [r3, #28]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d108      	bne.n	800145a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0208 	orr.w	r2, r2, #8
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e007      	b.n	800146a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0208 	bic.w	r2, r2, #8
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7f5b      	ldrb	r3, [r3, #29]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0204 	orr.w	r2, r2, #4
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e007      	b.n	8001494 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0204 	bic.w	r2, r2, #4
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	ea42 0103 	orr.w	r1, r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	@ (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	@ (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	@ 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff47 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff5c 	bl	800151c <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff8e 	bl	800158c <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffb0 	bl	80015f4 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e154      	b.n	800195a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8146 	beq.w	8001954 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d005      	beq.n	80016e0 <HAL_GPIO_Init+0x40>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d130      	bne.n	8001742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 0201 	and.w	r2, r3, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b03      	cmp	r3, #3
 800174c:	d017      	beq.n	800177e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d123      	bne.n	80017d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	6939      	ldr	r1, [r7, #16]
 80017ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0203 	and.w	r2, r3, #3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80a0 	beq.w	8001954 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001814:	4b58      	ldr	r3, [pc, #352]	@ (8001978 <HAL_GPIO_Init+0x2d8>)
 8001816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001818:	4a57      	ldr	r2, [pc, #348]	@ (8001978 <HAL_GPIO_Init+0x2d8>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001820:	4b55      	ldr	r3, [pc, #340]	@ (8001978 <HAL_GPIO_Init+0x2d8>)
 8001822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800182c:	4a53      	ldr	r2, [pc, #332]	@ (800197c <HAL_GPIO_Init+0x2dc>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001856:	d019      	beq.n	800188c <HAL_GPIO_Init+0x1ec>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a49      	ldr	r2, [pc, #292]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_GPIO_Init+0x1e8>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a48      	ldr	r2, [pc, #288]	@ (8001984 <HAL_GPIO_Init+0x2e4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e4>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a47      	ldr	r2, [pc, #284]	@ (8001988 <HAL_GPIO_Init+0x2e8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1e0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a46      	ldr	r2, [pc, #280]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1dc>
 8001878:	2304      	movs	r3, #4
 800187a:	e008      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 800187c:	2307      	movs	r3, #7
 800187e:	e006      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001880:	2303      	movs	r3, #3
 8001882:	e004      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001884:	2302      	movs	r3, #2
 8001886:	e002      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 800188c:	2300      	movs	r3, #0
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	f002 0203 	and.w	r2, r2, #3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4093      	lsls	r3, r2
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189e:	4937      	ldr	r1, [pc, #220]	@ (800197c <HAL_GPIO_Init+0x2dc>)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ac:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <HAL_GPIO_Init+0x2f0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001990 <HAL_GPIO_Init+0x2f0>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <HAL_GPIO_Init+0x2f0>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fa:	4a25      	ldr	r2, [pc, #148]	@ (8001990 <HAL_GPIO_Init+0x2f0>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <HAL_GPIO_Init+0x2f0>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001924:	4a1a      	ldr	r2, [pc, #104]	@ (8001990 <HAL_GPIO_Init+0x2f0>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_GPIO_Init+0x2f0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194e:	4a10      	ldr	r2, [pc, #64]	@ (8001990 <HAL_GPIO_Init+0x2f0>)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f aea3 	bne.w	80016b0 <HAL_GPIO_Init+0x10>
  }
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	371c      	adds	r7, #28
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	48000400 	.word	0x48000400
 8001984:	48000800 	.word	0x48000800
 8001988:	48000c00 	.word	0x48000c00
 800198c:	48001000 	.word	0x48001000
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e08d      	b.n	8001af2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fa7e 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	@ 0x24
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e006      	b.n	8001a4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d108      	bne.n	8001a66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	e007      	b.n	8001a76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69d9      	ldr	r1, [r3, #28]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	461a      	mov	r2, r3
 8001b08:	460b      	mov	r3, r1
 8001b0a:	817b      	strh	r3, [r7, #10]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	f040 80fd 	bne.w	8001d18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0x30>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e0f6      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b34:	f7ff fba2 	bl	800127c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2319      	movs	r3, #25
 8001b40:	2201      	movs	r2, #1
 8001b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fa0a 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0e1      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2221      	movs	r2, #33	@ 0x21
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2210      	movs	r2, #16
 8001b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	893a      	ldrh	r2, [r7, #8]
 8001b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2bff      	cmp	r3, #255	@ 0xff
 8001b86:	d906      	bls.n	8001b96 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	22ff      	movs	r2, #255	@ 0xff
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e007      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ba0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ba4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d024      	beq.n	8001bf8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	8979      	ldrh	r1, [r7, #10]
 8001bea:	4b4e      	ldr	r3, [pc, #312]	@ (8001d24 <HAL_I2C_Master_Transmit+0x228>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 fc05 	bl	8002400 <I2C_TransferConfig>
 8001bf6:	e066      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	8979      	ldrh	r1, [r7, #10]
 8001c00:	4b48      	ldr	r3, [pc, #288]	@ (8001d24 <HAL_I2C_Master_Transmit+0x228>)
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fbfa 	bl	8002400 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c0c:	e05b      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	6a39      	ldr	r1, [r7, #32]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f9fd 	bl	8002012 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07b      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d034      	beq.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d130      	bne.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f976 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e04d      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2bff      	cmp	r3, #255	@ 0xff
 8001c86:	d90e      	bls.n	8001ca6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	22ff      	movs	r2, #255	@ 0xff
 8001c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	8979      	ldrh	r1, [r7, #10]
 8001c96:	2300      	movs	r3, #0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fbae 	bl	8002400 <I2C_TransferConfig>
 8001ca4:	e00f      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	8979      	ldrh	r1, [r7, #10]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fb9d 	bl	8002400 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d19e      	bne.n	8001c0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	6a39      	ldr	r1, [r7, #32]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f9e3 	bl	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e01a      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_I2C_Master_Transmit+0x22c>)
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
  }
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	80002000 	.word	0x80002000
 8001d28:	fe00e800 	.word	0xfe00e800

08001d2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	461a      	mov	r2, r3
 8001d38:	460b      	mov	r3, r1
 8001d3a:	817b      	strh	r3, [r7, #10]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	f040 80db 	bne.w	8001f04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_I2C_Master_Receive+0x30>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e0d4      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d64:	f7ff fa8a 	bl	800127c <HAL_GetTick>
 8001d68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2319      	movs	r3, #25
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f8f2 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0bf      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2222      	movs	r2, #34	@ 0x22
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2210      	movs	r2, #16
 8001d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	893a      	ldrh	r2, [r7, #8]
 8001da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2bff      	cmp	r3, #255	@ 0xff
 8001db6:	d90e      	bls.n	8001dd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	8979      	ldrh	r1, [r7, #10]
 8001dc6:	4b52      	ldr	r3, [pc, #328]	@ (8001f10 <HAL_I2C_Master_Receive+0x1e4>)
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fb16 	bl	8002400 <I2C_TransferConfig>
 8001dd4:	e06d      	b.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	4b49      	ldr	r3, [pc, #292]	@ (8001f10 <HAL_I2C_Master_Receive+0x1e4>)
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fb05 	bl	8002400 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001df6:	e05c      	b.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	6a39      	ldr	r1, [r7, #32]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f993 	bl	8002128 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e07c      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d034      	beq.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d130      	bne.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2200      	movs	r2, #0
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f880 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e04d      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2bff      	cmp	r3, #255	@ 0xff
 8001e72:	d90e      	bls.n	8001e92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	22ff      	movs	r2, #255	@ 0xff
 8001e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	8979      	ldrh	r1, [r7, #10]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fab8 	bl	8002400 <I2C_TransferConfig>
 8001e90:	e00f      	b.n	8001eb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	8979      	ldrh	r1, [r7, #10]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 faa7 	bl	8002400 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d19d      	bne.n	8001df8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	6a39      	ldr	r1, [r7, #32]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f8ed 	bl	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e01a      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <HAL_I2C_Master_Receive+0x1e8>)
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	80002400 	.word	0x80002400
 8001f14:	fe00e800 	.word	0xfe00e800

08001f18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d103      	bne.n	8001f36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d007      	beq.n	8001f54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	619a      	str	r2, [r3, #24]
  }
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f70:	e03b      	b.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f962 	bl	8002240 <I2C_IsErrorOccurred>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d02d      	beq.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8e:	f7ff f975 	bl	800127c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d302      	bcc.n	8001fa4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d122      	bne.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4013      	ands	r3, r2
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d113      	bne.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	f043 0220 	orr.w	r2, r3, #32
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	429a      	cmp	r2, r3
 8002006:	d0b4      	beq.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800201e:	e033      	b.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f90b 	bl	8002240 <I2C_IsErrorOccurred>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e031      	b.n	8002098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d025      	beq.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203c:	f7ff f91e 	bl	800127c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	429a      	cmp	r2, r3
 800204a:	d302      	bcc.n	8002052 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d11a      	bne.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d013      	beq.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d1c4      	bne.n	8002020 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ac:	e02f      	b.n	800210e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f8c4 	bl	8002240 <I2C_IsErrorOccurred>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e02d      	b.n	800211e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7ff f8db 	bl	800127c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11a      	bne.n	800210e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d013      	beq.n	800210e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e007      	b.n	800211e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b20      	cmp	r3, #32
 800211a:	d1c8      	bne.n	80020ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002138:	e071      	b.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f87e 	bl	8002240 <I2C_IsErrorOccurred>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b20      	cmp	r3, #32
 800215a:	d13b      	bne.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d138      	bne.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d105      	bne.n	800217c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b10      	cmp	r3, #16
 8002188:	d121      	bne.n	80021ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2210      	movs	r2, #16
 8002190:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2204      	movs	r2, #4
 8002196:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2220      	movs	r2, #32
 800219e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80021ac:	400b      	ands	r3, r1
 80021ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	75fb      	strb	r3, [r7, #23]
 80021cc:	e002      	b.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80021d4:	f7ff f852 	bl	800127c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d119      	bne.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d116      	bne.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d00f      	beq.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d002      	beq.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d083      	beq.n	800213a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002232:	7dfb      	ldrb	r3, [r7, #23]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	fe00e800 	.word	0xfe00e800

08002240 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d068      	beq.n	800233e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2210      	movs	r2, #16
 8002272:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002274:	e049      	b.n	800230a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d045      	beq.n	800230a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7fe fffd 	bl	800127c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <I2C_IsErrorOccurred+0x54>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d13a      	bne.n	800230a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022b6:	d121      	bne.n	80022fc <I2C_IsErrorOccurred+0xbc>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022be:	d01d      	beq.n	80022fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d01a      	beq.n	80022fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022d6:	f7fe ffd1 	bl	800127c <HAL_GetTick>
 80022da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022dc:	e00e      	b.n	80022fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022de:	f7fe ffcd 	bl	800127c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b19      	cmp	r3, #25
 80022ea:	d907      	bls.n	80022fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80022fa:	e006      	b.n	800230a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b20      	cmp	r3, #32
 8002308:	d1e9      	bne.n	80022de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b20      	cmp	r3, #32
 8002316:	d003      	beq.n	8002320 <I2C_IsErrorOccurred+0xe0>
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0aa      	beq.n	8002276 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2220      	movs	r2, #32
 800232e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00b      	beq.n	8002368 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002360:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002382:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80023ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01c      	beq.n	80023ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7ff fdaf 	bl	8001f18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <I2C_IsErrorOccurred+0x1bc>)
 80023c6:	400b      	ands	r3, r1
 80023c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80023ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3728      	adds	r7, #40	@ 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	fe00e800 	.word	0xfe00e800

08002400 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	817b      	strh	r3, [r7, #10]
 800240e:	4613      	mov	r3, r2
 8002410:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002418:	7a7b      	ldrb	r3, [r7, #9]
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002420:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	4313      	orrs	r3, r2
 800242a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800242e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <I2C_TransferConfig+0x60>)
 8002440:	430b      	orrs	r3, r1
 8002442:	43db      	mvns	r3, r3
 8002444:	ea02 0103 	and.w	r1, r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	03ff63ff 	.word	0x03ff63ff

08002464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d138      	bne.n	80024ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002484:	2302      	movs	r3, #2
 8002486:	e032      	b.n	80024ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	d139      	bne.n	8002584 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800251a:	2302      	movs	r3, #2
 800251c:	e033      	b.n	8002586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2224      	movs	r2, #36	@ 0x24
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800254c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002598:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <HAL_PWREx_GetVoltageRange+0x18>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40007000 	.word	0x40007000

080025b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025be:	d130      	bne.n	8002622 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c0:	4b23      	ldr	r3, [pc, #140]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025cc:	d038      	beq.n	8002640 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ce:	4b20      	ldr	r3, [pc, #128]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025de:	4b1d      	ldr	r3, [pc, #116]	@ (8002654 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2232      	movs	r2, #50	@ 0x32
 80025e4:	fb02 f303 	mul.w	r3, r2, r3
 80025e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9b      	lsrs	r3, r3, #18
 80025f0:	3301      	adds	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025f4:	e002      	b.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025fc:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002608:	d102      	bne.n	8002610 <HAL_PWREx_ControlVoltageScaling+0x60>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f2      	bne.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261c:	d110      	bne.n	8002640 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e00f      	b.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002622:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262e:	d007      	beq.n	8002640 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002638:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800263e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40007000 	.word	0x40007000
 8002654:	20000000 	.word	0x20000000
 8002658:	431bde83 	.word	0x431bde83

0800265c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f000 bc02 	b.w	8002e74 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002670:	4b96      	ldr	r3, [pc, #600]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800267a:	4b94      	ldr	r3, [pc, #592]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80e4 	beq.w	800285a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4c>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	f040 808b 	bne.w	80027b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	f040 8087 	bne.w	80027b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026a8:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_OscConfig+0x64>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e3d9      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	4b81      	ldr	r3, [pc, #516]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <HAL_RCC_OscConfig+0x7e>
 80026d0:	4b7e      	ldr	r3, [pc, #504]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d8:	e005      	b.n	80026e6 <HAL_RCC_OscConfig+0x8a>
 80026da:	4b7c      	ldr	r3, [pc, #496]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d223      	bcs.n	8002732 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fd8c 	bl	800320c <RCC_SetFlashLatencyFromMSIRange>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e3ba      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026fe:	4b73      	ldr	r3, [pc, #460]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a72      	ldr	r2, [pc, #456]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b70      	ldr	r3, [pc, #448]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	496d      	ldr	r1, [pc, #436]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800271c:	4b6b      	ldr	r3, [pc, #428]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	4968      	ldr	r1, [pc, #416]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
 8002730:	e025      	b.n	800277e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002732:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a65      	ldr	r2, [pc, #404]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b63      	ldr	r3, [pc, #396]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4960      	ldr	r1, [pc, #384]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002750:	4b5e      	ldr	r3, [pc, #376]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	495b      	ldr	r1, [pc, #364]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fd4c 	bl	800320c <RCC_SetFlashLatencyFromMSIRange>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e37a      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800277e:	f000 fc81 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b51      	ldr	r3, [pc, #324]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4950      	ldr	r1, [pc, #320]	@ (80028d0 <HAL_RCC_OscConfig+0x274>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	4a4e      	ldr	r2, [pc, #312]	@ (80028d4 <HAL_RCC_OscConfig+0x278>)
 800279c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800279e:	4b4e      	ldr	r3, [pc, #312]	@ (80028d8 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fd1a 	bl	80011dc <HAL_InitTick>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d052      	beq.n	8002858 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	e35e      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d032      	beq.n	8002824 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027be:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a42      	ldr	r2, [pc, #264]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fd57 	bl	800127c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d2:	f7fe fd53 	bl	800127c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e347      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e4:	4b39      	ldr	r3, [pc, #228]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f0:	4b36      	ldr	r3, [pc, #216]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a35      	ldr	r2, [pc, #212]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b33      	ldr	r3, [pc, #204]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4930      	ldr	r1, [pc, #192]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800280e:	4b2f      	ldr	r3, [pc, #188]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	492b      	ldr	r1, [pc, #172]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
 8002822:	e01a      	b.n	800285a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002824:	4b29      	ldr	r3, [pc, #164]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002830:	f7fe fd24 	bl	800127c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002838:	f7fe fd20 	bl	800127c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e314      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x1dc>
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002858:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d073      	beq.n	800294e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d005      	beq.n	8002878 <HAL_RCC_OscConfig+0x21c>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d10e      	bne.n	8002890 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d10b      	bne.n	8002890 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d063      	beq.n	800294c <HAL_RCC_OscConfig+0x2f0>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d15f      	bne.n	800294c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e2f1      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002898:	d106      	bne.n	80028a8 <HAL_RCC_OscConfig+0x24c>
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e025      	b.n	80028f4 <HAL_RCC_OscConfig+0x298>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b0:	d114      	bne.n	80028dc <HAL_RCC_OscConfig+0x280>
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b03      	ldr	r3, [pc, #12]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a02      	ldr	r2, [pc, #8]	@ (80028cc <HAL_RCC_OscConfig+0x270>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e013      	b.n	80028f4 <HAL_RCC_OscConfig+0x298>
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08004364 	.word	0x08004364
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004
 80028dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a9f      	ldr	r2, [pc, #636]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a9c      	ldr	r2, [pc, #624]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fcbe 	bl	800127c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe fcba 	bl	800127c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e2ae      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002916:	4b92      	ldr	r3, [pc, #584]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x2a8>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fcaa 	bl	800127c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe fca6 	bl	800127c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	@ 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e29a      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800293e:	4b88      	ldr	r3, [pc, #544]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x2d0>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d060      	beq.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x310>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d119      	bne.n	800299a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d116      	bne.n	800299a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800296c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x328>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e277      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b76      	ldr	r3, [pc, #472]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	4973      	ldr	r1, [pc, #460]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002998:	e040      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d023      	beq.n	80029ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fc65 	bl	800127c <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fe fc61 	bl	800127c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e255      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c8:	4b65      	ldr	r3, [pc, #404]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b62      	ldr	r3, [pc, #392]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	495f      	ldr	r1, [pc, #380]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	e018      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fc41 	bl	800127c <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe fc3d 	bl	800127c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e231      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a10:	4b53      	ldr	r3, [pc, #332]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d03c      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a30:	4b4b      	ldr	r3, [pc, #300]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a36:	4a4a      	ldr	r2, [pc, #296]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe fc1c 	bl	800127c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fc18 	bl	800127c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e20c      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a5a:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ef      	beq.n	8002a48 <HAL_RCC_OscConfig+0x3ec>
 8002a68:	e01b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a70:	4a3b      	ldr	r2, [pc, #236]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fbff 	bl	800127c <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a82:	f7fe fbfb 	bl	800127c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e1ef      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a94:	4b32      	ldr	r3, [pc, #200]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ef      	bne.n	8002a82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a6 	beq.w	8002bfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10d      	bne.n	8002adc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b27      	ldr	r3, [pc, #156]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac4:	4a26      	ldr	r2, [pc, #152]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002acc:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002adc:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <HAL_RCC_OscConfig+0x508>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d118      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <HAL_RCC_OscConfig+0x508>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	@ (8002b64 <HAL_RCC_OscConfig+0x508>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af4:	f7fe fbc2 	bl	800127c <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe fbbe 	bl	800127c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1b2      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_RCC_OscConfig+0x508>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d108      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4d8>
 8002b22:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b28:	4a0d      	ldr	r2, [pc, #52]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b32:	e029      	b.n	8002b88 <HAL_RCC_OscConfig+0x52c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d115      	bne.n	8002b68 <HAL_RCC_OscConfig+0x50c>
 8002b3c:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	4a03      	ldr	r2, [pc, #12]	@ (8002b60 <HAL_RCC_OscConfig+0x504>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b5c:	e014      	b.n	8002b88 <HAL_RCC_OscConfig+0x52c>
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40007000 	.word	0x40007000
 8002b68:	4b9a      	ldr	r3, [pc, #616]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6e:	4a99      	ldr	r2, [pc, #612]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b78:	4b96      	ldr	r3, [pc, #600]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	4a95      	ldr	r2, [pc, #596]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d016      	beq.n	8002bbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe fb74 	bl	800127c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe fb70 	bl	800127c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e162      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bae:	4b89      	ldr	r3, [pc, #548]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ed      	beq.n	8002b98 <HAL_RCC_OscConfig+0x53c>
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fb5d 	bl	800127c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe fb59 	bl	800127c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e14b      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bdc:	4b7d      	ldr	r3, [pc, #500]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ed      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bea:	7ffb      	ldrb	r3, [r7, #31]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b78      	ldr	r3, [pc, #480]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf4:	4a77      	ldr	r2, [pc, #476]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03c      	beq.n	8002c82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c10:	4b70      	ldr	r3, [pc, #448]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c16:	4a6f      	ldr	r2, [pc, #444]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fb2c 	bl	800127c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c28:	f7fe fb28 	bl	800127c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e11c      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c3a:	4b66      	ldr	r3, [pc, #408]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ef      	beq.n	8002c28 <HAL_RCC_OscConfig+0x5cc>
 8002c48:	e01b      	b.n	8002c82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c4a:	4b62      	ldr	r3, [pc, #392]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c50:	4a60      	ldr	r2, [pc, #384]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fb0f 	bl	800127c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c62:	f7fe fb0b 	bl	800127c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0ff      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c74:	4b57      	ldr	r3, [pc, #348]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ef      	bne.n	8002c62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80f3 	beq.w	8002e72 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	f040 80c9 	bne.w	8002e28 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c96:	4b4f      	ldr	r3, [pc, #316]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 0203 	and.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d12c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d123      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d11b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d113      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d109      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d06b      	beq.n	8002ddc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d062      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d0a:	4b32      	ldr	r3, [pc, #200]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0ac      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d26:	f7fe faa9 	bl	800127c <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe faa5 	bl	800127c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e099      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d40:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4c:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <HAL_RCC_OscConfig+0x77c>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d66:	0212      	lsls	r2, r2, #8
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d6e:	0852      	lsrs	r2, r2, #1
 8002d70:	3a01      	subs	r2, #1
 8002d72:	0552      	lsls	r2, r2, #21
 8002d74:	4311      	orrs	r1, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d7a:	0852      	lsrs	r2, r2, #1
 8002d7c:	3a01      	subs	r2, #1
 8002d7e:	0652      	lsls	r2, r2, #25
 8002d80:	4311      	orrs	r1, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d86:	06d2      	lsls	r2, r2, #27
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	4912      	ldr	r1, [pc, #72]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d90:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002da8:	f7fe fa68 	bl	800127c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fa64 	bl	800127c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e058      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dce:	e050      	b.n	8002e72 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e04f      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ddc:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d144      	bne.n	8002e72 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002de8:	4b24      	ldr	r3, [pc, #144]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a23      	ldr	r2, [pc, #140]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df4:	4b21      	ldr	r3, [pc, #132]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a20      	ldr	r2, [pc, #128]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e00:	f7fe fa3c 	bl	800127c <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fa38 	bl	800127c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e02c      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	4b18      	ldr	r3, [pc, #96]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x7ac>
 8002e26:	e024      	b.n	8002e72 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d01f      	beq.n	8002e6e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a12      	ldr	r2, [pc, #72]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002e34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fa1f 	bl	800127c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe fa1b 	bl	800127c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e00f      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4905      	ldr	r1, [pc, #20]	@ (8002e7c <HAL_RCC_OscConfig+0x820>)
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_RCC_OscConfig+0x824>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
 8002e6c:	e001      	b.n	8002e72 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	feeefffc 	.word	0xfeeefffc

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0e7      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b75      	ldr	r3, [pc, #468]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d910      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b72      	ldr	r3, [pc, #456]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 0207 	bic.w	r2, r3, #7
 8002eae:	4970      	ldr	r1, [pc, #448]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cf      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d908      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4960      	ldr	r1, [pc, #384]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d04c      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d121      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0a6      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f22:	4b54      	ldr	r3, [pc, #336]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d115      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e09a      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e08e      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e086      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b46      	ldr	r3, [pc, #280]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4943      	ldr	r1, [pc, #268]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe f986 	bl	800127c <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fe f982 	bl	800127c <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e06e      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d208      	bcs.n	8002fca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	492b      	ldr	r1, [pc, #172]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fca:	4b29      	ldr	r3, [pc, #164]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d210      	bcs.n	8002ffa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd8:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 0207 	bic.w	r2, r3, #7
 8002fe0:	4923      	ldr	r1, [pc, #140]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe8:	4b21      	ldr	r3, [pc, #132]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e036      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003006:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4918      	ldr	r1, [pc, #96]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003024:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4910      	ldr	r1, [pc, #64]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	4313      	orrs	r3, r2
 8003036:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003038:	f000 f824 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	490b      	ldr	r1, [pc, #44]	@ (8003078 <HAL_RCC_ClockConfig+0x1f4>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	4a09      	ldr	r2, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8003056:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1fc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe f8bd 	bl	80011dc <HAL_InitTick>
 8003062:	4603      	mov	r3, r0
 8003064:	72fb      	strb	r3, [r7, #11]

  return status;
 8003066:	7afb      	ldrb	r3, [r7, #11]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40022000 	.word	0x40022000
 8003074:	40021000 	.word	0x40021000
 8003078:	08004364 	.word	0x08004364
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003092:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800309c:	4b3b      	ldr	r3, [pc, #236]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x34>
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d121      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d11e      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030b8:	4b34      	ldr	r3, [pc, #208]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c4:	4b31      	ldr	r3, [pc, #196]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 80030c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e005      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030d4:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10d      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030fc:	4b25      	ldr	r3, [pc, #148]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x110>)
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e004      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d101      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003108:	4b23      	ldr	r3, [pc, #140]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x114>)
 800310a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d134      	bne.n	800317c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003112:	4b1e      	ldr	r3, [pc, #120]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0xa6>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d003      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0xac>
 8003128:	e005      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x110>)
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	e005      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003130:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x114>)
 8003132:	617b      	str	r3, [r7, #20]
      break;
 8003134:	e002      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	617b      	str	r3, [r7, #20]
      break;
 800313a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800313c:	4b13      	ldr	r3, [pc, #76]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	3301      	adds	r3, #1
 8003148:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	fb03 f202 	mul.w	r2, r3, r2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003162:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	0e5b      	lsrs	r3, r3, #25
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	3301      	adds	r3, #1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800317c:	69bb      	ldr	r3, [r7, #24]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3724      	adds	r7, #36	@ 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	0800437c 	.word	0x0800437c
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031b8:	f7ff fff0 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4904      	ldr	r1, [pc, #16]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08004374 	.word	0x08004374

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031e4:	f7ff ffda 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0adb      	lsrs	r3, r3, #11
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	08004374 	.word	0x08004374

0800320c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003218:	4b2a      	ldr	r3, [pc, #168]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003224:	f7ff f9b6 	bl	8002594 <HAL_PWREx_GetVoltageRange>
 8003228:	6178      	str	r0, [r7, #20]
 800322a:	e014      	b.n	8003256 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	4a24      	ldr	r2, [pc, #144]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003236:	6593      	str	r3, [r2, #88]	@ 0x58
 8003238:	4b22      	ldr	r3, [pc, #136]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003244:	f7ff f9a6 	bl	8002594 <HAL_PWREx_GetVoltageRange>
 8003248:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b1e      	ldr	r3, [pc, #120]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4a1d      	ldr	r2, [pc, #116]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325c:	d10b      	bne.n	8003276 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b80      	cmp	r3, #128	@ 0x80
 8003262:	d919      	bls.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2ba0      	cmp	r3, #160	@ 0xa0
 8003268:	d902      	bls.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800326a:	2302      	movs	r3, #2
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	e013      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003270:	2301      	movs	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e010      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b80      	cmp	r3, #128	@ 0x80
 800327a:	d902      	bls.n	8003282 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800327c:	2303      	movs	r3, #3
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e00a      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b80      	cmp	r3, #128	@ 0x80
 8003286:	d102      	bne.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003288:	2302      	movs	r3, #2
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e004      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b70      	cmp	r3, #112	@ 0x70
 8003292:	d101      	bne.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 0207 	bic.w	r2, r3, #7
 80032a0:	4909      	ldr	r1, [pc, #36]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032a8:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40022000 	.word	0x40022000

080032cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d4:	2300      	movs	r3, #0
 80032d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032d8:	2300      	movs	r3, #0
 80032da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d031      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032f0:	d01a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032f6:	d814      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003300:	d10f      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003302:	4b5d      	ldr	r3, [pc, #372]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4a5c      	ldr	r2, [pc, #368]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800330e:	e00c      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f9f0 	bl	80036fc <RCCEx_PLLSAI1_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003320:	e003      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	74fb      	strb	r3, [r7, #19]
      break;
 8003326:	e000      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003330:	4b51      	ldr	r3, [pc, #324]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	494e      	ldr	r1, [pc, #312]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003346:	e001      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 809e 	beq.w	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800335e:	4b46      	ldr	r3, [pc, #280]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800336e:	2300      	movs	r3, #0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	4b40      	ldr	r3, [pc, #256]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	4a3f      	ldr	r2, [pc, #252]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003380:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338c:	2301      	movs	r3, #1
 800338e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003390:	4b3a      	ldr	r3, [pc, #232]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a39      	ldr	r2, [pc, #228]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800339c:	f7fd ff6e 	bl	800127c <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a2:	e009      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a4:	f7fd ff6a 	bl	800127c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d902      	bls.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	74fb      	strb	r3, [r7, #19]
        break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033b8:	4b30      	ldr	r3, [pc, #192]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ef      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d15a      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d019      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033e6:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f2:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003408:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800340a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800340e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003412:	4a19      	ldr	r2, [pc, #100]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d016      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fd ff2a 	bl	800127c <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342a:	e00b      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fd ff26 	bl	800127c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d902      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	74fb      	strb	r3, [r7, #19]
            break;
 8003442:	e006      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003444:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ec      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003458:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	4904      	ldr	r1, [pc, #16]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800346e:	e009      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	74bb      	strb	r3, [r7, #18]
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003484:	7c7b      	ldrb	r3, [r7, #17]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348a:	4b9b      	ldr	r3, [pc, #620]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	4a9a      	ldr	r2, [pc, #616]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a2:	4b95      	ldr	r3, [pc, #596]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	f023 0203 	bic.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4991      	ldr	r1, [pc, #580]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c4:	4b8c      	ldr	r3, [pc, #560]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ca:	f023 020c 	bic.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	4989      	ldr	r1, [pc, #548]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034e6:	4b84      	ldr	r3, [pc, #528]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	4980      	ldr	r1, [pc, #512]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003508:	4b7b      	ldr	r3, [pc, #492]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003516:	4978      	ldr	r1, [pc, #480]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352a:	4b73      	ldr	r3, [pc, #460]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003538:	496f      	ldr	r1, [pc, #444]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800354c:	4b6a      	ldr	r3, [pc, #424]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003552:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	4967      	ldr	r1, [pc, #412]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356e:	4b62      	ldr	r3, [pc, #392]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	495e      	ldr	r1, [pc, #376]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003590:	4b59      	ldr	r3, [pc, #356]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359e:	4956      	ldr	r1, [pc, #344]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b2:	4b51      	ldr	r3, [pc, #324]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	494d      	ldr	r1, [pc, #308]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d028      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035d4:	4b48      	ldr	r3, [pc, #288]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e2:	4945      	ldr	r1, [pc, #276]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f2:	d106      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f4:	4b40      	ldr	r3, [pc, #256]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a3f      	ldr	r2, [pc, #252]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035fe:	60d3      	str	r3, [r2, #12]
 8003600:	e011      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003606:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800360a:	d10c      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f872 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d028      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003632:	4b31      	ldr	r3, [pc, #196]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003638:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003640:	492d      	ldr	r1, [pc, #180]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003650:	d106      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003652:	4b29      	ldr	r3, [pc, #164]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	4a28      	ldr	r2, [pc, #160]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800365c:	60d3      	str	r3, [r2, #12]
 800365e:	e011      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003664:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	2101      	movs	r1, #1
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f843 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01c      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003690:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369e:	4916      	ldr	r1, [pc, #88]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ae:	d10c      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	2102      	movs	r1, #2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f820 	bl	80036fc <RCCEx_PLLSAI1_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036d6:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	4904      	ldr	r1, [pc, #16]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000

080036fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800370a:	4b74      	ldr	r3, [pc, #464]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003716:	4b71      	ldr	r3, [pc, #452]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0203 	and.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d10d      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
       ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800372e:	4b6b      	ldr	r3, [pc, #428]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
       ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d047      	beq.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e044      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d018      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x86>
 8003750:	2b03      	cmp	r3, #3
 8003752:	d825      	bhi.n	80037a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x62>
 8003758:	2b02      	cmp	r3, #2
 800375a:	d009      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x74>
 800375c:	e020      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800375e:	4b5f      	ldr	r3, [pc, #380]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11d      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376e:	e01a      	b.n	80037a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003770:	4b5a      	ldr	r3, [pc, #360]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e013      	b.n	80037aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003782:	4b56      	ldr	r3, [pc, #344]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800378e:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800379e:	e006      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e004      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037b6:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	430b      	orrs	r3, r1
 80037cc:	4943      	ldr	r1, [pc, #268]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d17c      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037d8:	4b40      	ldr	r3, [pc, #256]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3f      	ldr	r2, [pc, #252]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80037de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e4:	f7fd fd4a 	bl	800127c <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ec:	f7fd fd46 	bl	800127c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
        break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ef      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d15f      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d110      	bne.n	800383a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003818:	4b30      	ldr	r3, [pc, #192]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003820:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6892      	ldr	r2, [r2, #8]
 8003828:	0211      	lsls	r1, r2, #8
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	06d2      	lsls	r2, r2, #27
 8003830:	430a      	orrs	r2, r1
 8003832:	492a      	ldr	r1, [pc, #168]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	610b      	str	r3, [r1, #16]
 8003838:	e027      	b.n	800388a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d112      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003848:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6892      	ldr	r2, [r2, #8]
 8003850:	0211      	lsls	r1, r2, #8
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6912      	ldr	r2, [r2, #16]
 8003856:	0852      	lsrs	r2, r2, #1
 8003858:	3a01      	subs	r2, #1
 800385a:	0552      	lsls	r2, r2, #21
 800385c:	430a      	orrs	r2, r1
 800385e:	491f      	ldr	r1, [pc, #124]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	610b      	str	r3, [r1, #16]
 8003864:	e011      	b.n	800388a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003866:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800386e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6892      	ldr	r2, [r2, #8]
 8003876:	0211      	lsls	r1, r2, #8
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6952      	ldr	r2, [r2, #20]
 800387c:	0852      	lsrs	r2, r2, #1
 800387e:	3a01      	subs	r2, #1
 8003880:	0652      	lsls	r2, r2, #25
 8003882:	430a      	orrs	r2, r1
 8003884:	4915      	ldr	r1, [pc, #84]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800388a:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a13      	ldr	r2, [pc, #76]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003890:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003894:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fd fcf1 	bl	800127c <HAL_GetTick>
 800389a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389c:	e009      	b.n	80038b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800389e:	f7fd fced 	bl	800127c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d902      	bls.n	80038b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	73fb      	strb	r3, [r7, #15]
          break;
 80038b0:	e005      	b.n	80038be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b2:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0ef      	beq.n	800389e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	4903      	ldr	r1, [pc, #12]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e040      	b.n	8003974 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fb4a 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	@ 0x24
 800390c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa82 	bl	8003e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f825 	bl	800397c <UART_SetConfig>
 8003932:	4603      	mov	r3, r0
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e01b      	b.n	8003974 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800394a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800395a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fb01 	bl	8003f74 <UART_CheckIdleState>
 8003972:	4603      	mov	r3, r0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b08a      	sub	sp, #40	@ 0x28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b9e      	ldr	r3, [pc, #632]	@ (8003c24 <UART_SetConfig+0x2a8>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a93      	ldr	r2, [pc, #588]	@ (8003c28 <UART_SetConfig+0x2ac>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e4:	4313      	orrs	r3, r2
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a8a      	ldr	r2, [pc, #552]	@ (8003c2c <UART_SetConfig+0x2b0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d126      	bne.n	8003a54 <UART_SetConfig+0xd8>
 8003a06:	4b8a      	ldr	r3, [pc, #552]	@ (8003c30 <UART_SetConfig+0x2b4>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d81b      	bhi.n	8003a4c <UART_SetConfig+0xd0>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <UART_SetConfig+0xa0>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a3d 	.word	0x08003a3d
 8003a24:	08003a35 	.word	0x08003a35
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a32:	e0ab      	b.n	8003b8c <UART_SetConfig+0x210>
 8003a34:	2302      	movs	r3, #2
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3a:	e0a7      	b.n	8003b8c <UART_SetConfig+0x210>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a42:	e0a3      	b.n	8003b8c <UART_SetConfig+0x210>
 8003a44:	2308      	movs	r3, #8
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4a:	e09f      	b.n	8003b8c <UART_SetConfig+0x210>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a52:	e09b      	b.n	8003b8c <UART_SetConfig+0x210>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a76      	ldr	r2, [pc, #472]	@ (8003c34 <UART_SetConfig+0x2b8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d138      	bne.n	8003ad0 <UART_SetConfig+0x154>
 8003a5e:	4b74      	ldr	r3, [pc, #464]	@ (8003c30 <UART_SetConfig+0x2b4>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d82d      	bhi.n	8003ac8 <UART_SetConfig+0x14c>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <UART_SetConfig+0xf8>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003ac9 	.word	0x08003ac9
 8003a7c:	08003ac9 	.word	0x08003ac9
 8003a80:	08003ac9 	.word	0x08003ac9
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003ac9 	.word	0x08003ac9
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ab1 	.word	0x08003ab1
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ac9 	.word	0x08003ac9
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	08003ac1 	.word	0x08003ac1
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aae:	e06d      	b.n	8003b8c <UART_SetConfig+0x210>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab6:	e069      	b.n	8003b8c <UART_SetConfig+0x210>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003abe:	e065      	b.n	8003b8c <UART_SetConfig+0x210>
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac6:	e061      	b.n	8003b8c <UART_SetConfig+0x210>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ace:	e05d      	b.n	8003b8c <UART_SetConfig+0x210>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	@ (8003c38 <UART_SetConfig+0x2bc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d125      	bne.n	8003b26 <UART_SetConfig+0x1aa>
 8003ada:	4b55      	ldr	r3, [pc, #340]	@ (8003c30 <UART_SetConfig+0x2b4>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ae4:	2b30      	cmp	r3, #48	@ 0x30
 8003ae6:	d016      	beq.n	8003b16 <UART_SetConfig+0x19a>
 8003ae8:	2b30      	cmp	r3, #48	@ 0x30
 8003aea:	d818      	bhi.n	8003b1e <UART_SetConfig+0x1a2>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d00a      	beq.n	8003b06 <UART_SetConfig+0x18a>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d814      	bhi.n	8003b1e <UART_SetConfig+0x1a2>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <UART_SetConfig+0x182>
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d008      	beq.n	8003b0e <UART_SetConfig+0x192>
 8003afc:	e00f      	b.n	8003b1e <UART_SetConfig+0x1a2>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b04:	e042      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b06:	2302      	movs	r3, #2
 8003b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0c:	e03e      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b14:	e03a      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b16:	2308      	movs	r3, #8
 8003b18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1c:	e036      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b1e:	2310      	movs	r3, #16
 8003b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b24:	e032      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c28 <UART_SetConfig+0x2ac>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d12a      	bne.n	8003b86 <UART_SetConfig+0x20a>
 8003b30:	4b3f      	ldr	r3, [pc, #252]	@ (8003c30 <UART_SetConfig+0x2b4>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b36:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b3e:	d01a      	beq.n	8003b76 <UART_SetConfig+0x1fa>
 8003b40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b44:	d81b      	bhi.n	8003b7e <UART_SetConfig+0x202>
 8003b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4a:	d00c      	beq.n	8003b66 <UART_SetConfig+0x1ea>
 8003b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b50:	d815      	bhi.n	8003b7e <UART_SetConfig+0x202>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <UART_SetConfig+0x1e2>
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5a:	d008      	beq.n	8003b6e <UART_SetConfig+0x1f2>
 8003b5c:	e00f      	b.n	8003b7e <UART_SetConfig+0x202>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b64:	e012      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b66:	2302      	movs	r3, #2
 8003b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6c:	e00e      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b74:	e00a      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b76:	2308      	movs	r3, #8
 8003b78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7c:	e006      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b7e:	2310      	movs	r3, #16
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b84:	e002      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b86:	2310      	movs	r3, #16
 8003b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a25      	ldr	r2, [pc, #148]	@ (8003c28 <UART_SetConfig+0x2ac>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f040 808a 	bne.w	8003cac <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d824      	bhi.n	8003bea <UART_SetConfig+0x26e>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <UART_SetConfig+0x22c>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bcd 	.word	0x08003bcd
 8003bac:	08003beb 	.word	0x08003beb
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003beb 	.word	0x08003beb
 8003bb8:	08003bdb 	.word	0x08003bdb
 8003bbc:	08003beb 	.word	0x08003beb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003beb 	.word	0x08003beb
 8003bc8:	08003be3 	.word	0x08003be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7ff faf2 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	61f8      	str	r0, [r7, #28]
        break;
 8003bd2:	e010      	b.n	8003bf6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <UART_SetConfig+0x2c0>)
 8003bd6:	61fb      	str	r3, [r7, #28]
        break;
 8003bd8:	e00d      	b.n	8003bf6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bda:	f7ff fa53 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003bde:	61f8      	str	r0, [r7, #28]
        break;
 8003be0:	e009      	b.n	8003bf6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be6:	61fb      	str	r3, [r7, #28]
        break;
 8003be8:	e005      	b.n	8003bf6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8109 	beq.w	8003e10 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d305      	bcc.n	8003c1a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d912      	bls.n	8003c40 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c20:	e0f6      	b.n	8003e10 <UART_SetConfig+0x494>
 8003c22:	bf00      	nop
 8003c24:	efff69f3 	.word	0xefff69f3
 8003c28:	40008000 	.word	0x40008000
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40004400 	.word	0x40004400
 8003c38:	40004800 	.word	0x40004800
 8003c3c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2200      	movs	r2, #0
 8003c44:	461c      	mov	r4, r3
 8003c46:	4615      	mov	r5, r2
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	022b      	lsls	r3, r5, #8
 8003c52:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c56:	0222      	lsls	r2, r4, #8
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	6849      	ldr	r1, [r1, #4]
 8003c5c:	0849      	lsrs	r1, r1, #1
 8003c5e:	2000      	movs	r0, #0
 8003c60:	4688      	mov	r8, r1
 8003c62:	4681      	mov	r9, r0
 8003c64:	eb12 0a08 	adds.w	sl, r2, r8
 8003c68:	eb43 0b09 	adc.w	fp, r3, r9
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c7a:	4650      	mov	r0, sl
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	f7fc fcd1 	bl	8000624 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4613      	mov	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c90:	d308      	bcc.n	8003ca4 <UART_SetConfig+0x328>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c98:	d204      	bcs.n	8003ca4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	e0b5      	b.n	8003e10 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003caa:	e0b1      	b.n	8003e10 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb4:	d15d      	bne.n	8003d72 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d827      	bhi.n	8003d0e <UART_SetConfig+0x392>
 8003cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <UART_SetConfig+0x348>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003cf1 	.word	0x08003cf1
 8003ccc:	08003cf9 	.word	0x08003cf9
 8003cd0:	08003d0f 	.word	0x08003d0f
 8003cd4:	08003cff 	.word	0x08003cff
 8003cd8:	08003d0f 	.word	0x08003d0f
 8003cdc:	08003d0f 	.word	0x08003d0f
 8003ce0:	08003d0f 	.word	0x08003d0f
 8003ce4:	08003d07 	.word	0x08003d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7ff fa64 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8003cec:	61f8      	str	r0, [r7, #28]
        break;
 8003cee:	e014      	b.n	8003d1a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7ff fa76 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 8003cf4:	61f8      	str	r0, [r7, #28]
        break;
 8003cf6:	e010      	b.n	8003d1a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <UART_SetConfig+0x4b0>)
 8003cfa:	61fb      	str	r3, [r7, #28]
        break;
 8003cfc:	e00d      	b.n	8003d1a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfe:	f7ff f9c1 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003d02:	61f8      	str	r0, [r7, #28]
        break;
 8003d04:	e009      	b.n	8003d1a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d0a:	61fb      	str	r3, [r7, #28]
        break;
 8003d0c:	e005      	b.n	8003d1a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d077      	beq.n	8003e10 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005a      	lsls	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b0f      	cmp	r3, #15
 8003d3a:	d916      	bls.n	8003d6a <UART_SetConfig+0x3ee>
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d42:	d212      	bcs.n	8003d6a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f023 030f 	bic.w	r3, r3, #15
 8003d4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	8afb      	ldrh	r3, [r7, #22]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	8afa      	ldrh	r2, [r7, #22]
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	e052      	b.n	8003e10 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d70:	e04e      	b.n	8003e10 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d827      	bhi.n	8003dca <UART_SetConfig+0x44e>
 8003d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d80 <UART_SetConfig+0x404>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	08003dcb 	.word	0x08003dcb
 8003d90:	08003dbb 	.word	0x08003dbb
 8003d94:	08003dcb 	.word	0x08003dcb
 8003d98:	08003dcb 	.word	0x08003dcb
 8003d9c:	08003dcb 	.word	0x08003dcb
 8003da0:	08003dc3 	.word	0x08003dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7ff fa06 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8003da8:	61f8      	str	r0, [r7, #28]
        break;
 8003daa:	e014      	b.n	8003dd6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7ff fa18 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 8003db0:	61f8      	str	r0, [r7, #28]
        break;
 8003db2:	e010      	b.n	8003dd6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e2c <UART_SetConfig+0x4b0>)
 8003db6:	61fb      	str	r3, [r7, #28]
        break;
 8003db8:	e00d      	b.n	8003dd6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7ff f963 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003dbe:	61f8      	str	r0, [r7, #28]
        break;
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc6:	61fb      	str	r3, [r7, #28]
        break;
 8003dc8:	e005      	b.n	8003dd6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d019      	beq.n	8003e10 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	085a      	lsrs	r2, r3, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	d909      	bls.n	8003e0a <UART_SetConfig+0x48e>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfc:	d205      	bcs.n	8003e0a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e002      	b.n	8003e10 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3728      	adds	r7, #40	@ 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2a:	bf00      	nop
 8003e2c:	00f42400 	.word	0x00f42400

08003e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01a      	beq.n	8003f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f2e:	d10a      	bne.n	8003f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b098      	sub	sp, #96	@ 0x60
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f84:	f7fd f97a 	bl	800127c <HAL_GetTick>
 8003f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d12e      	bne.n	8003ff6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f88c 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d021      	beq.n	8003ff6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e6      	bne.n	8003fb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e062      	b.n	80040bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d149      	bne.n	8004098 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f856 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03c      	beq.n	8004098 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	623b      	str	r3, [r7, #32]
   return(result);
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403c:	633b      	str	r3, [r7, #48]	@ 0x30
 800403e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004070:	61fa      	str	r2, [r7, #28]
 8004072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	617b      	str	r3, [r7, #20]
   return(result);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e011      	b.n	80040bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3758      	adds	r7, #88	@ 0x58
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d4:	e04f      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d04b      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7fd f8cd 	bl	800127c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e04e      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d037      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d034      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b40      	cmp	r3, #64	@ 0x40
 8004110:	d031      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d110      	bne.n	8004142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f838 	bl	800419e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2208      	movs	r2, #8
 8004132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e029      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800414c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004150:	d111      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800415a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f81e 	bl	800419e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e00f      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	429a      	cmp	r2, r3
 8004192:	d0a0      	beq.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800419e:	b480      	push	{r7}
 80041a0:	b095      	sub	sp, #84	@ 0x54
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e6      	bne.n	80041a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004210:	2b01      	cmp	r3, #1
 8004212:	d118      	bne.n	8004246 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	60bb      	str	r3, [r7, #8]
   return(result);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	647b      	str	r3, [r7, #68]	@ 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6979      	ldr	r1, [r7, #20]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	613b      	str	r3, [r7, #16]
   return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e6      	bne.n	8004214 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800425a:	bf00      	nop
 800425c:	3754      	adds	r7, #84	@ 0x54
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <memset>:
 8004266:	4402      	add	r2, r0
 8004268:	4603      	mov	r3, r0
 800426a:	4293      	cmp	r3, r2
 800426c:	d100      	bne.n	8004270 <memset+0xa>
 800426e:	4770      	bx	lr
 8004270:	f803 1b01 	strb.w	r1, [r3], #1
 8004274:	e7f9      	b.n	800426a <memset+0x4>
	...

08004278 <__libc_init_array>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	4d0d      	ldr	r5, [pc, #52]	@ (80042b0 <__libc_init_array+0x38>)
 800427c:	4c0d      	ldr	r4, [pc, #52]	@ (80042b4 <__libc_init_array+0x3c>)
 800427e:	1b64      	subs	r4, r4, r5
 8004280:	10a4      	asrs	r4, r4, #2
 8004282:	2600      	movs	r6, #0
 8004284:	42a6      	cmp	r6, r4
 8004286:	d109      	bne.n	800429c <__libc_init_array+0x24>
 8004288:	4d0b      	ldr	r5, [pc, #44]	@ (80042b8 <__libc_init_array+0x40>)
 800428a:	4c0c      	ldr	r4, [pc, #48]	@ (80042bc <__libc_init_array+0x44>)
 800428c:	f000 f85e 	bl	800434c <_init>
 8004290:	1b64      	subs	r4, r4, r5
 8004292:	10a4      	asrs	r4, r4, #2
 8004294:	2600      	movs	r6, #0
 8004296:	42a6      	cmp	r6, r4
 8004298:	d105      	bne.n	80042a6 <__libc_init_array+0x2e>
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a0:	4798      	blx	r3
 80042a2:	3601      	adds	r6, #1
 80042a4:	e7ee      	b.n	8004284 <__libc_init_array+0xc>
 80042a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042aa:	4798      	blx	r3
 80042ac:	3601      	adds	r6, #1
 80042ae:	e7f2      	b.n	8004296 <__libc_init_array+0x1e>
 80042b0:	080043b4 	.word	0x080043b4
 80042b4:	080043b4 	.word	0x080043b4
 80042b8:	080043b4 	.word	0x080043b4
 80042bc:	080043b8 	.word	0x080043b8

080042c0 <round>:
 80042c0:	ec51 0b10 	vmov	r0, r1, d0
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80042ca:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80042ce:	2a13      	cmp	r2, #19
 80042d0:	460b      	mov	r3, r1
 80042d2:	4605      	mov	r5, r0
 80042d4:	dc1b      	bgt.n	800430e <round+0x4e>
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	da0b      	bge.n	80042f2 <round+0x32>
 80042da:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80042de:	3201      	adds	r2, #1
 80042e0:	bf04      	itt	eq
 80042e2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80042e6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80042ea:	2200      	movs	r2, #0
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	e015      	b.n	800431e <round+0x5e>
 80042f2:	4c15      	ldr	r4, [pc, #84]	@ (8004348 <round+0x88>)
 80042f4:	4114      	asrs	r4, r2
 80042f6:	ea04 0601 	and.w	r6, r4, r1
 80042fa:	4306      	orrs	r6, r0
 80042fc:	d00f      	beq.n	800431e <round+0x5e>
 80042fe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004302:	fa41 f202 	asr.w	r2, r1, r2
 8004306:	4413      	add	r3, r2
 8004308:	ea23 0304 	bic.w	r3, r3, r4
 800430c:	e7ed      	b.n	80042ea <round+0x2a>
 800430e:	2a33      	cmp	r2, #51	@ 0x33
 8004310:	dd08      	ble.n	8004324 <round+0x64>
 8004312:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004316:	d102      	bne.n	800431e <round+0x5e>
 8004318:	4602      	mov	r2, r0
 800431a:	f7fb ff5d 	bl	80001d8 <__adddf3>
 800431e:	ec41 0b10 	vmov	d0, r0, r1
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8004328:	f04f 34ff 	mov.w	r4, #4294967295
 800432c:	40f4      	lsrs	r4, r6
 800432e:	4204      	tst	r4, r0
 8004330:	d0f5      	beq.n	800431e <round+0x5e>
 8004332:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8004336:	2201      	movs	r2, #1
 8004338:	408a      	lsls	r2, r1
 800433a:	1952      	adds	r2, r2, r5
 800433c:	bf28      	it	cs
 800433e:	3301      	addcs	r3, #1
 8004340:	ea22 0204 	bic.w	r2, r2, r4
 8004344:	e7d2      	b.n	80042ec <round+0x2c>
 8004346:	bf00      	nop
 8004348:	000fffff 	.word	0x000fffff

0800434c <_init>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr

08004358 <_fini>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr
